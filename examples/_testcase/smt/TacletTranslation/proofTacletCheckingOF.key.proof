\settings {
"#Proof-Settings-Config-File
#Fri Oct 16 16:58:26 CEST 2009
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=Yices
[DecisionProcedure]multprovers=Z3\=true\:Yices\=false\:Simplify\=false\:CVC3\=true
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , throughout-throughout\:toutOn , assertions-assertions\:on , programRules-programRules\:Java , intRules-intRules\:arithmeticSemanticsCheckingOF , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=false
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[Libraries]Default=/home/niederma/.key/libraries/stringRules.key-false, /home/niederma/.key/libraries/deprecatedRules.key-false, /home/niederma/.key/libraries/acc.key-false
[DecisionProcedure]savefile=false
[DecisionProcedure]Timeout=16
[General]StupidMode=true
[General]UseJML=true
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[DecisionProcedure]WaitForAllProvers=true
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_PROGRAMS_TO_RIGHT
[DecisionProcedure]Exec=CVC3\=cvc3 -lang smt %f\:Yices\=/home/niederma/Programme/yices/bin/yices -tc -smt %f\:Simplify\=/home/niederma/Programme/simplify/simplify %f\:Z3\=/home/niederma/Programme/z3/bin/z3 -smt %f
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=1000
[View]MaxTooltipLines=40
[General]SoundNotification=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[Choice]Choices=throughout-throughout\:toutOn-throughout\:toutOff , transactions-transactions\:transactionsOn-transactions\:transactionsOff , assertions-assertions\:on-assertions\:off-assertions\:safe , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , programRules-programRules\:Java-programRules\:ODL , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff-javacard\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
"
}

\problem {
  char_MAX = 65535
& \forall int left; 
    \forall int right; 
        javaAddLong(left, right)
      = \if (inLong(left + right))
            \then (left + right)
            \else (javaAddLongOverFlow(left, right))
& \forall int left; 
    \forall int right; 
        javaDivInt(left, right)
      = \if (inInt(jdiv(left, right)))
            \then (jdiv(left, right))
            \else (javaDivIntOverFlow(left, right))
& \forall int left; 
      javaUnaryMinusLong(left)
    = \if (inLong(-left))
          \then (-left)
          \else (javaUnaryMinusLongOverFlow(left))
& short_MAX = 32767
& \forall int left; 
    \forall int right; 
        javaSubLong(left, right)
      = \if (inLong(left - right))
            \then (left - right)
            \else (javaSubLongOverFlow(left, right))
& \forall boolean b1; 
    \forall boolean b2; 
      (b1 = TRUE <-> b2 = TRUE <-> b1 = b2)
& \forall int left; 
    \forall int right; 
        javaMulLong(left, right)
      = \if (inLong(left * right))
            \then (left * right)
            \else (javaMulLongOverFlow(left, right))
& \forall int i; 
    (inChar(i) <-> i <= char_MAX & char_MIN <= i)
& \forall int left; 
    \forall int right; 
        javaDivLong(left, right)
      = \if (inLong(jdiv(left, right)))
            \then (jdiv(left, right))
            \else (javaDivLongOverFlow(left, right))
& short_RANGE = 65536
& long_RANGE = 18446744073709551616
& \forall int left; 
    \forall int right; 
        javaMulInt(left, right)
      = \if (inInt(left * right))
            \then (left * right)
            \else (javaMulIntOverFlow(left, right))
& \forall int left; 
    \forall int right; 
        javaAddInt(left, right)
      = \if (inInt(left + right))
            \then (left + right)
            \else (javaAddIntOverFlow(left, right))
& long_MAX = 9223372036854775807
& int_MAX = 2147483647
& \forall int i; 
    (inInt(i) <-> i <= int_MAX & int_MIN <= i)
& int_MIN = -2147483648
& int_HALFRANGE = 2147483648
& \forall int left; 
      javaCastChar(left)
    = \if (inChar(left))
          \then (left)
          \else (javaCastCharOverFlow(left))
& \forall int left; 
    \forall int right; 
      javaMod(left, right) = jmod(left, right)
& \forall int i; 
    (inShort(i) <-> i <= short_MAX & short_MIN <= i)
& char_MIN = 0
& short_MIN = -32768
& short_HALFRANGE = 32768
& \forall int left; 
      javaCastLong(left)
    = \if (inLong(left))
          \then (left)
          \else (javaCastLongOverFlow(left))
& \forall int i; 
    (inLong(i) <-> i <= long_MAX & long_MIN <= i)
& \forall int left; 
      javaCastInt(left)
    = \if (inInt(left))
          \then (left)
          \else (javaCastIntOverFlow(left))
& \forall int i; 
    (inByte(i) <-> i <= byte_MAX & byte_MIN <= i)
& long_HALFRANGE = 9223372036854775808
& long_MIN = -9223372036854775808
& \forall int left; 
      javaUnaryMinusInt(left)
    = \if (inInt(-left))
          \then (-left)
          \else (javaUnaryMinusIntOverFlow(left))
& \forall int left; 
    \forall int right; 
        javaSubInt(left, right)
      = \if (inInt(left - right))
            \then (left - right)
            \else (javaSubIntOverFlow(left, right))
& !TRUE = FALSE
& !FALSE = TRUE
& \forall boolean bo;  (bo = TRUE <-> !bo = FALSE)
& \forall boolean bo;  (bo = FALSE <-> !bo = TRUE)
& \forall boolean bo;  (TRUE = bo <-> bo = TRUE)
& \forall boolean bo;  (FALSE = bo <-> bo = FALSE)
& byte_RANGE = 256
& byte_MAX = 127
& \forall int left; 
      javaCastByte(left)
    = \if (inByte(left))
          \then (left)
          \else (javaCastByteOverFlow(left))
& char_RANGE = 65536
& int_RANGE = 4294967296
& byte_MIN = -128
& \forall int left; 
      javaCastShort(left)
    = \if (inShort(left))
          \then (left)
          \else (javaCastShortOverFlow(left))
& byte_HALFRANGE = 128

}

\proof {
(keyLog "0" (keyUser "niederma" ) (keyVersion "0029627b155f795ef7f52729d72dd4378cbf2170"))

(autoModeTime "2238")

(branch "dummy ID"
(rule "boolean_equal_2" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "false_to_not_true" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "boolean_not_equal_2" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "false_to_not_true" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "false_to_not_true" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "false_to_not_true" (formula "1") (term "1,0,1,0,0,0,0,0,0,0,0"))
(rule "boolean_equal" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "double_not" (formula "1") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "boolean_equal_2" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "boolean_equal" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "double_not" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "boolean_equal_2" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "boolean_equal" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0"))
(rule "false_to_not_true" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0,0,0"))
(rule "replace_byte_RANGE" (formula "1") (term "0,1,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0"))
(rule "replace_byte_MAX" (formula "1") (term "0,1,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "replace_char_RANGE" (formula "1") (term "0,1,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
(rule "replace_int_RANGE" (formula "1") (term "0,1,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "replace_byte_MIN" (formula "1") (term "0,1,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "eqSymm" (formula "1") (term "0,1,0"))
(rule "replace_byte_HALFRANGE" (formula "1") (term "0,1"))
(rule "eqClose" (formula "1") (term "1"))
(rule "concrete_and_3" (formula "1"))
(rule "expand_inByte" (formula "1") (term "0,0,0,1,0"))
(rule "expand_inInt" (formula "1") (term "0,1,0,1,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
(rule "replace_short_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inShort" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaMod" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaCastInt" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0"))
(rule "translateJavaCastByte" (formula "1") (term "1,0,1,0"))
(rule "translateJavaUnaryMinusInt" (formula "1") (term "0,0,1,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0,1,0,0,0"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,0,0,0"))
(rule "expand_inShort" (formula "1") (term "0,0,0,1"))
(rule "translateJavaCastShort" (formula "1") (term "1,0,1"))
(rule "replace_byte_MAX" (formula "1") (term "1,0,0,0,0,1,0"))
(rule "replace_byte_MIN" (formula "1") (term "0,1,0,0,0,1,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,1,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,1,0,0,0,0"))
(rule "expand_inByte" (formula "1") (term "0,1,0,1,0"))
(rule "expand_inInt" (formula "1") (term "0,0,0,1,0,0,0,0"))
(rule "replace_long_HALFRANGE" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,0,0,0,1,0,0,0"))
(rule "replace_short_MAX" (formula "1") (term "1,0,0,0,0,1"))
(rule "replace_short_MIN" (formula "1") (term "0,1,0,0,0,1"))
(rule "expand_inShort" (formula "1") (term "0,1,0,1"))
(rule "eqSymm" (formula "1") (term "0,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,1,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,1,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,1,0,0,0,0"))
(rule "replace_byte_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,0"))
(rule "expand_inByte" (formula "1") (term "0,0,1,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,1,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,0,0,1,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,1,0,0,0,0,0,0"))
(rule "replace_byte_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_short_MIN" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_short_MIN" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
(rule "translateJavaCastLong" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0"))
(rule "replace_short_HALFRANGE" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,0,1,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "replace_byte_MIN" (formula "1") (term "0,1,0,0,0,1,0"))
(rule "replace_byte_MAX" (formula "1") (term "1,0,0,0,0,1,0"))
(rule "eqClose" (formula "1") (term "0,1,0"))
(rule "replace_byte_MIN" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
(rule "replace_byte_MAX" (formula "1") (term "1,0,0,0,1,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0"))
(rule "replace_short_MIN" (formula "1") (term "0,1,0,0,0,1"))
(rule "replace_short_MAX" (formula "1") (term "1,0,0,0,0,1"))
(rule "eqClose" (formula "1") (term "0,1"))
(rule "eq_and_2" (formula "1"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,1,0,1,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,1,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,1,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,1,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_char_MAX" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_1" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_int_HALFRANGE" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
(rule "replace_short_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,0,0"))
(rule "replace_short_MAX" (formula "1") (term "1,0,0,0,1,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,1,0,1,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,0,1,0,0,0,0"))
(rule "replace_char_MIN" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0,1,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0,1,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,1,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0"))
(rule "replace_long_RANGE" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "0,1,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,0,0,0"))
(rule "expand_inChar" (formula "1") (term "0,1,0,1,0,0,0,0,0"))
(rule "translateJavaCastChar" (formula "1") (term "0,0,1,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0"))
(rule "replace_char_MAX" (formula "1") (term "1,0,0,1,0,1,0,0,0,0,0"))
(rule "replace_char_MIN" (formula "1") (term "0,1,0,1,0,1,0,0,0,0,0"))
(rule "expand_inChar" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,1,0,0,0,0,0,0"))
(rule "translateJavaUnaryMinusLong" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0"))
(rule "replace_char_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inChar" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaSubLong" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_short_MAX" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0"))
(rule "translateJavaMulLong" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "replace_short_RANGE" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
(rule "replace_char_MIN" (formula "1") (term "0,1,0,0,0,1,0,0,0,0,0"))
(rule "replace_char_MAX" (formula "1") (term "1,0,0,0,0,1,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,1,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "expand_inInt" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "translateJavaDivLong" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "replace_char_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "replace_char_MIN" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "replace_char_MAX" (formula "1") (term "1,0,0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "eq_eq" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaAddLong" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "expand_inLong" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0"))
(rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "eq_and" (formula "1") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "all_unused" (formula "1") (term "1"))
(rule "concrete_and_3" (formula "1"))
(rule "all_unused" (formula "1") (term "1,0,0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0,0,0"))
(rule "all_unused" (formula "1") (term "1,0,0,0"))
(rule "eq_and_2" (formula "1") (term "0,0"))
(rule "eq_and_2" (formula "1") (term "0,0"))
(rule "all_unused" (formula "1") (term "1"))
(rule "concrete_and_3" (formula "1"))
(rule "all_unused" (formula "1") (term "1,0,0,0"))
(rule "all_unused" (formula "1") (term "1,0,0,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,0"))
(rule "eq_and" (formula "1") (term "0,0,0,0"))
(rule "all_unused" (formula "1") (term "0,1,0,0"))
(rule "eq_and_2" (formula "1") (term "0"))
(rule "all_unused" (formula "1") (term "1"))
(rule "eq_and_2" (formula "1"))
(rule "all_unused" (formula "1") (term "1,0"))
(rule "concrete_and_3" (formula "1") (term "0"))
(rule "all_unused" (formula "1") (term "1"))
(rule "concrete_and_3" (formula "1"))
(rule "allRight" (formula "1") (inst "sk=left_0"))
(rule "allRight" (formula "1") (inst "sk=right_0"))
(rule "closeTrue" (formula "1"))
)

}
