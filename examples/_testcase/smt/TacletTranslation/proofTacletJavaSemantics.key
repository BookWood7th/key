\problem{

//expand_inShort
\forall int i; 
  (inShort(i) <-> leq(i, short_MAX) & leq(short_MIN, i))


& //and

//replace_char_RANGE
char_RANGE = Z(6(3(5(5(6(#))))))


& //and

//replace_long_MIN
  long_MIN
= Z(neglit(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))))


& //and

//replace_char_MAX
char_MAX = Z(5(3(5(5(6(#))))))


& //and

//replace_int_MIN
int_MIN = Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))


& //and

//translateJavaBitwiseOrLong
\forall int left; 
  \forall int right; 
      javaBitwiseOrLong(left, right)
    = orJlong(left, right)


& //and

//expand_inLong
\forall int i; 
  (inLong(i) <-> leq(i, long_MAX) & leq(long_MIN, i))


& //and

//translateJavaShiftRightInt
\forall int left; 
  \forall int right; 
      javaShiftRightInt(left, right)
    = shiftrightJint(left, right)


& //and

//replace_int_MAX
int_MAX = Z(7(4(6(3(8(4(7(4(1(2(#)))))))))))


& //and

//translateJavaAddLong
\forall int left; 
  \forall int right; 
    javaAddLong(left, right) = addJlong(left, right)


& //and

//replace_int_HALFRANGE
int_HALFRANGE = Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))


& //and

//translateJavaSubLong
\forall int left; 
  \forall int right; 
    javaSubLong(left, right) = subJlong(left, right)


& //and

//translateJavaDivLong
\forall int left; 
  \forall int right; 
    javaDivLong(left, right) = divJlong(left, right)


& //and

//translateJavaDivInt
\forall int left; 
  \forall int right; 
    javaDivInt(left, right) = divJint(left, right)


& //and

//boolean_not_equal_1
!TRUE = FALSE


& //and

//boolean_not_equal_2
!FALSE = TRUE


& //and

//true_to_not_false
\forall boolean bo;  (bo = TRUE <-> !bo = FALSE)


& //and

//false_to_not_true
\forall boolean bo;  (bo = FALSE <-> !bo = TRUE)


& //and

//boolean_true_commute
\forall boolean bo;  (TRUE = bo <-> bo = TRUE)


& //and

//boolean_false_commute
\forall boolean bo;  (FALSE = bo <-> bo = FALSE)


& //and

//translateJavaBitwiseXOrLong
\forall int left; 
  \forall int right; 
      javaBitwiseXOrLong(left, right)
    = xorJlong(left, right)


& //and

//replace_short_MIN
short_MIN = Z(neglit(8(6(7(2(3(#)))))))


& //and

//boolean_equal_2
\forall boolean b1; 
  \forall boolean b2; 
    (b1 = TRUE <-> b2 = TRUE <-> b1 = b2)


& //and

//translateJavaUnsignedShiftRightInt
\forall int left; 
  \forall int right; 
      javaUnsignedShiftRightInt(left, right)
    = unsignedshiftrightJint(left, right)


& //and

//replace_long_HALFRANGE
  long_HALFRANGE
= Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))


& //and

//translateJavaUnaryMinusLong
\forall int left; 
  javaUnaryMinusLong(left) = unaryMinusJlong(left)


& //and

//translateJavaUnsignedShiftRightLong
\forall int left; 
  \forall int right; 
      javaUnsignedShiftRightLong(left, right)
    = unsignedshiftrightJlong(left, right)


& //and

//replace_byte_MAX
byte_MAX = Z(7(2(1(#))))


& //and

//translateJavaCastShort
\forall int left; 
  javaCastShort(left) = moduloShort(left)


& //and

//translateJavaBitwiseXOrInt
\forall int left; 
  \forall int right; 
      javaBitwiseXOrInt(left, right)
    = xorJint(left, right)


& //and

//replace_int_RANGE
int_RANGE = Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))


& //and

//translateJavaAddInt
\forall int left; 
  \forall int right; 
    javaAddInt(left, right) = addJint(left, right)


& //and

//translateJavaSubInt
\forall int left; 
  \forall int right; 
    javaSubInt(left, right) = subJint(left, right)


& //and

//translateJavaShiftLeftLong
\forall int left; 
  \forall int right; 
      javaShiftLeftLong(left, right)
    = shiftleftJlong(left, right)


& //and

//replace_short_HALFRANGE
short_HALFRANGE = Z(8(6(7(2(3(#))))))


& //and

//expand_inByte
\forall int i; 
  (inByte(i) <-> leq(i, byte_MAX) & leq(byte_MIN, i))


& //and

//translateJavaMod
\forall int left; 
  \forall int right; 
    javaMod(left, right) = jmod(left, right)


& //and

//translateJavaCastInt
\forall int left;  javaCastInt(left) = moduloInt(left)


& //and

//translateJavaBitwiseAndLong
\forall int left; 
  \forall int right; 
      javaBitwiseAndLong(left, right)
    = andJlong(left, right)


& //and

//translateJavaBitwiseOrInt
\forall int left; 
  \forall int right; 
    javaBitwiseOrInt(left, right) = orJint(left, right)


& //and

//translateJavaShiftRightLong
\forall int left; 
  \forall int right; 
      javaShiftRightLong(left, right)
    = shiftrightJlong(left, right)


& //and

//replace_char_MIN
char_MIN = Z(0(#))


& //and

//translateJavaCastChar
\forall int left; 
  javaCastChar(left) = moduloChar(left)


& //and

//translateJavaMulLong
\forall int left; 
  \forall int right; 
    javaMulLong(left, right) = mulJlong(left, right)


& //and

//translateJavaCastLong
\forall int left; 
  javaCastLong(left) = moduloLong(left)


& //and

//replace_byte_HALFRANGE
byte_HALFRANGE = Z(8(2(1(#))))


& //and

//replace_long_MAX
  long_MAX
= Z(7(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))


& //and

//translateJavaUnaryMinusInt
\forall int left; 
  javaUnaryMinusInt(left) = unaryMinusJint(left)


& //and

//replace_byte_RANGE
byte_RANGE = Z(6(5(2(#))))


& //and

//translateJavaBitwiseAndInt
\forall int left; 
  \forall int right; 
      javaBitwiseAndInt(left, right)
    = andJint(left, right)


& //and

//replace_byte_MIN
byte_MIN = Z(neglit(8(2(1(#)))))


& //and

//replace_short_RANGE
short_RANGE = Z(6(3(5(5(6(#))))))


& //and

//expand_inChar
\forall int i; 
  (inChar(i) <-> leq(i, char_MAX) & leq(char_MIN, i))


& //and

//replace_long_RANGE
  long_RANGE
= Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))


& //and

//translateJavaShiftLeftInt
\forall int left; 
  \forall int right; 
      javaShiftLeftInt(left, right)
    = shiftleftJint(left, right)


& //and

//expand_inInt
\forall int i; 
  (inInt(i) <-> leq(i, int_MAX) & leq(int_MIN, i))


& //and

//translateJavaMulInt
\forall int left; 
  \forall int right; 
    javaMulInt(left, right) = mulJint(left, right)


& //and

//translateJavaCastByte
\forall int left; 
  javaCastByte(left) = moduloByte(left)


& //and

//translateJavaBitwiseNegation
\forall int left; 
  javaBitwiseNegation(left) = sub(neg(left), Z(1(#)))


& //and

//replace_short_MAX
short_MAX = Z(7(6(7(2(3(#))))))
}