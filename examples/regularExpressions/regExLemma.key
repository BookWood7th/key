\rules {



  repeatRepeatContraction {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes1, nTimes2;

     \find (repeat(repeat(rexp, nTimes1), nTimes2))
     \replacewith (
         \if (nTimes1 >= 0 & nTimes2 >= 0) 
         \then ( repeat(rexp, nTimes1 * nTimes2) )
         \else ( repeat(repeat(rexp, nTimes1), nTimes2) )
     )
     \heuristics (concrete)
  };

  concatRepeatContraction1 {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes1, nTimes2;


     \find (regExConcat(repeat(rexp, nTimes1), repeat(rexp, nTimes1)))
     \replacewith (
         \if (nTimes1 >= 0 & nTimes2 >= 0) 
         \then ( repeat(rexp, nTimes1 + nTimes2) )
         \else ( regExConcat(repeat(rexp, nTimes1), repeat(rexp, nTimes1)) )
     )
     \heuristics (concrete)
  };

  concatRepeatContraction2 {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;

     \find (regExConcat(repeat(rexp, nTimes), rexp))
     \replacewith (
         \if (nTimes >= 0) 
         \then ( repeat(rexp, nTimes + 1) )
         \else ( regExConcat(repeat(rexp, nTimes), rexp) )
     )
     \heuristics (concrete)
  };

  concatRepeatContraction2Sym {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;


     \find (regExConcat(rexp, repeat(rexp, nTimes)))
     \replacewith (
         \if (nTimes >= 0) 
         \then ( repeat(rexp, nTimes + 1) )
         \else ( regExConcat(rexp, repeat(rexp, nTimes)) )
     )
     \heuristics (concrete)
  };

  concatRepeatContraction3 {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;


     \find (regExConcat(repeat(rexp, nTimes), regEx(empty)))
     \replacewith (
         repeat(rexp, nTimes)
     )
     \heuristics (concrete)
  };

  concatRepeatContraction3Sym {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;

     \find (regExConcat(regEx(empty), repeat(rexp, nTimes)))
     \replacewith (
         repeat(rexp, nTimes)
     )
     \heuristics (concrete)
  };


}