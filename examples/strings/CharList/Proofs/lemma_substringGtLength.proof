\settings {
"#Proof-Settings-Config-File
#Sun Apr 05 16:33:26 CEST 2009
[DecisionProcedure]SmtBenchmarkArchiving=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[Model]Source=1
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , throughout-throughout\:toutOn , assertions-assertions\:on , programRules-programRules\:Java , intRules-intRules\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=false
[DecisionProcedureForTest]=Cogent
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]=SIMPLIFY
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[Libraries]Default=acc.key-false, stringRules.key-false, deprecatedRules.key-false
[DecisionProcedure]SmtZipProblemDir=false
[General]StupidMode=true
[General]UseJML=false
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[DecisionProcedure]SmtUseQuantifiers=true
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=1000
[View]MaxTooltipLines=40
[General]SoundNotification=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , throughout-throughout\:toutOn-throughout\:toutOff , assertions-assertions\:on-assertions\:off-assertions\:safe , programRules-programRules\:Java-programRules\:ODL , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff-javacard\:jcOn
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
"
}


\functions {
\nonRigid int j_113;
\nonRigid CharList l_112;
\nonRigid int i_87;
\nonRigid int i_60;
\nonRigid int i_114;
\nonRigid CharList l_85;
\nonRigid CharList l_59;
\nonRigid int j_86;
}

\problem {
  substring(i_114, j_113, l_112)
= \if (j_113 >= length(l_112))
      \then (substring(i_114, length(l_112), l_112))
      \else (substring(i_114, j_113, l_112))

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "fb65e9b19068cfc132748bf3c241b00bc338cee3"))

(autoModeTime "7184")

(branch "dummy ID"
(rule "cl_induct" (inst "phi=\\forall int i; 
  \\forall int j; 
    (   j >= length(lv)
     ->   substring(i, j, lv)
        = substring(i, length(lv), lv))") (inst "lv=lv") (inst "cv=cv") (userinteraction))
(branch " Base Case"
   (rule "allRight" (formula "1") (inst "sk=i_0") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=j_0") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "cl_lengthEmpty" (formula "1") (term "1") (userinteraction))
   (rule "cl_substringEmpty" (formula "2") (term "0") (userinteraction))
   (rule "cl_substringEmpty" (formula "2") (term "1") (userinteraction))
   (rule "eqClose" (formula "2") (userinteraction))
   (rule "closeTrue" (formula "2") (userinteraction))
)
(branch " Step Case"
   (rule "allRight" (formula "1") (inst "sk=lv_0") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=cv_0") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "allRight" (formula "3") (inst "sk=i_1") (userinteraction))
   (rule "allRight" (formula "3") (inst "sk=j_1") (userinteraction))
   (rule "impRight" (formula "3") (userinteraction))
   (rule "cl_lengthCons" (formula "1") (term "1") (userinteraction))
   (rule "hide_right" (formula "5") (userinteraction))
   (rule "cl_lengthCons" (formula "4") (term "1,1") (userinteraction))
   (rule "cl_substringI" (formula "4") (term "1") (userinteraction))
   (rule "ifthenelse_split" (formula "4") (term "1") (userinteraction))
   (branch " i_1 >  0 TRUE"
      (rule "cl_substringI" (formula "5") (term "0") (userinteraction))
      (rule "ifthenelse_split" (formula "5") (term "0") (userinteraction))
      (branch " i_1 >  0 TRUE"
         (rule "instAll" (formula "5") (term "0,0") (ifseqformula "4") (userinteraction))
         (rule "instAll" (formula "6") (term "1,0") (ifseqformula "1") (userinteraction))
         (rule "impLeft" (formula "1") (userinteraction))
         (branch " Case 1"
            (rule "inChar" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "1") (term "0,1,1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "0"))
            (rule "mul_literals" (formula "5") (term "1,0"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "1,1"))
            (rule "mul_literals" (formula "6") (term "1,1,1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "1,0"))
            (rule "add_zero_right" (formula "6") (term "1,0"))
            (rule "inEqSimp_geqRight" (formula "5"))
            (rule "inEqSimp_gtToGeq" (formula "3"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "1"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "1,1,0"))
            (rule "times_zero_1" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
         (branch " Case 2"
            (rule "inChar" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "2") (term "0,0,1,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "2") (term "0,1,1,0"))
            (rule "mul_literals" (formula "2") (term "1,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "1,0"))
            (rule "add_zero_right" (formula "6") (term "1,0"))
            (rule "close" (formula "6") (ifseqformula "1"))
         )
      )
      (branch " i_1 >  0 FALSE"
         (rule "close" (formula "5") (ifseqformula "1") (userinteraction))
      )
   )
   (branch " i_1 >  0 FALSE"
      (rule "lemma_lengthGEq0" (inst "l=lv_0") (userinteraction))
      (rule "inChar" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "inEqSimp_gtRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "1"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
      (rule "times_zero_1" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "nnf_imp2or" (formula "5") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
      (rule "lemma_substringLt" (formula "6") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "ifthenelse_split" (formula "6") (term "0"))
      (branch " j_1 <= -1 + i_1 TRUE"
         (rule "eqSymm" (formula "7"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
         (rule "mul_literals" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_and_2" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch " j_1 <= -1 + i_1 FALSE"
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "lemma_length0" (newnames "L_0"))
         (rule "eqClose" (formula "1") (term "1") (matchconstraint "L_0=empty"))
         (rule "concrete_impl_4" (formula "1") (matchconstraint "L_0=empty"))
         (rule "true_left" (formula "1") (matchconstraint "L_0=empty"))
         (rule "cut_direct" (formula "1") (term "1"))
         (branch " CUT: L_0 = empty TRUE"
            (rule "concrete_impl_4" (formula "2"))
            (rule "eqClose" (formula "1") (matchconstraint "L_0=empty"))
            (rule "true_left" (formula "2"))
            (rule "cl_charAtHead" (newnames "I_0"))
            (rule "lemma_lengthGEq0" (newnames "L_1"))
            (rule "lemma_lengthNEq" (newnames "L1_0,L2_0"))
            (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
            (rule "eqClose" (formula "2") (term "0,1") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
            (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
            (rule "eqClose" (formula "2") (term "0,0") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "2") (term "1") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_impl_2" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "2") (term "0") (matchconstraint "L2_0=L1_0"))
            (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "eq_imp" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "eqSymm" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
            (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_impl_2" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "eqSymm" (formula "1") (term "0,1"))
            (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
            (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "1") (term "1") (matchconstraint "L2_0=L1_0"))
            (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
            (rule "eq_imp" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
            (rule "cut_direct" (formula "1") (term "0,1"))
            (branch " CUT: L2_0 = L1_0 TRUE"
               (rule "concrete_not_1" (formula "2") (term "1"))
               (rule "eqClose" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_impl_3" (formula "3"))
               (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "2") (term "0,0") (matchconstraint "L2_0=L1_0"))
               (rule "double_not" (formula "3"))
               (rule "double_not" (formula "2") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "3") (matchconstraint "L2_0=L1_0"))
               (rule "true_left" (formula "2") (matchconstraint "L2_0=L1_0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=substring(i_1, j_1, cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
               (rule "eqClose" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "cl_substringI" (formula "11") (term "1"))
               (rule "close" (formula "11") (matchconstraint "L1_0=\if (0 >  0)
    \then (substring(0 - 1, 1 + length(lv_0) - 1, lv_0))
    \else (substring(0,
                     1 + length(lv_0),
                     cons(cv_0, lv_0)))") (matchconstraint "L2_0=substring(i_1, j_1, cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "greater_literals" (formula "11") (term "0,1"))
               (rule "ifthenelse_false" (formula "11") (term "1"))
               (rule "close" (formula "11") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=substring(i_1, j_1, cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "lemma_substringLt" (formula "10") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,0,0"))
               (rule "ifthenelse_to_or_right" (formula "10") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0"))
               (rule "distr_forallAnd" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or_2" (formula "11") (term "0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0"))
               (rule "cl_substringI" (formula "12") (term "0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (i_1 >  0)
    \then (substring(i_1 - 1, j_1 - 1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "inEqSimp_gtToGeq" (formula "12") (term "0,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + -1 * 0 + i_1 >= 0)
    \then (substring(i_1 - 1, j_1 - 1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + 0 + i_1 >= 0)
    \then (substring(i_1 - 1, j_1 - 1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 - 1, j_1 - 1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 - 1, j_1 + 1 * -1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "mul_literals" (formula "12") (term "1,1,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 - 1, j_1 + -1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "polySimp_elimSub" (formula "12") (term "0,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 + 1 * -1, j_1 + -1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "mul_literals" (formula "12") (term "1,0,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 + -1, j_1 + -1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(i_1 + -1, -1 + j_1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (-1 + i_1 >= 0)
    \then (substring(-1 + i_1, -1 + j_1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (i_1 >= -1 * -1)
    \then (substring(-1 + i_1, -1 + j_1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "mul_literals" (formula "12") (term "1,0,0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (i_1 >= 1)
    \then (substring(-1 + i_1, -1 + j_1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "0,0") (ifseqformula "6"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (0 >= 1 & i_1 >= 1)
    \then (substring(-1 + i_1, -1 + j_1, lv_0))
    \else (substring(0, j_1, cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "qeq_literals" (formula "12") (term "0,0,0"))
               (rule "concrete_and_2" (formula "12") (term "0,0"))
               (rule "ifthenelse_false" (formula "12") (term "0"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (matchconstraint "L2_0=substring(0, j_1, cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "eqSymm" (formula "12"))
               (rule "close" (formula "12") (matchconstraint "L1_0=substring(0, j_1, cons(cv_0, lv_0))") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "lemma_substringLt" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "11") (term "1,0,0"))
               (rule "eqSymm" (formula "11") (term "1,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "11") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "11") (term "0,0"))
               (rule "distr_forallAnd" (formula "11") (term "0"))
               (rule "distr_forallAnd" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "12") (term "0,0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0"))
               (rule "commute_or_2" (formula "11") (term "0,0,0"))
               (rule "lemma_substringLt" (formula "10") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "1,0,0"))
               (rule "eqClose" (formula "10") (term "1,0,1,0,0"))
               (rule "concrete_or_3" (formula "10") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "10") (term "1,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "cl_substringI" (formula "13") (term "0"))
               (rule "close" (formula "13") (matchconstraint "L1_0=substring(0, j_1, cons(cv_0, lv_0))") (matchconstraint "L2_0=\if (0 >  0)
    \then (substring(0 - 1, 1 + length(lv_0) - 1, lv_0))
    \else (substring(0,
                     1 + length(lv_0),
                     cons(cv_0, lv_0)))") (ifseqformula "1"))
               (rule "greater_literals" (formula "13") (term "0,0"))
               (rule "ifthenelse_false" (formula "13") (term "0"))
               (rule "close" (formula "13") (matchconstraint "L1_0=substring(0, j_1, cons(cv_0, lv_0))") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "cl_substring0" (formula "13") (term "1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (j_1 >  0)
    \then (cons(cv_0, substring(0, j_1 - 1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "inEqSimp_gtToGeq" (formula "13") (term "0,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + -1 * 0 + j_1 >= 0)
    \then (cons(cv_0, substring(0, j_1 - 1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + 0 + j_1 >= 0)
    \then (cons(cv_0, substring(0, j_1 - 1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + j_1 >= 0)
    \then (cons(cv_0, substring(0, j_1 - 1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "polySimp_elimSub" (formula "13") (term "1,1,1,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + j_1 >= 0)
    \then (cons(cv_0, substring(0, j_1 + 1 * -1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + j_1 >= 0)
    \then (cons(cv_0, substring(0, j_1 + -1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "13") (term "1,1,1,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (-1 + j_1 >= 0)
    \then (cons(cv_0, substring(0, -1 + j_1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (j_1 >= -1 * -1)
    \then (cons(cv_0, substring(0, -1 + j_1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "mul_literals" (formula "13") (term "1,0,1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=\if (j_1 >= 1)
    \then (cons(cv_0, substring(0, -1 + j_1, lv_0)))
    \else (empty)") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "7"))
               (rule "ifthenelse_true" (formula "13") (term "1"))
               (rule "close" (formula "13") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=substring(0, 1 + length(lv_0), cons(cv_0, lv_0))") (ifseqformula "1"))
               (rule "allLeft" (formula "12") (inst "t=0"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
               (rule "concrete_and_2" (formula "12") (term "0,0,0,0"))
               (rule "concrete_or_2" (formula "12") (term "0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "allLeft" (formula "12") (inst "t=-1 + j_1"))
               (rule "eqSymm" (formula "12") (term "1"))
               (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0"))
               (rule "inEqSimp_invertInEq1" (formula "12") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
               (rule "times_zero_2" (formula "12") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "12") (term "0,0,0"))
               (rule "concrete_and_2" (formula "12") (term "0,0"))
               (rule "concrete_or_2" (formula "12") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0"))
               (rule "leq_literals" (formula "12") (term "0,0"))
               (rule "concrete_and_2" (formula "12") (term "0"))
               (rule "concrete_or_2" (formula "12"))
               (rule "applyEqRigid" (formula "13") (term "1,1,0") (ifseqformula "12"))
               (rule "lemma_substringLt" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,0,0"))
               (rule "ifthenelse_to_or_right" (formula "14") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "14") (term "0,0"))
               (rule "distr_forallAnd" (formula "14") (term "0"))
               (rule "distr_forallAnd" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "commute_or_2" (formula "15") (term "0,0"))
               (rule "shift_paren_or" (formula "14") (term "0,0"))
               (rule "commute_or_2" (formula "14") (term "0,0,0"))
               (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
               (rule "inEqSimp_or_tautInEq2" (formula "14") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,1,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "1,0,1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "0,1,0,0,0,0,0"))
               (rule "leq_literals" (formula "14") (term "1,0,0,0,0,0"))
               (rule "concrete_or_3" (formula "14") (term "0,0,0,0,0"))
               (rule "concrete_or_1" (formula "14") (term "0,0,0,0"))
               (rule "concrete_or_1" (formula "14") (term "0,0,0"))
               (rule "concrete_or_1" (formula "14") (term "0,0"))
               (rule "shift_paren_or" (formula "15") (term "0,0,0"))
               (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
               (rule "eq_or" (formula "15") (term "0,0,0,0,0"))
               (rule "all_unused" (formula "14") (term "0"))
               (rule "all_unused" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "allLeft" (formula "14") (inst "t=0"))
               (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "14") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "12"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "14") (term "0,0,0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0,0,0"))
               (rule "concrete_or_2" (formula "14") (term "0,0,0"))
               (rule "commute_or" (formula "14") (term "0,0"))
               (rule "lemma_substringLt" (formula "11") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,0,0"))
               (rule "ifthenelse_to_or_left" (formula "11") (term "1,0,0,0,0"))
               (rule "eqClose" (formula "11") (term "1,0,1,0,0,0,0"))
               (rule "concrete_or_3" (formula "11") (term "0,1,0,0,0,0"))
               (rule "concrete_and_1" (formula "11") (term "1,0,0,0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
               (rule "eq_or" (formula "11") (term "0,0,0,0,0"))
               (rule "lemma_substringLt" (formula "10") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "1,0,0"))
               (rule "eqClose" (formula "10") (term "1,0,1,0,0"))
               (rule "concrete_or_3" (formula "10") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "10") (term "1,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "eq_or_2" (formula "10") (term "0,0,0"))
               (rule "cl_substring0" (formula "15") (term "0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (1 + length(lv_0) >  0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "inEqSimp_gtToGeq" (formula "15") (term "0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (-1 + -1 * 0 + (1 + length(lv_0)) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (-1 + 0 + (1 + length(lv_0)) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (-1 + (1 + length(lv_0)) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (-1 + 1 + length(lv_0) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "add_literals" (formula "15") (term "0,0,0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (0 + length(lv_0) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "add_zero_left" (formula "15") (term "0,0,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=\if (length(lv_0) >= 0)
    \then (cons(cv_0,
                substring(0,
                          1 + length(lv_0) - 1,
                          lv_0)))
    \else (empty)") (ifseqformula "1"))
               (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "8"))
               (rule "ifthenelse_true" (formula "15") (term "0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0, substring(0, 1 + length(lv_0) - 1, lv_0))") (ifseqformula "1"))
               (rule "polySimp_elimSub" (formula "15") (term "1,1,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0,
     substring(0, 1 + length(lv_0) + 1 * -1, lv_0))") (ifseqformula "1"))
               (rule "mul_literals" (formula "15") (term "1,1,1,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0, substring(0, 1 + length(lv_0) + -1, lv_0))") (ifseqformula "1"))
               (rule "polySimp_addComm1" (formula "15") (term "1,1,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0, substring(0, 1 + -1 + length(lv_0), lv_0))") (ifseqformula "1"))
               (rule "add_literals" (formula "15") (term "0,1,1,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0, substring(0, 0 + length(lv_0), lv_0))") (ifseqformula "1"))
               (rule "add_zero_left" (formula "15") (term "1,1,0"))
               (rule "close" (formula "15") (matchconstraint "L1_0=cons(cv_0, substring(0, -1 + j_1, lv_0))") (matchconstraint "L2_0=cons(cv_0, substring(0, length(lv_0), lv_0))") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "15") (term "1,0") (ifseqformula "12"))
               (rule "eqClose" (formula "15"))
               (rule "closeTrue" (formula "15"))
            )
            (branch " CUT: L2_0 = L1_0 FALSE"
               (rule "concrete_not_2" (formula "1") (term "1"))
               (rule "eqClose" (formula "11") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_impl_4" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "closeTrue" (formula "10") (matchconstraint "L2_0=L1_0"))
               (rule "close" (formula "11") (matchconstraint "L1_0=empty") (matchconstraint "L_0=L2_0") (ifseqformula "3"))
               (rule "cl_substringI" (formula "12") (term "1"))
               (rule "greater_literals" (formula "12") (term "0,1"))
               (rule "ifthenelse_false" (formula "12") (term "1"))
               (rule "lemma_substringLt" (formula "9") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,0,0"))
               (rule "ifthenelse_to_or_right" (formula "9") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "9") (term "0,0"))
               (rule "distr_forallAnd" (formula "9") (term "0"))
               (rule "distr_forallAnd" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "commute_or_2" (formula "10") (term "0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0"))
               (rule "commute_or" (formula "9") (term "0,0,0"))
               (rule "lemma_substringLt" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
               (rule "leq_literals" (formula "13") (term "0,0,0"))
               (rule "concrete_and_2" (formula "13") (term "0,0"))
               (rule "ifthenelse_false" (formula "13") (term "0"))
               (rule "cl_substringI" (formula "13") (term "1"))
               (rule "greater_literals" (formula "13") (term "0,1"))
               (rule "ifthenelse_false" (formula "13") (term "1"))
               (rule "lemma_substringLt" (formula "10") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "1,0,0"))
               (rule "eqSymm" (formula "10") (term "1,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "10") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0"))
               (rule "distr_forallAnd" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or_2" (formula "11") (term "0,0"))
               (rule "commute_or" (formula "11") (term "0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0"))
               (rule "lemma_substringLt" (formula "9") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "9") (term "1,0,0"))
               (rule "eqClose" (formula "9") (term "1,0,1,0,0"))
               (rule "concrete_or_3" (formula "9") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "9") (term "1,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0"))
               (rule "lemma_substringLt" (formula "14") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "leq_literals" (formula "14") (term "0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0"))
               (rule "ifthenelse_false" (formula "14") (term "0"))
               (rule "cl_substringI" (formula "14") (term "1"))
               (rule "greater_literals" (formula "14") (term "0,1"))
               (rule "ifthenelse_false" (formula "14") (term "1"))
               (rule "lemma_substringLt" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "11") (term "1,0,0"))
               (rule "eqSymm" (formula "11") (term "1,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "11") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "11") (term "0,0"))
               (rule "distr_forallAnd" (formula "11") (term "0"))
               (rule "distr_forallAnd" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0"))
               (rule "commute_or_2" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,0"))
               (rule "add_literals" (formula "11") (term "1,0,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0,0"))
               (rule "leq_literals" (formula "11") (term "1,0,0"))
               (rule "concrete_or_3" (formula "11") (term "0,0"))
               (rule "shift_paren_or" (formula "12") (term "0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0,0,0"))
               (rule "eq_or_2" (formula "12") (term "0,0,0"))
               (rule "all_unused" (formula "11"))
               (rule "all_unused" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "lemma_substringLt" (formula "10") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "1,0,0,0,0"))
               (rule "eqClose" (formula "10") (term "1,0,1,0,0,0,0"))
               (rule "concrete_or_3" (formula "10") (term "0,1,0,0,0,0"))
               (rule "concrete_and_1" (formula "10") (term "1,0,0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
               (rule "eq_or" (formula "10") (term "0,0,0,0,0"))
               (rule "lemma_substringLt" (formula "9") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "9") (term "1,0,0"))
               (rule "eqClose" (formula "9") (term "1,0,1,0,0"))
               (rule "concrete_or_3" (formula "9") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "9") (term "1,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0"))
               (rule "eq_or_2" (formula "9") (term "0,0,0"))
               (rule "cl_substringI" (formula "14") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "14") (term "0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0"))
               (rule "mul_literals" (formula "14") (term "1,1,1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0"))
               (rule "inEqSimp_contradInEq0" (formula "14") (term "0,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "14") (term "0,0,0"))
               (rule "concrete_and_2" (formula "14") (term "0,0"))
               (rule "ifthenelse_false" (formula "14") (term "0"))
               (rule "eqSymm" (formula "14"))
               (rule "lemma_substringLt" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "11") (term "1,0,0"))
               (rule "eqSymm" (formula "11") (term "1,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "11") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "11") (term "0,0"))
               (rule "distr_forallAnd" (formula "11") (term "0"))
               (rule "distr_forallAnd" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0"))
               (rule "commute_or_2" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,0"))
               (rule "add_literals" (formula "11") (term "1,0,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0,0"))
               (rule "leq_literals" (formula "11") (term "1,0,0"))
               (rule "concrete_or_3" (formula "11") (term "0,0"))
               (rule "shift_paren_or" (formula "12") (term "0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0,0,0"))
               (rule "eq_or_2" (formula "12") (term "0,0,0"))
               (rule "all_unused" (formula "11"))
               (rule "all_unused" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "lemma_substringLt" (formula "10") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "1,0,0,0,0"))
               (rule "eqClose" (formula "10") (term "1,0,1,0,0,0,0"))
               (rule "concrete_or_3" (formula "10") (term "0,1,0,0,0,0"))
               (rule "concrete_and_1" (formula "10") (term "1,0,0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
               (rule "eq_or" (formula "10") (term "0,0,0,0,0"))
               (rule "lemma_substringLt" (formula "9") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "9") (term "1,0,0"))
               (rule "eqClose" (formula "9") (term "1,0,1,0,0"))
               (rule "concrete_or_3" (formula "9") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "9") (term "1,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0"))
               (rule "eq_or_2" (formula "9") (term "0,0,0"))
               (rule "cl_substringI" (formula "14") (term "0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
               (rule "ifthenelse_false" (formula "14") (term "0"))
               (rule "lemma_substringLt" (formula "14") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,1"))
               (rule "add_literals" (formula "14") (term "0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1"))
               (rule "mul_literals" (formula "14") (term "1,0,1"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "14") (term "0,0,1"))
               (rule "concrete_and_2" (formula "14") (term "0,1"))
               (rule "ifthenelse_false" (formula "14") (term "1"))
               (rule "lemma_substringLt" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0"))
               (rule "ifthenelse_to_or_left" (formula "11") (term "1,0,0"))
               (rule "eqSymm" (formula "11") (term "1,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,1,0,0"))
            )
         )
         (branch " CUT: L_0 = empty FALSE"
            (rule "concrete_impl_3" (formula "1"))
            (rule "eqClose" (formula "8") (matchconstraint "L_0=empty"))
            (rule "closeTrue" (formula "8") (matchconstraint "L_0=empty"))
         )
      )
   )
)
(branch " Use Case"
   (rule "ifthenelse_split" (formula "2") (term "1") (userinteraction))
   (branch " j_113 >= length(l_112) TRUE"
      (rule "instAll" (formula "3") (term "2,0") (ifseqformula "2") (userinteraction))
      (rule "instAll" (formula "4") (term "0,0") (ifseqformula "1") (userinteraction))
      (rule "instAll" (formula "5") (term "1,0") (ifseqformula "1") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch " Case 1"
         (rule "closeAntec" (formula "3") (ifseqformula "5") (userinteraction))
      )
      (branch " Case 2"
         (rule "closeAntec" (formula "1") (ifseqformula "6") (userinteraction))
      )
   )
   (branch " j_113 >= length(l_112) FALSE"
      (rule "eqClose" (formula "3") (userinteraction))
      (rule "closeTrue" (formula "3") (userinteraction))
   )
)
)

}
