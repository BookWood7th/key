\sorts {
  CharList;
}

\functions {
  CharList empty;
  CharList cons (jchar, CharList);
  jchar head (CharList);
  jchar charAt (int, CharList);
  int length (CharList);
  int indexOf (jchar, int, CharList);
  CharList substring (int, int, CharList);
  CharList concat (CharList,CharList);
  int indexOfStr (CharList,int,CharList);
  int lastIndexOf (jchar,int,CharList);
  int lastIndexOfStr (CharList,int,CharList);
  CharList replace (jchar,jchar,CharList);
}

\predicates {
  startsWith (CharList,CharList);
  endsWith (CharList,CharList);
  contains (CharList,CharList);
}

\rules {

  /***********************************
   * Axiomatization of the functions *
   ***********************************/
  /*
   * int length(CharList)
   */
  cl_lengthEmpty {
    \find (length(empty))
    \replacewith (0)
    \heuristics (userTaclets3)
  };

  cl_lengthCons {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \find (length(cons(c,l)))
    \replacewith (length(l)+1)
    \heuristics (userTaclets3)
  };

  /*
   * jchar head(CharList)
   * the first character in the list.
   * head(empty) is unspecified
   */
  cl_headCons {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \find (head(cons(c,l)))
    \replacewith (c)
    \heuristics (userTaclets3)
  };

  /*cl_headEmpty {
    \find (head(empty))
    \replacewith(0)
    \heuristics (userTaclets3)
  };*/

  /*
   * int charAt (int,CharList)
   * an index < 0 will be mapped to 0
   * ( to force charAt(i,l)=head(substring(i,length(l),l)) )
   * charAt (i,empty) is unspecified and therefore also charAt(i,l)
   * when i >= length(l)
   */
  cl_charAt0 {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \find (charAt(0,cons(c,l)))
    \replacewith (c)
    \heuristics (userTaclets1)
  };

  cl_charAtI {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \schemaVar \term int i;
    \find (charAt(i,cons(c,l)))
    \replacewith (\if (i>0) \then (charAt(i-1,l)) 
		            \else (charAt(0,cons(c,l))))
    \heuristics (userTaclets1)
  };

  /*cl_charAtEmpty {
    \schemaVar \term CharList l;
    \schemaVar \term int i;
    \find (charAt(i,empty))
    \replacewith (0)
    \heuristics (userTaclets3)
  };*/

  /*
   * charAt(i,empty)=head(empty)
   */
  cl_charAtHead {
    \schemaVar \term int i;
    \add (charAt(i,empty) = head(empty) ==> )
    \heuristics (userTaclets2)
  };

  /*
   * = (CharList,CharList)
   * the equality predicate
   */
  cl_equalFalse1 {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \find (empty = cons(c,l))
    \replacewith (false)
    \heuristics (userTaclets3)
  };

  cl_equalFalse2 {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \find (cons(c,l) = empty)
    \replacewith (false)
    \heuristics (userTaclets3)
  };

  cl_equalReduce {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term jchar c;
    \find (cons(c,l1) = cons(c,l2))
    \replacewith (l1 = l2)
    \heuristics (userTaclets3)
  };

  cl_equalFalse {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term jchar c1, c2;
    \assumes (c1 != c2 ==> )
    \find (cons(c1,l1) = cons(c2,l2))
    \replacewith (false)
    \heuristics (userTaclets3)
  };

  /*
   * structural induction over all CharLists
   */
  cl_induct {
    \schemaVar \variables CharList lv;
    \schemaVar \variables jchar cv;
    \schemaVar \formula phi;
    \varcond ( \notFreeIn(cv,phi)  )
    "Base Case": \add ( ==> {\subst lv; empty}(phi) );
    "Step Case": \add ( ==> \forall lv; \forall cv;
                              ((inChar(cv) & phi) -> {\subst lv; cons(cv,lv)}phi) );
    "Use Case":  \add ( \forall lv; (phi) ==> )
    \heuristics (userTaclets2)
  };

  /*
   * jchar indexOf (jchar,int,CharList)
   */
  cl_indexOf {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (indexOf (c,i,l))
    \varcond ( \notFreeIn(iv,l), \notFreeIn(iv,c), \notFreeIn(iv,i) )
    \replacewith ( \ifEx iv; ( iv >= 0 & iv >= i & iv < length(l) & charAt(iv,l) = c )
                     \then (iv)
                     \else (-1) )
    \heuristics (userTaclets2)
  };

  /*
   * CharList substring(int,int,CharList)
   * from start index to end index
   */
  cl_substring0 {
    \schemaVar \term CharList l;
    \schemaVar \term int i;
    \schemaVar \term jchar c;
    \find ( substring (0,i,cons(c,l)) )
    \replacewith ( \if (i>0) \then (cons(c,substring(0,i-1,l)))
    		       	     \else (empty) )
    \heuristics (userTaclets1)
  };

  cl_substringI {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \schemaVar \term int i,j;
    \find ( substring (i,j,cons(c,l)) )
    \replacewith ( \if (i>0) \then (substring(i-1,j-1,l))
    		       	     \else (substring(0,j,cons(c,l))) )
    \heuristics (userTaclets1)
  };

  cl_substringEmpty {
    \schemaVar \term int i,j;
    \find ( substring(i,j,empty) )
    \replacewith ( empty )
    \heuristics (userTaclets1)
  };

  /*
   * endsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a suffix of the second one
   */
  cl_endsWith {
    \schemaVar \term CharList l1, l2;
    \find (endsWith(l1,l2))
    \replacewith ( substring(length(l2)-length(l1),length(l2),l2) = l1 )
    \heuristics (userTaclets3)
  };

  /*
   * startsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a prefix of the second one
   */
  cl_startsWith {
    \schemaVar \term CharList l1,l2;
    \find(startsWith(l1,l2))
    \replacewith ( substring(0,length(l1),l2) = l1 )
    \heuristics (userTaclets3)
  };

  /*
   * CharList concat (CharList,CharList)
   * concatenate the two lists
   */
  cl_concatEmpty1 {
    \schemaVar \term CharList l;
    \find (concat(empty,l))
    \replacewith (l)
    \heuristics (userTaclets3)
  };

  cl_concatEmpty2 {
    \schemaVar \term CharList l;
    \find (concat(l,empty))
    \replacewith (l)
    \heuristics (userTaclets3)
  };

  cl_concatCons {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term jchar c;
    \find (concat(cons(c,l1),l2))
    \replacewith (cons(c,concat(l1,l2)))
    \heuristics (userTaclets2)
  };

  /*
   * contains (CharList,CharList)
   * predicate indicating whether the first list
   * is contained in the second
   */
  cl_contains {
    \schemaVar \term CharList l1, l2;
    \schemaVar \variables int iv;
    \find (contains(l1,l2))
    \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,l2) )
    \replacewith ( \exists iv; (substring(iv,iv+length(l1),l2) = l1) )
    \heuristics (userTaclets2)
  };

  /*
   * int indexOfStr (CharList,int,CharList)
   */
  cl_indexOfStr {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (indexOfStr(l1,i,l2))
    \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,l2), \notFreeIn (iv,i) )
    \replacewith ( \ifEx iv; (iv >= i
			      & (substring(iv,iv+length(l1),l2) = l1))
                   \then (iv)
                   \else (-1) )
    \heuristics (userTaclets2)
  };

  /*
   * int lastIndexOf (jchar,int,CharList)
   */
  cl_lastIndexOf {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (lastIndexOf (c,i,l))
    \varcond ( \notFreeIn (iv,c), \notFreeIn (iv,i), \notFreeIn (iv,l) )
    /* minimizing iv will maximize -iv */
    \replacewith ( \ifEx iv; (-iv >= i
			      & charAt(-iv,l) = c)
                   \then (iv)
                   \else (-1) )
    \heuristics (userTaclets2)
  };

  /*
   * int lastIndexOfStr (CharList,int,CharList)
   */
  cl_lastIndexOfStr {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (lastIndexOfStr (l1,i,l2))
    \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,i), \notFreeIn (iv,l2) )
    /* minimizing iv will maximize -iv */
    \replacewith ( \ifEx iv; (-iv >= i
			      & (substring(-iv,length(l1)-iv,l2) = l1))
                   \then (iv)
                   \else (-1) )
    \heuristics (userTaclets2)
  };

  /*
   * CharList replace (jchar,jchar,CharList)
   * replace all occurences of first character
   * against the second character
   */
  cl_replaceEmpty {
    \schemaVar \term jchar c1, c2;
    \find (replace(c1,c2,empty))
    \replacewith (empty)
    \heuristics (userTaclets3)
  };

  cl_replaceCons {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c, c1, c2;
    \find (replace(c1,c2,cons(c,l)))
    \replacewith ( \if (c=c1) \then (cons(c2,replace(c1,c2,l)))
                              \else (cons(c,replace(c1,c2,l))) )
    \heuristics (userTaclets1)
  };

}

