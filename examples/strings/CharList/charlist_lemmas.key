\rules {
       /**********
       /* Lemmas *
       /**********/

       /*
        * The length of every CharList is at least 0
	*/
       lemma_lengthGEq0 {
           \schemaVar \term CharList l;
	   \add (length(l) >= 0 ==> )
	   \heuristics (userTaclets2)
       };

       /*
        * The substring with startIndex=endIndex is empty
	*/
       lemma_substringII {
           \schemaVar \term CharList l;
	   \schemaVar \term int i;
	   \find (substring(i,i,l))
	   \replacewith (empty)
	   \heuristics (userTaclets3)
       };

       /*
        * With endIndex<startIndex the substring is empty
	*/
       lemma_substringLt {
          \schemaVar \term CharList l;
	  \schemaVar \term int i,j;
	  \find (substring(i,j,l))
	  \replacewith (\if (j<i) \then (empty)
	  	       	    	  \else (substring(i,j,l)) )
	  \heuristics (userTaclets2)
      };

      /*
       * replacing charAt with substring and head
       */
       lemma_charAt {
           \schemaVar \term CharList l;
	   \schemaVar \term int i;
	   \find (charAt(i,l))
	   \replacewith (head(substring(i,length(l),l)))
	   \heuristics (userTaclets2)
       };

       /*
        * Due to specification, a startIndex < 0 is mapped to 0
	*/
       lemma_substringLt0 {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \find (substring (i,j,l))
	   \replacewith (\if (i<0) \then (substring(0,j,l))
	   		     	   \else (substring(i,j,l)) )
	   \heuristics (userTaclets2)
       };

       /*
        * Due to specification, a endIndex>=length(list) is mapped to length(list)
	*/
       lemma_substringGtLength {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \find (substring(i,j,l))
	   \replacewith (\if (j>=length(l)) \then (substring(i,length(l),l))
	   		     		    \else (substring(i,j,l)) )
	   \heuristics (userTaclets2)
       };

       /*
        * The length of a well defined substring is endIndex-startIndex
	*/
       lemma_substringLength {
          \schemaVar \term CharList l;
	  \schemaVar \term int i,j;
	  \find (length(substring(i,j,l)))
	  \replacewith (\if (j>=i & i>=0 & j<=length(l)) \then (j-i)
	  	       	    	    	   		 \else (length(substring(i,j,l))) )
							       /* use other lemmas... */	
	  \heuristics (userTaclets3)
      };

       /*
        * Two succedent substring calls can be combined to one
	*/
       lemma_substringSubstring {
       	   \schemaVar \term CharList l;
	   \schemaVar \term int i,j,k,m;
	   \find (substring(i,j,substring(k,m,l)))
	   \replacewith (\if (i >= 0 & k >= 0 & m >= k+j) \then (substring(i+k,k+j,l))
	   					     	  \else (substring(i,j,substring(k,m,l)))
				      	    	 	  /* use other lemmas... */ )
	   \heuristics (userTaclets2)
       };

       /*
        * Like for substring, charAt(i,l) for i<0 is mapped to charAt(0,l)
	*/
       lemma_charAtLt0 {
           \schemaVar \term CharList l;
	   \schemaVar \term int i;
	   \find (charAt(i,l))
	   \replacewith (\if (i<=0) \then (charAt(0,l))
	   		     	   \else (charAt(i,l)) )
	   \heuristics (userTaclets2)
       };

       /*
        * The length of a concatenated string is the sum of its parts
	*/
       lemma_lengthConcat {
           \schemaVar \term CharList l1,l2;
	   \find (length(concat(l1,l2)))
	   \replacewith (length(l1)+length(l2))
	   \heuristics (userTaclets3)
       };

      /*
       * the substring of a concatenation can be computed as a contatenation of
       * two substring terms:
       * substring(i,j,concat(l1,l2))
       * = concat (substring(i,j,l1),substring(i-length(l1),j-length(l1),l2))
       * Note that the due to the axiomatization of the exception cases for
       * substring, no preconditions are needed
       */
      lemma_substringConcat {
           \schemaVar \term CharList l1,l2;
	   \schemaVar \term int i,j;
	   \find ( substring(i,j,concat(l1,l2)) )
	   \replacewith ( concat(substring(i,j,l1),substring(i-length(l1),j-length(l1),l2)) )
	   \heuristics (userTaclets3)
       };

       /*
        * A replace inside a substring call does not affect the substring method
	*/
       lemma_substringReplace {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c1,c2;
	   \schemaVar \term int i,j;
	   \find (substring(i,j,replace(c1,c2,l)))
	   \replacewith (replace(c1,c2,substring(i,j,l)))
	   \heuristics (userTaclets3)
       };

       /*
        * The oder way around
	*/
       lemma_replaceSubstring {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c1,c2;
	   \schemaVar \term int i,j;
	   \find (replace(c1,c2,substring(i,j,l)))
	   \replacewith (substring(i,j,replace(c1,c2,l)))
	   \heuristics (userTaclets1)
       };

       /*
        * l is not equal to cons(c,l)
	*/
       lemma_consEq {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c;
	   \find ( l = cons(c,l) )
	   \replacewith ( false )
	   \heuristics (userTaclets3)
       };

       /*
        * concatenation of a non empty string changes the original string
	*/
       lemma_concatEqLeft {
           \schemaVar \term CharList l1, l2;
	   \assumes ( ==> l2 = empty)
	   \find ( concat(l1,l2) = l1 )
	   \sameUpdateLevel
	   \replacewith ( false )
	   \heuristics (userTaclets3)
       };

       lemma_concatEqRight {
           \schemaVar \term CharList l1, l2;
	   \assumes ( ==> l1 = empty)
	   \find ( concat(l1,l2) = l2 )
	   \sameUpdateLevel
	   \replacewith ( false )
	   \heuristics (userTaclets3)
       };

       /*
        * Two lists of different length are not equal
	*/
       lemma_lengthNEq1 {
           \schemaVar \term CharList l1,l2;
	   \schemaVar \formula phi;
	   \assumes ( ==> length(l1) = length(l2) )
	   \add ( ==> l1 = l2 )
	   \heuristics (userTaclets3)
       };

       /*
        * Two equal lists have the same length
	*/
	lemma_lengthNEq2 {
	    \schemaVar \term CharList l1,l2;
	    \assumes ( l1 = l2 ==> )
	    \add ( length(l1) = length(l2) ==> )
	    \heuristics (userTaclets3)
	};

      /*
       * empty is the only list having length 0
       */
      lemma_length0 {
          \schemaVar \term CharList l;
	  \assumes (length(l) = 0 ==> )
	  \add (l = empty ==> )
	  \heuristics (userTaclets3)
      };

       /*
        * In a term charAt(i,substring(j,k,l)), the substring can be omitted
	*/
       lemma_charAtSubstring {
           \schemaVar \term CharList l;
           \schemaVar \term int i,j,k;
	   \find (charAt(i,substring(j,k,l)))
	   \replacewith( \if (i<k-j
	   		      & i>=0
	   		      & j>=0
			      & k>j
			      & i+j<length(l))
			 \then (charAt(i+j,l))
			 \else (charAt(i,substring(j,k,l)))
				/* use other lemmas first */ )
	   \heuristics (userTaclets3)		
       };

}
