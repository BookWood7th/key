\rules {

       lemma_lengthGEq0 {
           \schemaVar \term CharList l;
	   \add (length(l) >= 0 ==> )
       };

       lemma_charAtSubstring {
           \schemaVar \term CharList l;
           \schemaVar \term int i,j;
           \add ((  (i >= 0)
	   	  & (j >= 0)
	   	  & (i+j) < length(l)
                  & j < length(l)
		  & length(l) > 0 )
		  -> (charAt(i,substring(j,l)) = charAt(i+j,l)) ==> )
       };

       lemma_charAtPrefix {
           \schemaVar \term CharList l;
           \schemaVar \term int i,j;
	   \add ( ( (i >= 0)
	   	    & (j > 0)
		    & (i < j)
		    & (j <= length(l)) )
		  -> (charAt(i,prefix(j,l)) = charAt(i,l)) ==> ) 
       };

       lemma_substringSubstring {
       	   \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \add ( ( (i >= 0)
	   	    & (j >= 0)
		    & (i+j < length(l)) )
		  -> (substring(i,substring(j,l)) = substring(i+j,l)) ==> )
       };

       lemma_prefixPrefix {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \add ( ( (i >= 0)
	   	    & (j >= 0)
		    & (i <= j)
		    & (j <= length(l)) )
		  -> (prefix(i,prefix(j,l)) = prefix(j,l)) ==> )
       };

       lemma_prefixSubstring {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \add ( ( (i >= 0)
	   	    & (j >= 0)
		    & (i+j <= length(l))		    
		    & (j < length(l)))
		  -> (prefix(i,substring(j,l)) = substring(j,prefix(i+j,l))) ==> )
       };

       lemma_substringPrefix {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \add ( ( (i >= 0)
		    & (i < j)
		    & (j <= length(l)) )
		  -> (substring(i,prefix(j,l)) = prefix(j-i,substring(i,l))) ==> )
       };

       lemma_indexOfSubstring {
           \schemaVar \term CharList l;
	   \schemaVar \term int i,j;
	   \schemaVar \term jchar c;
	   /* Note that indexOf is defined for a negative index... */
	   \add ( ( (i >= 0)
	   	    & (j >= 0)
		    & (j < length(l)) )
		  -> (indexOf (c,i,substring(j,l)) = indexOf (c,i-j,l)) ==> )
       };

       lemma_lengthConcat {
           \schemaVar \term CharList l1,l2;
	   \add ( length(concat(l1,l2)) = length(l1)+length(l2) ==> )       			
       };

       lemma_prefixConcat {
       	   \schemaVar \term CharList l1,l2;
	   \schemaVar \term int i;
	   \find ( prefix(i,concat(l1,l2)) )
	   \replacewith ( \if (i<length(l1))
	   		  \then (prefix(i,l1))
			  \else (concat(l1,prefix(i-length(l1),l2))) )
       };

       lemma_substringConcat {
           \schemaVar \term CharList l1,l2;
	   \schemaVar \term int i;
	   \find ( substring(i,concat(l1,l2)) )
	   \replacewith ( \if (i>=length(l1))
	   		  \then (substring(i-length(l1),l2))
			  \else (concat(substring(i,l1),l2)) )
       };

       lemma_concatStartsWith {
           \schemaVar \term CharList l1,l2;
	   \add ( startsWith(concat(l1,l2),l1) ==> )
       };

       lemma_concatEndsWith {
           \schemaVar \term CharList l1,l2;
	   \add ( endsWith(concat(l1,l2),l2) ==> )
       };

       lemma_startsWith {
           \schemaVar \term CharList l1,l2;
           \schemaVar \variables int i;
           \varcond ( \notFreeIn (i,l1), \notFreeIn (i,l2) )
           \add ( startsWith(l1,l2)
	   	  -> \forall i; ( (i >= 0
				   & i < length (l1) )
				 -> charAt (i,l1) = charAt (i,l2) ) ==> )
       };

       lemma_endsWith {
           \schemaVar \term CharList l1,l2;
	   \schemaVar \variables int i;
	   \varcond ( \notFreeIn (i,l1), \notFreeIn (i,l2) )
	   \add ( endsWith(l1,l2)
	   	  -> \forall i; ( (i >= 0
		      	      	   & i < length(l1) )
				 -> charAt (i,l1) = charAt (length(l2)-length(l1)+i,l2) ) ==> )
       };

       lemma_endsWithContains {
           \schemaVar \term CharList l1,l2;
	   \add ( endsWith (l1,l2) -> contains(l1,l2) ==> )
       };

       lemma_startsWithContains {
           \schemaVar \term CharList l1,l2;
	   \add ( startsWith (l1,l2) -> contains(l1,l2) ==> )
       };

       lemma_replaceReplace {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c1,c2,c3;
	   \find ( replace (c2,c3,replace(c1,c2,l)) )
	   \replacewith ( replace (c1,c3,l) )
       };

       lemma_substringReplace {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c1,c2;
	   \schemaVar \term int i;
	   \find (substring(i,replace(c1,c2,l)))
	   \replacewith (replace(c1,c2,substring(i,l)))
       };

       lemma_prefixReplace {
           \schemaVar \term CharList l;
	   \schemaVar \term jchar c1,c2;
	   \schemaVar \term int i;
	   \find (prefix(i,replace(c1,c2,l)))
	   \replacewith (replace(c1,c2,prefix(i,l)))
       };
}

