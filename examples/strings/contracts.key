\include "stringRules2.key";

\contracts {
    /********************************/
    /* Contracts for String methods */
    /********************************/

    //
    // length
    //
    lengthContr {
        \programVariables {
	    int result;
	    java.lang.String s;
	}
	true -> \<{ result = s.length()@java.lang.String; }\>(result = length(content(s)))
	\modifies { result }
	\displayname "Length Normal"
    };

    //
    // charAt
    //
    charAtNormal {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.charAt(i)@java.lang.String;
	}
	}\>(exc = null & result = charAt(i,content(s)))
	\modifies { result }
	\displayname "CharAt Normal"
    };
    charAtExc {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i < 0 | i >= length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
	    result = s.charAt(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "CharAt Exceptional: IndexOutOfBounds"
    };

    //
    // concat
    //
    concatNormal {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 != null) ->
	\<{
		result = s1.concat(s2)@java.lang.String;
	}\>(
		java.lang.Object::<created>@pre(result) = FALSE
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = concat(content(s1),content(s2)) )
	\modifies {
		    result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object)
	}
	\displayname "Concat Normal"
    };		
    concatExc {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.concat(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Concat Exceptional: Null Pointer"
    };

    //
    // substring
    //
    substringNormal {
        \programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(j>=i & i >= 0 & j <= length(content(s)))
	->
	\<{
		result = s.substring(i,j)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,j,content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substringExc {
    	\programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(i>j | i<0 | j > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i,j)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    substring2Normal {
        \programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
		result = s.substring(i)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,length(content(s)),content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substring2Exc {
    	\programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i<0 | i > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    //
    // compareTo
    //
    compareToNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 != null)
	->
	\<{
		result = s1.compareTo(s2)@java.lang.String;
	}\>( result = \ifEx int i; (  i < length(content(s1))
	     	      	            & i < length(content(s2))
				    & charAt(i,content(s1)) != charAt(i,content(s2)) )
	     	      \then (charAt(i,content(s1)) - charAt(i,content(s2)))
	     	      \else (length(content(s1)) - length(content(s2))) )
	\modifies { result }
	\displayname "compareTo Normal"
    };

    compareToExc {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.compareTo(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "compareTo Exceptional: Null Pointer"
    };

    //
    // endsWith
    //
    endsWithNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.endsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(length(content(s1))-length(content(s2)),
					length(content(s1)),
					content(s1)) = content(s2) )
	\modifies { result }
	\displayname "endsWith Normal"
    };

    endsWithExc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.endsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "endsWith Exceptional: Null Pointer"
    };

    //
    // startsWith
    //
    startsWith1Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(0,
					length(content(s2)),
					content(s1)) = content(s2))
	\modifies { result }
	\displayname "startsWith Normal"
    };

    startsWith1Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    startsWith2Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2, i)@java.lang.String;
	}\>(result = TRUE <-> ((i >= 0) & (i <= length(content(s1))) & substring(i,
		     	      	       	 				 	 length(content(s2))+i,
										 content(s1)) = content(s2)))
	\modifies { result }
	\displayname "startsWith Normal"
    };

    startsWith2Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2, i)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    //
    // replace
    //
    replaceNormal {
        \programVariables {
	    java.lang.String s, result;
	    char c1, c2;
	}
	true
	->
	\<{
		result = s.replace(c1,c2)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = replace(c1,c2,content(s)) )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "replace Normal"
    };

    //
    // indexOf
    //
    indexOfNormal {
        \programVariables {
	    java.lang.String s;
	    int c;
	    int result;
	}
	true
	->
	\<{ 
              result = s.indexOf(c)@java.lang.String;
	}\>(result = indexOf((jchar)c,0,content(s)))
	\modifies { result }
	\displayname "indexOf Normal"
    };

    indexOfFromNormal {
        \programVariables {
	    java.lang.String s;
	    int c, from;
	    int result;
	}
	true
	->
	\<{
		result = s.indexOf(c,from)@java.lang.String;
	}\>(result = indexOf((jchar)c,from,content(s)))
	\modifies { result }
	\displayname "indexOf Normal"
    };

    indexOfStringNormal {
    	\programVariables {
	    java.lang.String s, t;
	    int result;
	}
	(t != null)
	->
	\<{
		result = s.indexOf(t)@java.lang.String;
	}\>(result = indexOfStr(content(t),0,content(s)))
	\modifies { result }
	\displayname "indexOf Normal"
    };

    indexOfStringExc {
        \programVariables {
	    java.lang.String s, t;
	    int result;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.indexOf(t)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "indexOf Exceptional"
    };

//TODO testen
    indexOfStringFromNormal {
    	\programVariables {
	    java.lang.String s, t;
	    int result, from;
	}
	(t != null)
	->
	\<{
		result = s.indexOf(t, from)@java.lang.String;
	}\>(result = indexOfStr(content(t),from,content(s)))
	\modifies { result }
	\displayname "indexOf Normal"
    };

    indexOfStringFromExc {
        \programVariables {
	    java.lang.String s, t;
	    int result, from;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.indexOf(t,from)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "indexOf Exceptional"
    };

    //
    // lastIndexOf
    //
//TODO testen
    lastIndexOfNormal {
        \programVariables {
	    java.lang.String s;
	    int c;
	    int result;
	}
	true
	->
	\<{ 
              result = s.lastIndexOf(c)@java.lang.String;
	}\>(result = lastIndexOf((jchar)c,length(content(s))-1,content(s)))
	\modifies { result }
	\displayname "lastIndexOf Normal"
    };

//TODO testen
    lastIndexOfFromNormal {
        \programVariables {
	    java.lang.String s;
	    int c, from;
	    int result;
	}
	true
	->
	\<{ 
              result = s.lastIndexOf(c,from)@java.lang.String;
	}\>(result = lastIndexOf((jchar)c,from,content(s)))
	\modifies { result }
	\displayname "lastIndexOf Normal"
    };

//TODO testen
    lastIndexOfStringNormal {
    	\programVariables {
	    java.lang.String s, t;
	    int result;
	}
	(t != null)
	->
	\<{
		result = s.lastIndexOf(t)@java.lang.String;
	}\>(result = lastIndexOfStr(content(t),length(content(s))-1,content(s)))
	\modifies { result }
	\displayname "lastIndexOf Normal"
    };

    lastIndexOfStringExc {
        \programVariables {
	    java.lang.String s, t;
	    int result;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.lastIndexOf(t)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "lastIndexOf Exceptional"
    };

//TODO testen
    lastIndexOfStringFromNormal {
    	\programVariables {
	    java.lang.String s, t;
	    int result, from;
	}
	(t != null)
	->
	\<{
		result = s.lastIndexOf(t, from)@java.lang.String;
	}\>(result = lastIndexOfStr(content(t),from,content(s)))
	\modifies { result }
	\displayname "lastIndexOf Normal"
    };

    lastIndexOfStringFromExc {
        \programVariables {
	    java.lang.String s, t;
	    int result, from;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.lastIndexOf(t,from)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "lastIndexOf Exceptional"
    };

    //
    // toString
    //
    toStringNormal {
        \programVariables {
	    java.lang.String s, result;
	}
	true
	->
	\<{
		result = s.toString()@java.lang.String;
	}\>(result = s)
	\modifies { result }
	\displayname "toString Normal"
    };

    //
    // equals
    //
    equalsNormal {
    	\programVariables {
	    java.lang.String s;
	    java.lang.Object o;
	    boolean result;
	}
	true
	->
	\<{
		result = s.equals(o)@java.lang.String;
	}\>( result = TRUE <-> (  o != null
	     	    	 & java.lang.String::instance(o)= TRUE
	    		 & content(s) = content((java.lang.String)o) ))
	\modifies { result }
	\displayname "equals"
    };

    //
    // isEmpty
    //
    isEmptyNormal {
        \programVariables {
	    java.lang.String s;
	    boolean result;
	}
	true
	->
	\<{
		result = s.isEmpty()@java.lang.String;
	}\>( result = TRUE <-> content(s) = empty )
	\modifies { result }
	\displayname "isEmpty"
    };

/** KeY does not know the two functions working with CharSequence, i.e. contentEquals and contains
    //
    // contentEquals
    //
    contentEqualsNormal {
        \programVariables {
	    java.lang.String s;
	    // t should be of type CharSequence, but KeY does not know that interface so far...
	    java.lang.String t;
	    boolean result;
	}
	(t != null)
	->
	\<{
		result = s.contentEquals(t)@java.lang.String;
	}\>( result = TRUE <-> content(s) = content(t) )
	\modifies { result }
	\displayname "contentEquals for String argument"
    };

    contentEqualsExc {
    	\programVariables {
	    java.lang.String s;
	    // t should be of type CharSequence, but KeY does not know that interface so far...
	    java.lang.String t;
	    boolean result;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.contentEquals(t)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "contentEquals Exceptional"
    }

    //
    // contains
    //
    containsNormal {
        \programVariables {
	    java.lang.String s;
	    // t should be of type CharSequence, but KeY does not know that interface so far...
	    java.lang.String t;
	    boolean result;
	}
	(t != null & java.lang.String::instance(t) = TRUE)
	->
	\<{
		result = s.contains(t)@java.lang.String;
	}\>( result = TRUE <-> contains(content(t), content(s)) )
	\modifies { result }
	\displayname "contains for String argument"
    };

    containsExc {
    	\programVariables {
	    java.lang.String s;
	    // t should be of type CharSequence, but KeY does not know that interface so far...
	    java.lang.String t;
	    boolean result;
	}
	(t = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = s.contains(t)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "contains Exceptional"
    };
**/

    //
    // copyValueOf
    //
    copyValueOfNormal {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	}
	(data != null)
	->
	\<{
		result = java.lang.String.copyValueOf(data)@java.lang.String;
	}\>(   length(content(result)) = data.length
	     & \forall int i; ((i >= 0 & i < data.length) -> charAt(i,content(result)) = data[i] )
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "copyValueOf Normal"
    };

    copyValueOfExc {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	}
	(data = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = java.lang.String.copyValueOf(data)@java.lang.String;
		}
	}\> (exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies{ }
	\displayname "copyValueOf NullPointer"
    };

    copyValueOfRangeNormal {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data != null & offset >= 0 & count >= 0 & offset+count <= data.length)
	->
	\<{
		result = java.lang.String.copyValueOf(data, offset, count)@java.lang.String;
	}\>(   length(content(result)) = count
	     & \forall int i; ((i >= 0 & i < count) -> charAt(i,content(result)) = data[i+offset] )
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "copyValueOf Normal"
    };

    copyValueOfRangeExcBounds {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data != null & (offset < 0 | count < 0 | offset+count > data.length))
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = java.lang.String.copyValueOf (data,offset,count)@java.lang.String;
		}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "copyValueOf Exceptional"
    };

    copyValueOfRangeExcNull {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = java.lang.String.copyValueOf(data,offset,count)@java.lang.String;
		}
	}\> (exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies{ }
	\displayname "copyValueOf NullPointer"
    };

    //
    // getChars
    //
//TODO testen
    getCharsNormal {
        \programVariables {
	    java.lang.String s;
	    char[] dst;
	    int srcBegin, srcEnd, dstBegin;
	}
	( dst != null
	& srcBegin >= 0
	& srcBegin <= srcEnd
	& srcEnd <= length(content(s))
	& dstBegin >= 0
	& dstBegin+(srcEnd-srcBegin) <= dst.length )
	->
	\<{
		s.getChars(srcBegin,srcEnd,dst,dstBegin)@java.lang.String;
	}\>(\forall int i; ( ((i >= 0 & i < (srcEnd-srcBegin))
		    	      -> charAt(srcBegin+i,content(s)) = dst[dstBegin+i])
			     & ((i >= 0 & i < dstBegin)
			       -> dst[i]=dst@pre[i])
			     & ((i >= dstBegin+(srcEnd-srcBegin) & i < dst.length)
			       -> dst[i]=dst@pre[i]) ))
	\modifies { dst }
	\displayname "getChars Normal"
    };

    getCharsExcBounds {
        \programVariables {
	    java.lang.String s;
	    char[] dst;
	    int srcBegin, srcEnd, dstBegin;
	}
	( dst != null &
	( srcBegin < 0
	| srcBegin > srcEnd
	| srcEnd > length(content(s))
	| dstBegin < 0
	| dstBegin+(srcEnd-srcBegin) > dst.length ))
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  s.getChars(srcBegin,srcEnd,dst,dstBegin)@java.lang.String;
		}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "getChars Exceptional"
    };

    getCharsExcNull {
        \programVariables {
	    java.lang.String s;
	    char[] dst;
	    int srcBegin, srcEnd, dstBegin;
	}
	(dst = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  s.getChars(srcBegin,srcEnd,dst,dstBegin)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "getChars NullPointer"
    };

    //
    // toCharArray
    //
    toCharArray {
      \programVariables {
          java.lang.String s;
	  char[] result;
      }
      true ->
      \<{
		result = s.toCharArray()@java.lang.String;
      }\>(  result != null
      	  & \forall int i; ((i >= 0 & i < length(content(s))) -> charAt(i,content(s)) = result[i])
	  //TODO result newly allocated...
	  )
      \modifies { result }
      \displayname "toCharArray"
    };

    //
    // valueOf
    //
    valueOfBoolean {
    	\programVariables {
	    java.lang.String result;
	    boolean b;
	}
	true
	->
	\<{
		result = java.lang.String.valueOf(b)@java.lang.String;
	}\>(   content(result) = \if (b = TRUE)
	       		       	 \then ( cons((jchar)'t',cons((jchar)'r',cons((jchar)'u',cons((jchar)'e',empty)))) )
				 \else ( cons((jchar)'f',cons((jchar)'a',cons((jchar)'l',
				       	 cons((jchar)'s',cons((jchar)'e',empty))))) )
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf"
    };

    valueOfChar {
        \programVariables {
	    java.lang.String result;
	    char c;
	}
	true
	->
	\<{
		result = java.lang.String.valueOf(c)@java.lang.String;
	}\>(   charAt(0,content(result)) = c
	     & length(content(result)) = 1
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf"
    };

    valueOfCharArrayNormal {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	}
	(data != null)
	->
	\<{
		result = java.lang.String.valueOf(data)@java.lang.String;
	}\>(   (\forall int i; ((i >= 0 & i < data.length)
	       		        -> charAt(i,content(result)) = data[i]))
	     & length(content(result)) = data.length
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf"
    };

    valueOfCharArrayExc {
    	\programVariables {
	    java.lang.String result;
	    char[] data;
	}
	(data = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = java.lang.String.valueOf(data)@java.lang.String;
		}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "valueOf NullPointer"
    };

    valueOfInt {
        \programVariables {
	    java.lang.String result;
	    int i;
	}
	true ->
	\<{
		result = java.lang.String.valueOf(i)@java.lang.String;
	}\>(   content(result) = removeZeros(translateInt(i))
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf"
    };

    valueOfLong {
        \programVariables {
	    java.lang.String result;
	    long i;
	}
	true ->
	\<{
		result = java.lang.String.valueOf(i)@java.lang.String;
	}\>(   content(result) = removeZeros(translateInt(i))
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf"
    };

    valueOfCharArrayRangeNormal {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data != null & offset >= 0 & count >= 0 & offset+count <= data.length)
	->
	\<{
		result = java.lang.String.valueOf(data,offset,count)@java.lang.String;
	}\>(   (\forall int i; ((i >= 0 & i < count)
	       		        -> charAt(i,content(result)) = data[offset+i]))
	     & length(content(result)) = count
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf Normal"
    };

    valueOfCharArrayRangeExcBounds {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data != null & (offset < 0 | count < 0 | offset+count > data.length))
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			result = java.lang.String.valueOf(data,offset,count)@java.lang.String;
		}
	}\>( exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
	\modifies { }
	\displayname "valueOf Exceptional"
    };

    valueOfCharArrayRangeExcNull {
        \programVariables {
	    java.lang.String result;
	    char[] data;
	    int offset, count;
	}
	(data = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			  result = java.lang.String.valueOf(data,offset,count)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "valueOf NullPointer"
    };

    valueOfObjectNull {
        \programVariables {
	    java.lang.String result;
	    java.lang.Object o;
	}
	o = null
	->
	\<{
		result = java.lang.String.valueOf(o)@java.lang.String;
	}\>(   content(result) = cons((jchar)'n',cons((jchar)'u',cons((jchar)'l',cons((jchar)'l',empty))))
	     & java.lang.Object::<created>@pre(result) = FALSE // new object created...
	     & result.<created>@(java.lang.Object) = TRUE
	     & result != null )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "valueOf null"
    };

    valueOfObjectNonNull {
        \programVariables {
	    java.lang.String result;
	    java.lang.Object o;
	}
	o != null
	->
	\<{
		result = java.lang.String.valueOf(o)@java.lang.String;
	}\>( result = o.toString() )
	\modifies { result }
	\displayname "valueOf non null"
    };

    constrNormal {
        \programVariables {
	    java.lang.String s;
	}
	true
	->
	\<{
		s.<init>()@java.lang.String;
	}\>(content(s) = empty)
	\modifies { content(s) }
	\displayname "Constructor Normal Execution"
    };

    constrCharArrayNormal {
    	\programVariables {
	    java.lang.String s;
	    char[] v;
	}
	(v != null)
	->
	\<{
		s.<init>(v)@java.lang.String;
	}\>(  length(content(s)) = v.length
	    & \forall int i; ((i >= 0 & i < v.length) -> charAt(i,content(s)) = v[i]) )
	\modifies { content(s) }
	\displayname "Constructor Normal Execution"
    };

    constrCharArrayExc {
    	\programVariables {
	    java.lang.String s;
	    char[] v;
	}
	(v = null)
	->
	\<{
		#catchAll (java.lang.Exception exc) {
			s.<init>(v)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "Constructor Exceptional Execution"
    };

    constrCharArrayRangeNormal {
    	\programVariables {
	    java.lang.String s;
	    char[] v;
	    int offset, count;
	}
	(v != null & offset >= 0 & count >= 0 & offset+count <= v.length)
	->
	\<{
		s.<init>(v, offset, count)@java.lang.String;
	}\>(  length(content(s)) = count
	    & \forall int i; ((i >= 0 & i < count) -> charAt(i,content(s)) = v[offset+i]) )
	\modifies { content(s) }
	\displayname "Constructor Normal Execution"
    };

    constrCharArrayRangeExcBounds {
    	\programVariables {
	    java.lang.String s;
	    char[] v;
	    int offset, count;
	}
	(v != null & (offset < 0 | count < 0 | offset+count > v.length))
	->
	\<{
		#catchAll(java.lang.Exception exc) {
			s.<init>(v, offset, count)@java.lang.String;
		}
	}\>( exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
	\modifies { }
	\displayname "Constructor Exceptional Execution"
    };

    constrCharArrayRangeExcNull {
    	\programVariables {
	    java.lang.String s;
	    char[] v;
	    int offset, count;
	}
	(v = null)
	->
	\<{
		#catchAll(java.lang.Exception exc) {
			s.<init>(v, offset, count)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "Constructor Exceptional Execution"
    };

    constrCopyNormal {
        \programVariables {
	    java.lang.String s, t;
	}
	(t != null)
	->
	\<{
		s.<init>(t)@java.lang.String;
	}\>( content(s) = content(t) )
	\modifies { content(s) }
	\displayname "Copy Constructor Normal Execution"
    };

    constrCopyExc {
        \programVariables {
	    java.lang.String s, t;
	}
	(t = null)
	->
	\<{
		#catchAll(java.lang.Exception exc) {
			s.<init>(t)@java.lang.String;
		}
	}\>( exc != null & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies { }
	\displayname "Copy Constructor Exceptional Execution"
    };

}

\invariants(java.lang.String self) {
	hashCodeInv {
		    \forall java.lang.String s; (content(s) = content(self) -> s.hashCode() = self.hashCode())
		    \displayname "hashCode() invariant"
	};
}


\problem {
	 inReachableState ->
	 \<{
	 String s = "Testing!";
	 String t = String.valueOf(s);
	 }\>(content(s) = content(t))
}
