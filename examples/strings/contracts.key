\includeFile "stringsTheory.key";

\contracts {
    /********************************/
    /* Contracts for String methods */
    /********************************/

    //
    // length
    //
    lengthContr {
        \programVariables {
	    int result;
	    java.lang.String s;
	}
	true -> \<{ result = s.length()@java.lang.String; }\>(result = length(content(s)))
	\modifies { }
	\displayname "Length Normal"
    };

    //
    // charAt
    //
    charAtNormal {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.charAt(i)@java.lang.String;
	}
	}\>(exc = null & result = charAt(i,content(s)))
	\modifies { }
	\displayname "CharAt Normal"
    };
    charAtExc {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i < 0 | i >= length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
	    result = s.charAt(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "CharAt Exceptional: IndexOutOfBounds"
    };

    //
    // concat
    //
    concatNormal {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 != null) ->
	\<{
		result = s1.concat(s2)@java.lang.String;
	}\>(
		java.lang.Object::<created>@pre(result) = FALSE
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = concat(content(s1),content(s2)) )
	\modifies {
		    result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object)
	}
	\displayname "Concat Normal"
    };		
    concatExc {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.concat(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Concat Exceptional: Null Pointer"
    };

    //
    // substring
    //
    substringNormal {
        \programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(j>=i & i >= 0 & j <= length(content(s)))
	->
	\<{
		result = s.substring(i,j)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,j,content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substringExc {
    	\programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(i>j | i<0 | j > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i,j)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    substring2Normal {
        \programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
		result = s.substring(i)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,length(content(s)),content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substring2Exc {
    	\programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i<0 | i > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    compareToNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 != null)
	->
	\<{
		result = s1.compareTo(s2)@java.lang.String;
	}\>( result = \ifEx int i; (  i < length(content(s1))
	     	      	            & i < length(content(s2))
				    & charAt(i,content(s1)) != charAt(i,content(s2)) )
	     	      \then (charAt(i,content(s1)) - charAt(i,content(s2)))
	     	      \else (length(content(s1)) - length(content(s2))) )
	\modifies { }
	\displayname "compareTo Normal"
    };

    compareToExc {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.compareTo(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "compareTo Exceptional: Null Pointer"
    };

    endsWithNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.endsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(length(content(s1))-length(content(s2)),
					length(content(s1)),
					content(s1)) = content(s2) )
	\modifies { }
	\displayname "endsWith Normal"
    };

    endsWithExc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.endsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "endsWith Exceptional: Null Pointer"
    };

    startsWith1Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(0,
					length(content(s2)),
					content(s1)) = content(s2))
	\modifies { }
	\displayname "startsWith Normal"
    };

    startsWith1Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    startsWith2Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2, i)@java.lang.String;
	}\>(result = TRUE <-> ((i >= 0) & (i <= length(content(s1))) & substring(i,
		     	      	       	 				 	 length(content(s2))+i,
										 content(s1)) = content(s2)))
	\modifies { }
	\displayname "startsWith Normal"
    };

//TODO NullPointerException when i < 0 or i > length(s1)?
    startsWith2Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2, i)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    replaceNormal {
        \programVariables {
	    java.lang.String s, result;
	    char c1, c2;
	}
	true
	->
	\<{
		result = s.replace(c1,c2)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = replace(c1,c2,content(s)) )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "replace Normal"
    };

    indexOfNormal {
        \programVariables {
	    java.lang.String s;
	    char c;
	    int result;
	}
	true
	->
	\<{
		result = s.indexOf(c)@java.lang.String;
	}\>(result = indexOf(c,0,content(s)))
	\modifies { }
	\displayname "indexOf Normal"
    };

}

\problem {
	 inReachableState ->
	 \<{
	 java.lang.String s = "Hallo";
	 int i = s.indexOf('l');
	 }\>(i = 2)
}
