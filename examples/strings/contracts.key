\includeFile "stringsTheory.key";

\contracts {
    /********************************/
    /* Contracts for String methods */
    /********************************/

    //
    // length
    //
    lengthContr {
        \programVariables {
	    int result;
	    java.lang.String s;
	}
	true -> \<{ result = s.length()@java.lang.String; }\>(result = length(content(s)))
	\modifies { }
    };

    //
    // charAt
    //
    charAtNormal {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.charAt(i)@java.lang.String;
	}
	}\>(exc = null & result = charAt(i,content(s)))
	\modifies { }
    };
    charAtExc {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i < 0 | i >= length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
	    result = s.charAt(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
    };

    concatNormal {//TODO correct?
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 != null) ->
	\<{
		result = s1.concat(s2)@java.lang.String;
	}\>(result != null & content(result) = concat(content(s1),content(s2)))
	\modifies { content(result) }
    };

    concatExc {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.concat(s2)@java.lang.String;
	}}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
    };

    substringNormal {
        \programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(j>=i & i >= 0 & j <= length(content(s)))
	->
	\<{
		result = s.substring(i,j)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,j,content(s)))
	\modifies { result, content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
    };

    substringExc {
    	\programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(i>j | i<0 | j > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i,j)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
    };
    
}

\problem {
	 inReachableState ->
	 \<{
	 java.lang.String s = "Hallo";
	 java.lang.String t = s.substring(1,3);
	 }\>(length(content(s)) = 2)
}
