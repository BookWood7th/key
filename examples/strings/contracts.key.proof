\settings {
"#Proof-Settings-Config-File
#Sun May 03 16:16:26 CEST 2009
[General]SoundNotification=false
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_HIGH
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[Libraries]Default=acc.key-false, stringRules.key-false, /Users/geilmann/.key/libraries/deprecatedRules.key-false, /Users/geilmann/.key/libraries/acc.key-false, /Users/geilmann/.key/libraries/stringRules.key-false, deprecatedRules.key-false, /Users/geilmann/./Documents/Studienarbeit/CharList/stringsTheory.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , throughout-throughout\:toutOn , assertions-assertions\:on , programRules-programRules\:Java , intRules-intRules\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=false
[View]HideClosedSubtrees=false
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , throughout-throughout\:toutOn-throughout\:toutOff , assertions-assertions\:on-assertions\:off-assertions\:safe , programRules-programRules\:Java-programRules\:ODL , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff-javacard\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\includeFile "CharList/stringsTheory.key";

\contracts {
    /********************************/
    /* Contracts for String methods */
    /********************************/

    //
    // length
    //
    lengthContr {
        \programVariables {
	    int result;
	    java.lang.String s;
	}
	true -> \<{ result = s.length()@java.lang.String; }\>(result = length(content(s)))
	\modifies { }
    };

    //
    // charAt
    //
    charAtNormal {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.charAt(i)@java.lang.String;
	}
	}\>(exc = null & result = charAt(i,content(s)))
	\modifies { }
    };
    charAtExc {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i < 0 | i >= length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
	    result = s.charAt(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
    };

    concatNormal {//TODO correct?
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 != null) ->
	\<{
		result = s1.concat(s2)@java.lang.String;
	}\>(result != null & content(result) = concat(content(s1),content(s2)))
	\modifies { content(result) }
    };

    concatExc {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.concat(s2)@java.lang.String;
	}}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
    };

    substringNormal {
        \programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(j>=i & i >= 0 & j <= length(content(s)))
	->
	\<{
		result = s.substring(i,j)@java.lang.String;
	}\>(
                  java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,j,content(s)))
	\modifies { content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object), result }
    };

    substringExc {
    	\programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(i>j | i<0 | j > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i,j)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
    };
    
}

\problem {
   inReachableState
-> \<{
       java.lang.String s = "Hallo";
       java.lang.String t = s.substring(1,3);
     }\> length(content(s)) = 2

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "49e89255011484213292e3567319499e39f7e82a"))

(autoModeTime "15092")

(branch "dummy ID"
(rule "impRight" (formula "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "2") (userinteraction))
(rule "variableDeclaration" (formula "2") (newnames "s_1") (userinteraction))
(rule "stringAssignment" (formula "2") (userinteraction))
(builtin "Update Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "10") (userinteraction))
(rule "variableDeclaration" (formula "2") (term "10") (newnames "t") (userinteraction))
(rule "methodCallWithAssignment" (formula "2") (term "10") (inst "#v0=v_String") (userinteraction))
(branch " Normal Execution (s_1 != null)"
   (builtin "Update Simplification" (formula "2"))
   (rule "variableDeclaration" (formula "3") (term "10") (newnames "v_String") (userinteraction))
   (rule "variableDeclarationAssign" (formula "3") (term "10") (userinteraction))
   (rule "variableDeclaration" (formula "3") (term "10") (newnames "arg0") (userinteraction))
   (rule "assignment" (formula "3") (term "10") (userinteraction))
   (builtin "Update Simplification" (formula "3"))
   (rule "variableDeclarationAssign" (formula "3") (term "11") (userinteraction))
   (rule "variableDeclaration" (formula "3") (term "11") (newnames "arg1") (userinteraction))
   (rule "assignment" (formula "3") (term "11") (userinteraction))
   (builtin "Update Simplification" (formula "3"))
   (builtin "Use Operation Contract" (formula "3") (term "12") (newnames "arg1_1,arg0_1,content_0,nextToCreate_0,created_0,initialized_0,transient_0") (contract "substringNormal;;"))
   (branch " Pre"
      (builtin "Update Simplification" (formula "3"))
      (rule "andRight" (formula "3") (userinteraction))
      (branch " Case 1"
         (rule "andRight" (formula "3") (userinteraction))
         (branch " Case 1"
            (rule "andRight" (formula "3") (userinteraction))
            (branch " Case 1"
               (rule "repository_object_non_null" (formula "2"))
               (rule "false_right" (formula "2"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inReachableStateRewrite" (formula "2") (ifseqformula "1"))
               (builtin "Update Simplification" (formula "2"))
               (rule "orRight" (formula "2"))
               (rule "identical_object_equal_index" (formula "3") (term "1,0,1,1,0,1,0"))
               (rule "identical_object_equal_index" (formula "3") (term "0,0,0,1,0,1,0"))
               (rule "identical_object_equal_index" (formula "3") (term "0,0,1,0,1,0,1"))
               (rule "castDelInt" (formula "3") (term "1,1,0,0,1,1,0,1,0"))
               (rule "castDelInt" (formula "3") (term "1,1,0,0,1,0,1"))
               (rule "castDelInt" (formula "3") (term "1,1,1"))
               (rule "castDelInt" (formula "3") (term "0,0,0,1"))
               (rule "eqSymm" (formula "3") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,0,1"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,0,1"))
               (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,0,1"))
               (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1,1"))
               (rule "add_literals" (formula "3") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "3") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "3") (term "0,1,1"))
               (rule "qeq_literals" (formula "3") (term "1,1"))
               (rule "concrete_and_3" (formula "3") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1"))
               (rule "mul_literals" (formula "3") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,1"))
               (rule "elim_exists4" (formula "3") (term "1,1,0,1,0"))
               (rule "elim_forall8" (formula "3") (term "1,0"))
               (rule "eqClose" (formula "3") (term "0,0,0,1,0"))
               (rule "ifthenelse_true" (formula "3") (term "0,0,1,0"))
               (rule "boolean_equal" (formula "3") (term "0,1,0"))
               (rule "concrete_eq_1" (formula "3") (term "1,0"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1,1,0"))
               (rule "add_literals" (formula "3") (term "1,0,1,1,0"))
               (rule "times_zero_1" (formula "3") (term "0,1,1,0"))
               (rule "qeq_literals" (formula "3") (term "1,1,0"))
               (rule "concrete_and_3" (formula "3") (term "1,0"))
               (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "3") (term "0,1,1"))
               (rule "nnf_notAnd" (formula "3") (term "0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,1,1"))
               (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,1"))
               (rule "inEqSimp_or_antiSymm0" (formula "3") (term "0,0,1,1"))
               (rule "polySimp_homoEq" (formula "3") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "1,0,0,0,0,1,1"))
               (rule "add_literals" (formula "3") (term "0,1,0,0,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,1,1"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,0,1,1"))
               (rule "add_literals" (formula "3") (term "0,0,0,0,0,0,1,1"))
               (rule "add_zero_left" (formula "3") (term "0,0,0,0,0,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0,0,1,1"))
               (rule "add_literals" (formula "3") (term "1,0,0,0,0,1,1"))
               (rule "times_zero_1" (formula "3") (term "0,0,0,0,1,1"))
               (rule "eqClose" (formula "3") (term "0,0,0,1,1"))
               (rule "ifthenelse_true_for" (formula "3") (term "0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "3") (term "1,0,0,0,1,1"))
               (rule "add_literals" (formula "3") (term "0,1,0,0,0,1,1"))
               (rule "add_zero_left" (formula "3") (term "1,0,0,0,1,1"))
               (rule "lemma_length0" (newnames "L_0"))
               (rule "eqClose" (formula "1") (term "1") (matchconstraint "L_0=empty"))
               (rule "concrete_impl_4" (formula "1") (matchconstraint "L_0=empty"))
               (rule "true_left" (formula "1") (matchconstraint "L_0=empty"))
               (rule "lemma_lengthGEq0" (newnames "L_1"))
               (rule "lemma_charAtEmpty" (newnames "I_0,J_0"))
               (rule "eqClose" (formula "1") (matchconstraint "J_0=I_0"))
               (rule "true_left" (formula "1") (matchconstraint "J_0=I_0"))
               (rule "eqSymm" (formula "1"))
               (rule "eqClose" (formula "1") (matchconstraint "J_0=I_0"))
               (rule "true_left" (formula "1") (matchconstraint "J_0=I_0"))
               (rule "lemma_lengthNEq" (newnames "L1_0,L2_0"))
               (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "2") (term "0,1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "2") (term "0,0") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "2") (term "1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_impl_2" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "2") (term "0") (matchconstraint "L2_0=L1_0"))
               (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "eq_imp" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "eqSymm" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_impl_2" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "eqSymm" (formula "1") (term "0,1"))
               (rule "eqClose" (formula "1") (term "0,1") (matchconstraint "L2_0=L1_0"))
               (rule "eqClose" (formula "1") (term "0,0") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "1") (term "1") (matchconstraint "L2_0=L1_0"))
               (rule "concrete_not_1" (formula "1") (term "0") (matchconstraint "L2_0=L1_0"))
               (rule "eq_imp" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "true_left" (formula "1") (matchconstraint "L2_0=L1_0"))
               (rule "cl_charAtHead" (newnames "I_1"))
               (rule "charLiteral_to_int" (formula "7") (term "0,8"))
               (rule "charLiteral_to_int" (formula "7") (term "0,1,1,8"))
               (rule "charLiteral_to_int" (formula "7") (term "0,1,1,1,1,8"))
               (rule "charLiteral_to_int" (formula "7") (term "0,1,1,1,8"))
               (rule "charLiteral_to_int" (formula "7") (term "0,1,8"))
               (rule "inReachableStateRewrite" (formula "7") (ifseqformula "6"))
               (builtin "Update Simplification" (formula "7"))
               (rule "orRight" (formula "7"))
               (rule "identical_object_equal_index" (formula "8") (term "1,0,1,1,0,1,0"))
               (rule "identical_object_equal_index" (formula "8") (term "0,0,0,1,0,1,0"))
               (rule "identical_object_equal_index" (formula "8") (term "0,0,1,0,1,0,1"))
               (rule "castDelInt" (formula "8") (term "0,0,0,1"))
               (rule "castDelInt" (formula "8") (term "1,1,1"))
               (rule "castDelInt" (formula "8") (term "1,1,0,0,1,0,1"))
               (rule "castDelInt" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
               (rule "eqSymm" (formula "8") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0,1"))
               (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "8") (term "0,1,1"))
               (rule "qeq_literals" (formula "8") (term "1,1"))
               (rule "concrete_and_3" (formula "8") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1"))
               (rule "mul_literals" (formula "8") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1"))
               (rule "elim_exists4" (formula "8") (term "1,1,0,1,0"))
               (rule "elim_forall8" (formula "8") (term "1,0"))
               (rule "eqClose" (formula "8") (term "0,0,0,1,0"))
               (rule "ifthenelse_true" (formula "8") (term "0,0,1,0"))
               (rule "boolean_equal" (formula "8") (term "0,1,0"))
               (rule "concrete_eq_1" (formula "8") (term "1,0"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "1,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0"))
               (rule "add_literals" (formula "8") (term "1,0,1,1,0"))
               (rule "times_zero_1" (formula "8") (term "0,1,1,0"))
               (rule "qeq_literals" (formula "8") (term "1,1,0"))
               (rule "concrete_and_3" (formula "8") (term "1,0"))
               (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "8") (term "0,1,1"))
               (rule "nnf_notAnd" (formula "8") (term "0,0,1,1"))
               (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,1"))
               (rule "inEqSimp_or_antiSymm0" (formula "8") (term "0,0,1,1"))
               (rule "polySimp_homoEq" (formula "8") (term "0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "1,0,0,0,0,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,0,0,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1,1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0,1,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,1,1"))
               (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,1,1"))
               (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,0,0,1,1"))
               (rule "add_literals" (formula "8") (term "1,0,0,0,0,1,1"))
               (rule "times_zero_1" (formula "8") (term "0,0,0,0,1,1"))
               (rule "eqClose" (formula "8") (term "0,0,0,1,1"))
               (rule "ifthenelse_true_for" (formula "8") (term "0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "1,0,0,0,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,0,0,0,1,1"))
               (rule "add_zero_left" (formula "8") (term "1,0,0,0,1,1"))
               (rule "lemma_charAtLt0" (formula "3") (term "1"))
               (rule "lemma_charAtLt0" (formula "3") (term "0"))
               (rule "eqClose" (formula "3") (matchconstraint "J_0=I_0"))
               (rule "true_left" (formula "3") (matchconstraint "J_0=I_0"))
               (rule "cut_direct" (formula "8") (term "1,0"))
               (branch " CUT: java.lang.String.<nextToCreate> >= 0 TRUE"
                  (rule "concrete_and_3" (formula "9") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "9") (term "0,1") (ifseqformula "1"))
                  (rule "leq_literals" (formula "9") (term "0,0,1"))
                  (rule "concrete_or_1" (formula "9") (term "0,1"))
                  (rule "concrete_and_1" (formula "9") (term "1"))
                  (rule "andRight" (formula "9"))
                  (branch " Case 1"
                     (rule "allRight" (formula "9") (inst "sk=o_0"))
                     (rule "orRight" (formula "9"))
                     (rule "notRight" (formula "9"))
                     (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "1"))
                     (rule "ifthenelse_same_branches" (formula "10") (term "0"))
                     (rule "boolean_equal" (formula "10"))
                     (rule "closeTrue" (formula "10"))
                  )
                  (branch " Case 2"
                     (rule "allRight" (formula "9") (inst "sk=i_0"))
                     (rule "orRight" (formula "9"))
                     (rule "notRight" (formula "9"))
                     (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
                     (rule "ifthenelse_true" (formula "10") (term "0"))
                     (rule "boolean_equal" (formula "10"))
                     (rule "closeTrue" (formula "10"))
                  )
               )
               (branch " CUT: java.lang.String.<nextToCreate> >= 0 FALSE"
                  (rule "concrete_and_4" (formula "9") (term "0"))
                  (rule "concrete_and_2" (formula "9"))
                  (rule "false_right" (formula "9"))
                  (rule "inEqSimp_geqRight" (formula "8"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "lemma_charAtLt0" (formula "2") (term "0"))
                  (rule "cut_direct" (formula "6") (term "1"))
                  (branch " CUT: L_0 = empty TRUE"
                     (rule "concrete_impl_4" (formula "7"))
                     (rule "eqClose" (formula "6") (matchconstraint "L_0=empty"))
                     (rule "true_left" (formula "7"))
                     (rule "cut_direct" (formula "3") (term "0,1"))
                     (branch " CUT: L2_0 = L1_0 TRUE"
                        (rule "concrete_not_1" (formula "4") (term "1"))
                        (rule "eqClose" (formula "3") (matchconstraint "L2_0=L1_0"))
                        (rule "concrete_impl_3" (formula "5"))
                        (rule "true_left" (formula "3") (matchconstraint "L2_0=L1_0"))
                        (rule "double_not" (formula "4"))
                        (rule "eqClose" (formula "4") (matchconstraint "L2_0=L1_0"))
                        (rule "true_left" (formula "4") (matchconstraint "L2_0=L1_0"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                        (rule "eqClose" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "ifthenelse_split" (formula "4") (term "1"))
                        (branch " I_0 <= 0 TRUE"
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                           (rule "leq_literals" (formula "5") (term "0,1"))
                           (rule "ifthenelse_true" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                           (rule "leq_literals" (formula "5") (term "0,1"))
                           (rule "ifthenelse_true" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                           (rule "leq_literals" (formula "5") (term "0,1"))
                           (rule "ifthenelse_true" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                           (rule "leq_literals" (formula "5") (term "0,1"))
                           (rule "ifthenelse_true" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                           (rule "leq_literals" (formula "5") (term "0,1"))
                           (rule "ifthenelse_true" (formula "5") (term "1"))
                           (rule "ifthenelse_split" (formula "5") (term "0"))
                           (branch " J_0 <= 0 TRUE"
                              (rule "eqClose" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " I_1 <= 0 TRUE"
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "nextToCreate_non_negative_2" (formula "1") (ifseqformula "9"))
                                 (rule "less_literals" (formula "1") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " I_1 <= 0 FALSE"
                                 (rule "close" (formula "9") (matchconstraint "I_1=I_0") (ifseqformula "4"))
                              )
                           )
                           (branch " J_0 <= 0 FALSE"
                              (rule "eqClose" (formula "5") (matchconstraint "J_0=0"))
                              (rule "true_left" (formula "5") (matchconstraint "J_0=0"))
                              (rule "close" (formula "9") (matchconstraint "J_0=I_0") (ifseqformula "4"))
                           )
                        )
                        (branch " I_0 <= 0 FALSE"
                           (rule "inEqSimp_leqRight" (formula "8"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0,1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "5") (term "0,0,1"))
                           (rule "concrete_and_2" (formula "5") (term "0,1"))
                           (rule "ifthenelse_false" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0,1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "5") (term "0,0,1"))
                           (rule "concrete_and_2" (formula "5") (term "0,1"))
                           (rule "ifthenelse_false" (formula "5") (term "1"))
                           (rule "lemma_charAtLt0" (formula "5") (term "1"))
                           (rule "eqClose" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "true_left" (formula "5") (matchconstraint "J_0=I_0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0,1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "5") (term "0,0,1"))
                           (rule "concrete_and_2" (formula "5") (term "0,1"))
                           (rule "ifthenelse_false" (formula "5") (term "1"))
                           (rule "ifthenelse_split" (formula "5") (term "0"))
                           (branch " J_0 <= 0 TRUE"
                              (rule "eqClose" (formula "6") (matchconstraint "I_0=0"))
                              (rule "true_left" (formula "6") (matchconstraint "I_0=0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "eqClose" (formula "6") (matchconstraint "I_0=0"))
                              (rule "true_left" (formula "6") (matchconstraint "I_0=0"))
                              (rule "lemma_charAtLt0" (formula "6") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "eqClose" (formula "6") (matchconstraint "I_0=0"))
                              (rule "true_left" (formula "6") (matchconstraint "I_0=0"))
                              (rule "lemma_charAtLt0" (formula "6") (term "1"))
                              (rule "leq_literals" (formula "6") (term "0,1"))
                              (rule "ifthenelse_true" (formula "6") (term "1"))
                              (rule "eqClose" (formula "6") (matchconstraint "I_0=0"))
                              (rule "true_left" (formula "6") (matchconstraint "I_0=0"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch " I_1 <= 0 TRUE"
                                 (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "4"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "4") (term "0"))
                                 (rule "nextToCreate_non_negative_2" (formula "2") (ifseqformula "10"))
                                 (rule "less_literals" (formula "2") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch " I_1 <= 0 FALSE"
                                 (rule "close" (formula "10") (matchconstraint "J_0=I_1") (ifseqformula "5"))
                              )
                           )
                           (branch " J_0 <= 0 FALSE"
                              (rule "eqClose" (formula "5") (matchconstraint "J_0=I_0"))
                              (rule "true_left" (formula "5") (matchconstraint "J_0=I_0"))
                              (rule "inEqSimp_leqRight" (formula "9"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "lemma_charAtLt0" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "6") (term "0,0,1"))
                              (rule "concrete_and_2" (formula "6") (term "0,1"))
                              (rule "ifthenelse_false" (formula "6") (term "1"))
                              (rule "eqClose" (formula "6") (matchconstraint "J_0=I_0"))
                              (rule "true_left" (formula "6") (matchconstraint "J_0=I_0"))
                              (rule "lemma_charAtLt0" (formula "6") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "eqClose" (formula "6") (matchconstraint "J_0=I_0"))
                              (rule "true_left" (formula "6") (matchconstraint "J_0=I_0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch " I_1 <= 0 TRUE"
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "nextToCreate_non_negative_2" (formula "3") (ifseqformula "10"))
                                 (rule "less_literals" (formula "3") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                              (branch " I_1 <= 0 FALSE"
                                 (rule "inEqSimp_leqRight" (formula "10"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "lemma_charAtLt0" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "lemma_charAtLt0" (formula "7") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,1"))
                                 (rule "concrete_and_2" (formula "7") (term "0,1"))
                                 (rule "ifthenelse_false" (formula "7") (term "1"))
                                 (rule "eqClose" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "true_left" (formula "7") (matchconstraint "J_0=I_0"))
                                 (rule "nextToCreate_non_negative_2" (formula "4") (ifseqformula "10"))
                                 (rule "less_literals" (formula "4") (term "0"))
                                 (rule "ifthenelse_true_for" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                     )
                     (branch " CUT: L2_0 = L1_0 FALSE"
                        (rule "concrete_not_2" (formula "3") (term "1"))
                        (rule "eqClose" (formula "8") (matchconstraint "L2_0=L1_0"))
                        (rule "concrete_impl_4" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "closeTrue" (formula "7") (matchconstraint "L2_0=L1_0"))
                     )
                  )
                  (branch " CUT: L_0 = empty FALSE"
                     (rule "concrete_impl_3" (formula "6"))
                     (rule "eqClose" (formula "8") (matchconstraint "L_0=empty"))
                     (rule "closeTrue" (formula "8") (matchconstraint "L_0=empty"))
                  )
               )
            )
            (branch " Case 2"
               (rule "andRight" (formula "3") (userinteraction))
               (branch " Case 1"
                  (rule "boolean_equal" (formula "3"))
                  (rule "closeTrue" (formula "3"))
               )
               (branch " Case 2"
                  (rule "notRight" (formula "3") (userinteraction))
                  (rule "close" (formula "3") (ifseqformula "1") (userinteraction))
               )
            )
         )
         (branch " Case 2"
            (rule "inInt" (formula "3") (term "1"))
            (rule "inInt" (formula "3") (term "0"))
            (rule "eq_and" (formula "3"))
            (rule "closeTrue" (formula "3"))
         )
      )
      (branch " Case 2"
         (rule "andRight" (formula "3") (userinteraction))
         (branch " Case 1"
            (rule "castDelInt" (formula "3") (term "1,0"))
            (rule "castDelInt" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (rule "concrete_and_1" (formula "3"))
            (rule "castDelInt" (formula "3") (term "0"))
            (rule "qeq_literals" (formula "3"))
            (rule "closeTrue" (formula "3"))
         )
         (branch " Case 2"
            (rule "castDelInt" (formula "3") (term "0"))
            (rule "inEqSimp_leqRight" (formula "3"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "cl_lengthCons" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "cl_lengthCons" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "times_zero_2" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "cl_lengthCons" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "cl_lengthCons" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "cl_lengthCons" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "cl_lengthEmpty" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch " Post"
      (rule "blockEmpty" (formula "3") (term "1,17,12") (userinteraction))
      (builtin "Update Simplification" (formula "3"))
      (rule "assignment" (formula "3") (term "19,1") (userinteraction))
      (builtin "Update Simplification" (formula "3"))
      (rule "emptyModality" (formula "3") (term "18,1") (userinteraction))
      (builtin "Update Simplification" (formula "3"))
      (rule "impRight" (formula "3") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "notLeft" (formula "3") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "ifthenelse_split" (formula "10") (term "0,0") (userinteraction))
      (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result TRUE"
         (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
         (branch " result_0 = result TRUE"
            (rule "castDelInt" (formula "7") (term "0,1") (userinteraction))
            (rule "castDelInt" (formula "7") (term "1,1") (userinteraction))
            (rule "ifthenelse_split" (formula "7") (term "2,1") (userinteraction))
            (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result TRUE"
               (rule "false_to_not_true" (formula "4") (userinteraction))
               (rule "notLeft" (formula "4"))
               (rule "repository_object_non_null" (formula "11"))
               (rule "false_right" (formula "11"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "6"))
               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "5"))
               (rule "ifthenelse_true" (formula "4") (term "0"))
               (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "10"))
               (rule "concrete_or_4" (formula "3"))
               (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "5"))
               (rule "ifthenelse_true" (formula "3") (term "0"))
               (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "4"))
               (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "1"))
               (rule "ifthenelse_true" (formula "8") (term "0"))
               (rule "boolean_equal" (formula "8"))
               (rule "closeTrue" (formula "8"))
            )
            (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result FALSE"
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "7") (userinteraction))
               (rule "cl_substringI" (formula "13") (term "0,0") (userinteraction))
               (rule "ifthenelse_split" (formula "13") (term "0,0") (userinteraction))
               (branch " 1 >  0 TRUE"
                  (rule "sub_literals" (formula "14") (term "0,0,0") (userinteraction))
                  (rule "sub_literals" (formula "14") (term "1,0,0") (userinteraction))
                  (rule "cl_substring0" (formula "14") (term "0,0") (userinteraction))
                  (rule "ifthenelse_split" (formula "14") (term "0,0") (userinteraction))
                  (branch " 2 >  0 TRUE"
                     (rule "cl_substring0" (formula "15") (term "1,0,0") (userinteraction))
                     (rule "ifthenelse_split" (formula "15") (term "1,0,0") (userinteraction))
                     (branch " 2 - 1 >  0 TRUE"
                        (rule "sub_literals" (formula "16") (term "0,1,1,1,0,0") (userinteraction))
                        (rule "sub_literals" (formula "16") (term "1,1,1,0,0") (userinteraction))
                        (rule "lemma_substringII" (formula "16") (term "1,1,0,0") (userinteraction))
                        (rule "cl_lengthCons" (formula "16") (term "0") (userinteraction))
                        (rule "cl_lengthCons" (formula "16") (term "0,0") (userinteraction))
                        (rule "cl_lengthEmpty" (formula "16") (term "0,0,0") (userinteraction))
                        (rule "add_zero_left" (formula "16") (term "0,0"))
                        (rule "add_literals" (formula "16") (term "0"))
                        (rule "eqClose" (formula "16"))
                        (rule "closeTrue" (formula "16"))
                     )
                     (branch " 2 - 1 >  0 FALSE"
                        (rule "sub_literals" (formula "15") (term "0"))
                        (rule "close" (formula "15") (ifseqformula "2"))
                     )
                  )
                  (branch " 2 >  0 FALSE"
                     (rule "greater_literals" (formula "14"))
                     (rule "closeTrue" (formula "14"))
                  )
               )
               (branch " 1 >  0 FALSE"
                  (rule "greater_literals" (formula "13"))
                  (rule "closeTrue" (formula "13"))
               )
            )
         )
         (branch " result_0 = result FALSE"
            (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
            (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
               (rule "castDelInt" (formula "7") (term "0,1") (userinteraction))
               (rule "castDelInt" (formula "7") (term "1,1") (userinteraction))
               (rule "ifthenelse_split" (formula "7") (term "2,1") (userinteraction))
               (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result TRUE"
                  (rule "false_to_not_true" (formula "4"))
                  (rule "notLeft" (formula "4"))
                  (rule "repository_object_non_null" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "6"))
                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "close" (formula "9") (ifseqformula "4"))
               )
               (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result FALSE"
                  (rule "lemma_lengthNEq" (inst "l2=substring(1,
          3,
          cons(C(2(7(#))),
               cons(C(7(9(#))),
                    cons(C(8(0(1(#)))),
                         cons(C(8(0(1(#)))),
                              cons(C(1(1(1(#)))),
                                   empty))))))") (inst "l1=cons(C(2(7(#))),
     cons(C(7(9(#))),
          cons(C(8(0(1(#)))),
               cons(C(8(0(1(#)))),
                    cons(C(1(1(1(#)))), empty)))))") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch " Case 1"
                     (rule "notRight" (formula "10") (userinteraction))
                     (rule "cl_substringI" (formula "1") (term "0,1") (userinteraction))
                     (rule "ifthenelse_split" (formula "1") (term "0,1") (userinteraction))
                     (branch " 1 >  0 TRUE"
                        (rule "sub_literals" (formula "2") (term "0,0,1") (userinteraction))
                        (rule "sub_literals" (formula "2") (term "1,0,1") (userinteraction))
                        (rule "cl_substring0" (formula "2") (term "0,1") (userinteraction))
                        (rule "ifthenelse_split" (formula "2") (term "0,1") (userinteraction))
                        (branch " 2 >  0 TRUE"
                           (rule "cl_substring0" (formula "3") (term "1,0,1") (userinteraction))
                           (rule "ifthenelse_split" (formula "3") (term "1,0,1") (userinteraction))
                           (branch " 2 - 1 >  0 TRUE"
                              (rule "sub_literals" (formula "4") (term "0,1,1,1,0,1") (userinteraction))
                              (rule "sub_literals" (formula "4") (term "1,1,1,0,1") (userinteraction))
                              (rule "lemma_substringII" (formula "4") (term "1,1,0,1") (userinteraction))
                              (rule "cl_lengthCons" (formula "4") (term "1") (userinteraction))
                              (rule "polySimp_addComm0" (formula "4") (term "1"))
                              (rule "cl_lengthCons" (formula "4") (term "0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0"))
                              (rule "add_zero_left" (formula "4") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "cl_lengthCons" (formula "4") (term "1"))
                              (rule "polySimp_addComm0" (formula "4") (term "1"))
                              (rule "cl_lengthCons" (formula "4") (term "0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0"))
                              (rule "add_zero_left" (formula "4") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "cl_lengthEmpty" (formula "4") (term "1"))
                              (rule "cl_lengthCons" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "cl_lengthCons" (formula "4") (term "0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "cl_lengthCons" (formula "4") (term "0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "cl_lengthEmpty" (formula "4") (term "0"))
                              (rule "equal_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch " 2 - 1 >  0 FALSE"
                              (rule "cl_lengthCons" (formula "3") (term "1"))
                              (rule "polySimp_addComm0" (formula "3") (term "1"))
                              (rule "cl_lengthCons" (formula "3") (term "0"))
                              (rule "polySimp_homoEq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "cl_lengthEmpty" (formula "3") (term "1"))
                              (rule "cl_lengthCons" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "cl_lengthCons" (formula "3") (term "0"))
                              (rule "polySimp_homoEq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "cl_lengthCons" (formula "3") (term "0"))
                              (rule "polySimp_homoEq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "cl_lengthCons" (formula "3") (term "0"))
                              (rule "polySimp_homoEq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "cl_lengthEmpty" (formula "3") (term "0"))
                              (rule "equal_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                        (branch " 2 >  0 FALSE"
                           (rule "cl_lengthEmpty" (formula "2") (term "1"))
                           (rule "cl_lengthCons" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "cl_lengthCons" (formula "2") (term "0"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "cl_lengthCons" (formula "2") (term "0"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "cl_lengthCons" (formula "2") (term "0"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "cl_lengthCons" (formula "2") (term "0"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "cl_lengthEmpty" (formula "2") (term "0"))
                           (rule "equal_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch " 1 >  0 FALSE"
                        (rule "greater_literals" (formula "11"))
                        (rule "closeTrue" (formula "11"))
                     )
                  )
                  (branch " Case 2"
                     (rule "notLeft" (formula "1") (userinteraction))
                     (rule "close" (formula "10") (ifseqformula "7") (userinteraction))
                  )
               )
            )
            (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
               (rule "castDelInt" (formula "6") (term "0,1") (userinteraction))
               (rule "castDelInt" (formula "6") (term "1,1") (userinteraction))
               (rule "ifthenelse_split" (formula "6") (term "2,1") (userinteraction))
               (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result TRUE"
                  (rule "false_to_not_true" (formula "4"))
                  (rule "notLeft" (formula "4"))
                  (rule "repository_object_non_null" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "5"))
                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "close" (formula "8") (ifseqformula "4"))
               )
               (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result FALSE"
                  (rule "false_to_not_true" (formula "4"))
                  (rule "close" (formula "9") (ifseqformula "1"))
               )
            )
         )
      )
      (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result FALSE"
         (rule "ifthenelse_split" (formula "5") (term "0") (userinteraction))
         (branch " result_0 = result TRUE"
            (rule "castDelInt" (formula "6") (term "0,1") (userinteraction))
            (rule "castDelInt" (formula "6") (term "1,1") (userinteraction))
            (rule "ifthenelse_split" (formula "6") (term "2,1") (userinteraction))
            (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result TRUE"
               (rule "closeAntec" (formula "6") (ifseqformula "12") (userinteraction))
            )
            (branch "   java.lang.String::<get>(java.lang.String.<nextToCreate>)
= result FALSE"
               (rule "orLeft" (formula "2") (userinteraction))
               (branch "   if (result_0 = result)
      then (created_0(result))
      else (if (  result_0
                  = java.lang.String::<get>(java.lang.String.<nextToCreate>))
                 then (TRUE)
                 else (result_0.<created>))
= TRUE"
                  (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                  (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "5") (userinteraction))
                     (rule "eqSymm" (formula "11") (userinteraction))
                     (rule "close" (formula "11") (ifseqformula "2") (userinteraction))
                  )
                  (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                     (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
                     (branch " result_0 = result TRUE"
                        (rule "eqSymm" (formula "4") (userinteraction))
                        (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4") (userinteraction))
                        (opengoal "   inReachableState -> \\<{        java.lang.String s = \"Hallo\";        java.lang.String t = s.substring(1,3);      }\\> length(content(s)) = 2 ")
                     )
                     (branch " result_0 = result FALSE"
                        (rule "ifthenelse_to_or_left" (formula "3") (userinteraction))
                        (rule "andLeft" (formula "3") (userinteraction))
                        (rule "orLeft" (formula "3") (userinteraction))
                        (branch " !  result_0
 = java.lang.String::<get>(java.lang.String.<nextToCreate>)"
                           (rule "notLeft" (formula "3") (userinteraction))
                           (rule "orLeft" (formula "3") (userinteraction))
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>)"
                              (rule "close" (formula "9") (ifseqformula "3") (userinteraction))
                           )
                           (branch " result_0.<created> = TRUE"
                              (rule "false_to_not_true" (formula "2"))
                              (rule "close" (formula "8") (ifseqformula "4"))
                           )
                        )
                        (branch " TRUE = TRUE"
                           (rule "orLeft" (formula "4") (userinteraction))
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>)"
                              (rule "closeAntec" (formula "4") (ifseqformula "10") (userinteraction))
                           )
                           (branch " result_0.<created> = TRUE"
                              (rule "close" (formula "9") (ifseqformula "5") (userinteraction))
                           )
                        )
                     )
                  )
               )
               (branch " result_0 = null"
                  (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
                  (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                     (rule "boolean_not_equal_1" (formula "4") (userinteraction))
                     (rule "closeFalse" (formula "4") (userinteraction))
                  )
                  (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                     (rule "ifthenelse_split" (formula "4") (term "0") (userinteraction))
                     (branch " result_0 = result TRUE"
                        (rule "closeAntec" (formula "2") (ifseqformula "10") (userinteraction))
                     )
                     (branch " result_0 = result FALSE"
                        (rule "closeAntec" (formula "5") (ifseqformula "9") (userinteraction))
                     )
                  )
               )
            )
         )
         (branch " result_0 = result FALSE"
            (rule "ifthenelse_split" (formula "4") (term "0") (userinteraction))
            (branch " result_0 = result TRUE"
               (rule "closeAntec" (formula "4") (ifseqformula "9") (userinteraction))
            )
            (branch " result_0 = result FALSE"
               (rule "ifthenelse_split" (formula "4") (term "0") (userinteraction))
               (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                  (rule "orLeft" (formula "2") (userinteraction))
                  (branch "   if (result_0 = result)
      then (created_0(result))
      else (if (  result_0
                  = java.lang.String::<get>(java.lang.String.<nextToCreate>))
                 then (TRUE)
                 else (result_0.<created>))
= TRUE"
                     (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                     (branch " result_0 = result TRUE"
                        (rule "closeAntec" (formula "2") (ifseqformula "10") (userinteraction))
                     )
                     (branch " result_0 = result FALSE"
                        (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                        (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                           (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                              (rule "boolean_not_equal_1" (formula "2") (userinteraction))
                              (rule "closeFalse" (formula "2") (userinteraction))
                           )
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                              (rule "closeAntec" (formula "3") (ifseqformula "8") (userinteraction))
                           )
                        )
                        (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                           (rule "closeAntec" (formula "4") (ifseqformula "9") (userinteraction))
                        )
                     )
                  )
                  (branch " result_0 = null"
                     (rule "close" (formula "10") (ifseqformula "2") (userinteraction))
                  )
               )
               (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                  (rule "orLeft" (formula "2") (userinteraction))
                  (branch "   if (result_0 = result)
      then (created_0(result))
      else (if (  result_0
                  = java.lang.String::<get>(java.lang.String.<nextToCreate>))
                 then (TRUE)
                 else (result_0.<created>))
= TRUE"
                     (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                     (branch " result_0 = result TRUE"
                        (rule "closeAntec" (formula "2") (ifseqformula "10") (userinteraction))
                     )
                     (branch " result_0 = result FALSE"
                        (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                        (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                           (rule "closeAntec" (formula "2") (ifseqformula "9") (userinteraction))
                        )
                        (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                           (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) TRUE"
                              (rule "boolean_not_equal_1" (formula "3") (userinteraction))
                              (rule "closeFalse" (formula "3") (userinteraction))
                           )
                           (branch "   result_0
= java.lang.String::<get>(java.lang.String.<nextToCreate>) FALSE"
                              (rule "false_to_not_true" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "close" (formula "6") (ifseqformula "2"))
                           )
                        )
                     )
                  )
                  (branch " result_0 = null"
                     (rule "close" (formula "10") (ifseqformula "2") (userinteraction))
                  )
               )
            )
         )
      )
   )
   (branch " Exceptional Post"
      (builtin "Update Simplification" (formula "3"))
      (rule "impRight" (formula "3") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "3") (userinteraction))
      (rule "andLeft" (formula "3") (userinteraction))
      (rule "andLeft" (formula "3") (userinteraction))
      (rule "notLeft" (formula "4") (userinteraction))
      (rule "andLeft" (formula "3") (userinteraction))
      (rule "blockThrow" (formula "10") (term "18") (userinteraction))
      (rule "throwDiamond" (formula "10") (term "18") (userinteraction))
      (builtin "Update Simplification" (formula "10"))
      (rule "false_to_not_true" (formula "3"))
      (rule "false_right" (formula "10"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "4"))
      (rule "notLeft" (formula "3"))
      (rule "close" (formula "7") (ifseqformula "5"))
   )
)
(branch " Null Reference (s_1 = null)"
   (builtin "Update Simplification" (formula "1"))
   (rule "repository_object_non_null" (formula "1") (userinteraction))
   (rule "closeFalse" (formula "1"))
)
)

}
