\settings {
"#Proof-Settings-Config-File
#Mon May 11 16:35:36 CEST 2009
[General]SoundNotification=false
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[Libraries]Default=acc.key-false, stringRules.key-false, /Users/geilmann/.key/libraries/deprecatedRules.key-false, /Users/geilmann/.key/libraries/acc.key-false, /Users/geilmann/.key/libraries/stringRules.key-false, deprecatedRules.key-false, /Users/geilmann/Documents/Studienarbeit/./stringsTheory.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=throughout-throughout\:toutOn , transactions-transactions\:transactionsOn , assertions-assertions\:on , intRules-intRules\:arithmeticSemanticsIgnoringOF , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=false
[View]HideClosedSubtrees=false
[Choice]Choices=throughout-throughout\:toutOn-throughout\:toutOff , transactions-transactions\:transactionsOn-transactions\:transactionsOff , assertions-assertions\:on-assertions\:off-assertions\:safe , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , programRules-programRules\:Java-programRules\:ODL , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff-javacard\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\includeFile "stringsTheory.key";

\contracts {
    /********************************/
    /* Contracts for String methods */
    /********************************/

    //
    // length
    //
    lengthContr {
        \programVariables {
	    int result;
	    java.lang.String s;
	}
	true -> \<{ result = s.length()@java.lang.String; }\>(result = length(content(s)))
	\modifies { }
	\displayname "Length Normal"
    };

    //
    // charAt
    //
    charAtNormal {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.charAt(i)@java.lang.String;
	}
	}\>(exc = null & result = charAt(i,content(s)))
	\modifies { }
	\displayname "CharAt Normal"
    };
    charAtExc {
    	\programVariables {
	    char result;
	    java.lang.String s;
	    int i;
	}
	(i < 0 | i >= length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
	    result = s.charAt(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "CharAt Exceptional: IndexOutOfBounds"
    };

    //
    // concat
    //
    concatNormal {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 != null) ->
	\<{
		result = s1.concat(s2)@java.lang.String;
	}\>(
		java.lang.Object::<created>@pre(result) = FALSE
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = concat(content(s1),content(s2)) )
	\modifies {
		    result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object)
	}
	\displayname "Concat Normal"
    };		
    concatExc {
        \programVariables {
	    java.lang.String result, s1, s2;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.concat(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Concat Exceptional: Null Pointer"
    };

    //
    // substring
    //
    substringNormal {
        \programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(j>=i & i >= 0 & j <= length(content(s)))
	->
	\<{
		result = s.substring(i,j)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,j,content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substringExc {
    	\programVariables {
	    java.lang.String result, s;
	    int i, j;
	}
	(i>j | i<0 | j > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i,j)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    substring2Normal {
        \programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i >= 0 & i < length(content(s)))
	->
	\<{
		result = s.substring(i)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = substring(i,length(content(s)),content(s)))
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "Substring Normal"
    };

    substring2Exc {
    	\programVariables {
	    java.lang.String result, s;
	    int i;
	}
	(i<0 | i > length(content(s)))
	->
	\<{
	#catchAll(java.lang.Exception exc) {
		result = s.substring(i)@java.lang.String;
	}
	}\>(exc != null & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
	\modifies { }
	\displayname "Substring Exceptional: IndexOutOfBounds"
    };

    compareToNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 != null)
	->
	\<{
		result = s1.compareTo(s2)@java.lang.String;
	}\>( result = \ifEx int i; (  i < length(content(s1))
	     	      	            & i < length(content(s2))
				    & charAt(i,content(s1)) != charAt(i,content(s2)) )
	     	      \then (charAt(i,content(s1)) - charAt(i,content(s2)))
	     	      \else (length(content(s1)) - length(content(s2))) )
	\modifies { }
	\displayname "compareTo Normal"
    };

    compareToExc {
        \programVariables {
	    java.lang.String s1, s2;
	    int result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.compareTo(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "compareTo Exceptional: Null Pointer"
    };

    endsWithNormal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.endsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(length(content(s1))-length(content(s2)),
					length(content(s1)),
					content(s1)) = content(s2) )
	\modifies { }
	\displayname "endsWith Normal"
    };

    endsWithExc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.endsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "endsWith Exceptional: Null Pointer"
    };

    startsWith1Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2)@java.lang.String;
	}\>(result = TRUE <-> substring(0,
					length(content(s2)),
					content(s1)) = content(s2))
	\modifies { }
	\displayname "startsWith Normal"
    };

    startsWith1Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    startsWith2Normal {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 != null)
	->
	\<{
		result = s1.startsWith(s2, i)@java.lang.String;
	}\>(result = TRUE <-> ((i >= 0) & (i <= length(content(s1))) & substring(i,
		     	      	       	 				 	 length(content(s2))+i,
										 content(s1)) = content(s2)))
	\modifies { }
	\displayname "startsWith Normal"
    };

//TODO NullPointerException when i < 0 or i > length(s1)?
    startsWith2Exc {
        \programVariables {
	    java.lang.String s1, s2;
	    boolean result;
	    int i;
	}
	(s2 = null) -> \<{
	#catchAll(java.lang.Exception exc) {
		result = s1.startsWith(s2, i)@java.lang.String;
	}
	}\>(exc != null & java.lang.NullPointerException::instance(exc) = TRUE)
	\modifies { }
	\displayname "startsWith Exceptional: Null Pointer"
    };

    replaceNormal {
        \programVariables {
	    java.lang.String s, result;
	    char c1, c2;
	}
	true
	->
	\<{
		result = s.replace(c1,c2)@java.lang.String;
	}\>(
                java.lang.Object::<created>@pre(result) = FALSE // new object created...
		& result.<created>@(java.lang.Object) = TRUE
		& result != null
		& content(result) = replace(c1,c2,content(s)) )
	\modifies { result,
		    content(result),
		    result.<nextToCreate>@(java.lang.String),
		    result.<created>@(java.lang.Object),
		    result.<initialized>@(java.lang.Object),
		    result.<transient>@(java.lang.Object) }
	\displayname "replace Normal"
    };

    indexOfNormal {
        \programVariables {
	    java.lang.String s;
	    int c;
	    int result;
	}
	true
	->
	\<{ 
              result = s.indexOf(c)@java.lang.String;
	}\>(result = indexOf((jchar)c,0,content(s)))
	\modifies { }
	\displayname "indexOf Normal"
    };

}

\problem {
   inReachableState
-> \<{
       java.lang.String s = "Hallo";
       int i = s.indexOf('l');
     }\> i = 2

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "e973f0d32d60b7e3425e5b3833e7c259d25efa83"))

(autoModeTime "28284")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "variableDeclarationAssign" (formula "2"))
(rule "variableDeclaration" (formula "2") (newnames "s"))
(rule "stringAssignment" (formula "2"))
(builtin "Update Simplification" (formula "2"))
(rule "polySimp_addComm0" (formula "2") (term "1"))
(rule "variableDeclarationAssign" (formula "2") (term "10"))
(rule "variableDeclaration" (formula "2") (term "10") (newnames "i_1"))
(rule "charLiteral_to_int" (formula "2") (term "0,1,1,9"))
(rule "charLiteral_to_int" (formula "2") (term "0,9"))
(rule "charLiteral_to_int" (formula "2") (term "0,1,1,1,1,9"))
(rule "charLiteral_to_int" (formula "2") (term "0,1,1,1,9"))
(rule "charLiteral_to_int" (formula "2") (term "0,1,9"))
(rule "methodCallWithAssignment" (formula "2") (term "10") (inst "#v0=j"))
(branch " Normal Execution (s != null)"
   (builtin "Update Simplification" (formula "2"))
   (rule "repository_object_non_null" (formula "2"))
   (rule "false_right" (formula "2"))
   (rule "variableDeclaration" (formula "2") (term "10") (newnames "j"))
   (rule "variableDeclarationAssign" (formula "2") (term "10"))
   (rule "variableDeclaration" (formula "2") (term "10") (newnames "arg0"))
   (rule "assignment" (formula "2") (term "10"))
   (builtin "Update Simplification" (formula "2"))
   (rule "charLiteral_to_int" (formula "2") (term "0"))
   (rule "nextToCreate_non_negative" (formula "2") (term "0,1") (ifseqformula "1"))
   (builtin "Use Operation Contract" (formula "3") (term "11") (newnames "arg0_1") (contract "indexOfNormal;;"))
   (branch " Pre"
      (builtin "Update Simplification" (formula "3"))
      (rule "boolean_equal" (formula "3") (term "0,1,0"))
      (rule "inInt" (formula "3") (term "1"))
      (rule "concrete_and_1" (formula "3") (term "1,0"))
      (rule "concrete_and_3" (formula "3"))
      (rule "repository_object_non_null" (formula "3") (term "0,1"))
      (rule "concrete_not_2" (formula "3") (term "1"))
      (rule "concrete_and_3" (formula "3"))
      (rule "inReachableStateRewrite" (formula "3") (ifseqformula "2"))
      (builtin "Update Simplification" (formula "3"))
      (rule "orRight" (formula "3"))
      (rule "identical_object_equal_index" (formula "4") (term "1,0,1,1,0,1,0"))
      (rule "identical_object_equal_index" (formula "4") (term "0,0,0,1,0,1,0"))
      (rule "identical_object_equal_index" (formula "4") (term "0,0,1,0,1,0,1"))
      (rule "castDelInt" (formula "4") (term "1,1,0,0,1,1,0,1,0"))
      (rule "castDelInt" (formula "4") (term "1,1,1"))
      (rule "castDelInt" (formula "4") (term "1,1,0,0,1,0,1"))
      (rule "castDelInt" (formula "4") (term "0,0,0,1"))
      (rule "eqSymm" (formula "4") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0,1"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,0,1"))
      (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1,1"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,1,1"))
      (rule "add_literals" (formula "4") (term "1,1,0,1,1"))
      (rule "times_zero_1" (formula "4") (term "1,0,1,1"))
      (rule "add_zero_right" (formula "4") (term "0,1,1"))
      (rule "qeq_literals" (formula "4") (term "1,1"))
      (rule "concrete_and_3" (formula "4") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,1"))
      (rule "mul_literals" (formula "4") (term "1,0,1"))
      (rule "inEqSimp_subsumption1" (formula "4") (term "0,1") (ifseqformula "1"))
      (rule "leq_literals" (formula "4") (term "0,0,1"))
      (rule "concrete_or_1" (formula "4") (term "0,1"))
      (rule "concrete_and_1" (formula "4") (term "1"))
      (rule "elim_forall8" (formula "4") (term "1,0"))
      (rule "eqClose" (formula "4") (term "0,0,0,1,0"))
      (rule "ifthenelse_true" (formula "4") (term "0,0,1,0"))
      (rule "boolean_equal" (formula "4") (term "0,1,0"))
      (rule "concrete_eq_1" (formula "4") (term "1,0"))
      (rule "elim_exists4" (formula "4") (term "1,0"))
      (rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "4") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0"))
      (rule "add_literals" (formula "4") (term "1,0,1,0"))
      (rule "times_zero_1" (formula "4") (term "0,1,0"))
      (rule "qeq_literals" (formula "4") (term "1,0"))
      (rule "concrete_and_3" (formula "4") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "0,1"))
      (rule "nnf_imp2or" (formula "4") (term "0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,1"))
      (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,1"))
      (rule "inEqSimp_or_antiSymm0" (formula "4") (term "0,0,1"))
      (rule "polySimp_homoEq" (formula "4") (term "0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "1,0,0,0,0,1"))
      (rule "add_literals" (formula "4") (term "0,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0,1"))
      (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,1"))
      (rule "add_zero_left" (formula "4") (term "0,0,0,0,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0,0,1"))
      (rule "add_literals" (formula "4") (term "1,0,0,0,0,1"))
      (rule "times_zero_1" (formula "4") (term "0,0,0,0,1"))
      (rule "eqClose" (formula "4") (term "0,0,0,1"))
      (rule "ifthenelse_true_for" (formula "4") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "1,0,0,0,1"))
      (rule "add_literals" (formula "4") (term "0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "4") (term "1,0,0,0,1"))
      (rule "andRight" (formula "4"))
      (branch " Case 1"
         (rule "allRight" (formula "4") (inst "sk=o_0"))
         (rule "orRight" (formula "4"))
         (rule "notRight" (formula "4"))
         (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "1"))
         (rule "ifthenelse_same_branches" (formula "5") (term "0"))
         (rule "boolean_equal" (formula "5"))
         (rule "closeTrue" (formula "5"))
      )
      (branch " Case 2"
         (rule "allRight" (formula "4") (inst "sk=i_0"))
         (rule "orRight" (formula "4"))
         (rule "notRight" (formula "4"))
         (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
         (rule "ifthenelse_true" (formula "5") (term "0"))
         (rule "boolean_equal" (formula "5"))
         (rule "closeTrue" (formula "5"))
      )
   )
   (branch " Post"
      (builtin "Update Simplification" (formula "3"))
      (rule "blockEmpty" (formula "3") (term "10,1") (userinteraction))
      (rule "assignment" (formula "3") (term "10,1") (userinteraction))
      (builtin "Update Simplification" (formula "3"))
      (rule "emptyModality" (formula "3") (term "10,1") (userinteraction))
      (builtin "Update Simplification" (formula "3"))
      (rule "impRight" (formula "3") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "4") (userinteraction))
      (rule "inInt" (formula "3") (userinteraction))
      (rule "true_left" (formula "3") (userinteraction))
      (rule "cl_indexOf" (formula "3") (term "1") (inst "iv=_var205") (userinteraction))
      (rule "ifExthenelse1_split_int" (formula "3") (term "1") (inst "intSk=_var205_0") (userinteraction))
      (branch " Case 1"
         (rule "andLeft" (formula "3") (userinteraction))
         (rule "andLeft" (formula "3") (userinteraction))
         (rule "andLeft" (formula "3") (userinteraction))
         (rule "cl_lengthCons" (formula "4") (term "1") (userinteraction))
         (rule "cl_lengthCons" (formula "4") (term "0,1") (userinteraction))
         (rule "cl_lengthCons" (formula "4") (term "0,0,1") (userinteraction))
         (rule "cl_lengthCons" (formula "4") (term "0,0,0,1") (userinteraction))
         (rule "cl_lengthCons" (formula "4") (term "0,0,0,0,1") (userinteraction))
         (rule "cl_lengthEmpty" (formula "4") (term "0,0,0,0,0,1") (userinteraction))
         (rule "add_zero_left" (formula "4") (term "0,0,0,0,1") (userinteraction))
         (rule "add_literals" (formula "4") (term "0,0,0,1") (userinteraction))
         (rule "add_literals" (formula "4") (term "0,0,1") (userinteraction))
         (rule "add_literals" (formula "4") (term "0,1") (userinteraction))
         (rule "add_literals" (formula "4") (term "1") (userinteraction))
         (rule "cut" (inst "cutFormula=  !result_0 = 0
& !result_0 = 1
& !result_0 = 3
& !result_0 = 4") (userinteraction))
         (branch " CUT:   !result_0 = 0
& !result_0 = 1
& !result_0 = 3
& !result_0 = 4 TRUE"
            (rule "andLeft" (formula "1") (userinteraction))
            (rule "andLeft" (formula "1") (userinteraction))
            (rule "andLeft" (formula "1") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "eq_and" (formula "6") (term "0,0,0,0"))
            (rule "castDelInt" (formula "6") (term "0,1,1,0,0"))
            (rule "castDelInt" (formula "5") (term "0,1"))
            (rule "castDelInt" (formula "6") (term "1,1,0,0"))
            (rule "castDelInt" (formula "5") (term "1"))
            (rule "eqSymm" (formula "7"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1,0,0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "7"))
            (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
            (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "7"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "10"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "10") (ifseqformula "4"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "qeq_literals" (formula "10") (term "0"))
            (rule "concrete_and_2" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "12"))
            (rule "add_zero_right" (formula "3") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
            (rule "concrete_and_2" (formula "12"))
            (rule "false_right" (formula "12"))
            (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "11"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "3"))
            (rule "mul_literals" (formula "11") (term "1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "leq_literals" (formula "11") (term "0"))
            (rule "concrete_and_2" (formula "11"))
            (rule "false_right" (formula "11"))
            (rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "10"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "10") (ifseqformula "4"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "qeq_literals" (formula "10") (term "0"))
            (rule "concrete_and_2" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "10"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "10") (ifseqformula "4"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "qeq_literals" (formula "10") (term "0"))
            (rule "concrete_and_2" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (rule "concrete_and_2" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch " CUT:   !result_0 = 0
& !result_0 = 1
& !result_0 = 3
& !result_0 = 4 FALSE"
            (rule "andRight" (formula "10") (userinteraction))
            (branch " Case 1"
               (rule "andRight" (formula "10") (userinteraction))
               (branch " Case 1"
                  (rule "andRight" (formula "10") (userinteraction))
                  (branch " Case 1"
                     (rule "notRight" (formula "10") (userinteraction))
                     (rule "eqSymm" (formula "8") (userinteraction))
                     (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8") (userinteraction))
                     (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "cl_charAt0" (formula "6") (term "0") (userinteraction))
                     (rule "castDelInt" (formula "6") (term "0,1"))
                     (rule "castDelInt" (formula "6") (term "0"))
                     (rule "castDelInt" (formula "6") (term "1"))
                     (rule "equal_literals" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
                  (branch " Case 2"
                     (rule "eqSymm" (formula "7") (userinteraction))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7") (userinteraction))
                     (rule "notRight" (formula "10") (userinteraction))
                     (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "cl_charAtI" (formula "6") (term "0") (userinteraction))
                     (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
                     (branch " 1 >  0 TRUE"
                        (rule "sub_literals" (formula "7") (term "0,0") (userinteraction))
                        (rule "cl_charAt0" (formula "7") (term "0") (userinteraction))
                        (rule "castDelInt" (formula "7") (term "0,1"))
                        (rule "castDelInt" (formula "7") (term "0"))
                        (rule "castDelInt" (formula "7") (term "1"))
                        (rule "equal_literals" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch " 1 >  0 FALSE"
                        (rule "greater_literals" (formula "11"))
                        (rule "closeTrue" (formula "11"))
                     )
                  )
               )
               (branch " Case 2"
                  (rule "notRight" (formula "10") (userinteraction))
                  (rule "eqSymm" (formula "8") (userinteraction))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8") (userinteraction))
                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1") (userinteraction))
                  (rule "cl_charAtI" (formula "6") (term "0") (userinteraction))
                  (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
                  (branch " 3 >  0 TRUE"
                     (rule "cl_charAtI" (formula "7") (term "0") (userinteraction))
                     (rule "ifthenelse_split" (formula "7") (term "0") (userinteraction))
                     (branch " 3 - 1 >  0 TRUE"
                        (rule "sub_literals" (formula "8") (term "0,0,0") (userinteraction))
                        (rule "sub_literals" (formula "8") (term "0,0") (userinteraction))
                        (rule "cl_charAtI" (formula "8") (term "0") (userinteraction))
                        (rule "ifthenelse_split" (formula "8") (term "0") (userinteraction))
                        (branch " 1 >  0 TRUE"
                           (rule "sub_literals" (formula "9") (term "0,0") (userinteraction))
                           (rule "cl_charAt0" (formula "9") (term "0") (userinteraction))
                           (rule "instAll" (formula "1") (term "1") (ifseqformula "10") (userinteraction))
                           (opengoal "   inReachableState -> \\<{        java.lang.String s = \"Hallo\";        int i = s.indexOf('l');      }\\> i = 2 ")
                        )
                        (branch " 1 >  0 FALSE"
                           (opengoal "   inReachableState -> \\<{        java.lang.String s = \"Hallo\";        int i = s.indexOf('l');      }\\> i = 2 ")
                        )
                     )
                     (branch " 3 - 1 >  0 FALSE"
                        (opengoal "   inReachableState -> \\<{        java.lang.String s = \"Hallo\";        int i = s.indexOf('l');      }\\> i = 2 ")
                     )
                  )
                  (branch " 3 >  0 FALSE"
                     (opengoal "   inReachableState -> \\<{        java.lang.String s = \"Hallo\";        int i = s.indexOf('l');      }\\> i = 2 ")
                  )
               )
            )
            (branch " Case 2"
               (rule "notRight" (formula "10") (userinteraction))
               (rule "eqSymm" (formula "8") (userinteraction))
               (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8") (userinteraction))
               (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1") (userinteraction))
               (rule "cl_charAtI" (formula "6") (term "0") (userinteraction))
               (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
               (branch " 4 >  0 TRUE"
                  (rule "cl_charAtI" (formula "7") (term "0") (userinteraction))
                  (rule "ifthenelse_split" (formula "7") (term "0") (userinteraction))
                  (branch " 4 - 1 >  0 TRUE"
                     (rule "cl_charAtI" (formula "8") (term "0") (userinteraction))
                     (rule "ifthenelse_split" (formula "8") (term "0") (userinteraction))
                     (branch " 4 - 1 - 1 >  0 TRUE"
                        (rule "cl_charAtI" (formula "9") (term "0") (userinteraction))
                        (rule "ifthenelse_split" (formula "9") (term "0") (userinteraction))
                        (branch " 4 - 1 - 1 - 1 >  0 TRUE"
                           (rule "sub_literals" (formula "10") (term "0,0,0,0,0") (userinteraction))
                           (rule "sub_literals" (formula "10") (term "0,0,0,0") (userinteraction))
                           (rule "sub_literals" (formula "10") (term "0,0,0") (userinteraction))
                           (rule "sub_literals" (formula "10") (term "0,0") (userinteraction))
                           (rule "cl_charAt0" (formula "10") (term "0") (userinteraction))
                           (rule "castDelInt" (formula "10") (term "0,1"))
                           (rule "castDelInt" (formula "10") (term "0"))
                           (rule "castDelInt" (formula "10") (term "1"))
                           (rule "equal_literals" (formula "10"))
                           (rule "closeFalse" (formula "10"))
                        )
                        (branch " 4 - 1 - 1 - 1 >  0 FALSE"
                           (rule "sub_literals" (formula "14") (term "0,0,0"))
                           (rule "sub_literals" (formula "14") (term "0,0"))
                           (rule "sub_literals" (formula "14") (term "0"))
                           (rule "greater_literals" (formula "14"))
                           (rule "closeTrue" (formula "14"))
                        )
                     )
                     (branch " 4 - 1 - 1 >  0 FALSE"
                        (rule "sub_literals" (formula "13") (term "0,0"))
                        (rule "sub_literals" (formula "13") (term "0"))
                        (rule "greater_literals" (formula "13"))
                        (rule "closeTrue" (formula "13"))
                     )
                  )
                  (branch " 4 - 1 >  0 FALSE"
                     (rule "sub_literals" (formula "12") (term "0"))
                     (rule "greater_literals" (formula "12"))
                     (rule "closeTrue" (formula "12"))
                  )
               )
               (branch " 4 >  0 FALSE"
                  (rule "greater_literals" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
            )
         )
      )
      (branch " Case 2"
         (rule "instEx" (formula "7") (term "1") (ifseqformula "6") (userinteraction))
         (rule "eq_and" (formula "7") (term "0,0"))
         (rule "qeq_literals" (formula "7") (term "0,0"))
         (rule "concrete_and_1" (formula "7") (term "0"))
         (rule "castDelInt" (formula "7") (term "0,1,1"))
         (rule "castDelInt" (formula "7") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0"))
         (rule "inEqSimp_invertInEq0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "times_zero_2" (formula "7") (term "1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0"))
         (rule "mul_literals" (formula "7") (term "1,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "cl_lengthEmpty" (formula "7") (term "0,0"))
         (rule "qeq_literals" (formula "7") (term "0"))
         (rule "concrete_and_1" (formula "7"))
         (rule "lemma_charAt" (formula "7") (term "0"))
         (rule "cl_lengthCons" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthEmpty" (formula "7") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,0,0"))
         (rule "lemma_substringLt0" (formula "7") (term "0,0"))
         (rule "less_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_false" (formula "7") (term "0,0"))
         (rule "lemma_substringGtLength" (formula "7") (term "0,0"))
         (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_invertInEq1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
         (rule "times_zero_2" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
         (rule "cl_lengthEmpty" (formula "7") (term "0,0,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_true" (formula "7") (term "0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthCons" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "0,1,0,0"))
         (rule "cl_lengthEmpty" (formula "7") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,0,0"))
         (rule "lemma_substringLt0" (formula "7") (term "0,0"))
         (rule "less_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_false" (formula "7") (term "0,0"))
         (rule "cl_substringI" (formula "7") (term "0,0"))
         (rule "greater_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_true" (formula "7") (term "0,0"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "sub_literals" (formula "7") (term "0,0,0"))
         (rule "cl_substringI" (formula "7") (term "0,0"))
         (rule "greater_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_true" (formula "7") (term "0,0"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "sub_literals" (formula "7") (term "0,0,0"))
         (rule "cl_substring0" (formula "7") (term "0,0"))
         (rule "greater_literals" (formula "7") (term "0,0,0"))
         (rule "ifthenelse_true" (formula "7") (term "0,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "cl_headCons" (formula "7") (term "0"))
         (rule "castDelInt" (formula "7") (term "0"))
         (rule "eqClose" (formula "7"))
         (rule "closeTrue" (formula "7"))
      )
   )
   (branch " Exceptional Post"
      (builtin "Update Simplification" (formula "3"))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "3"))
      (rule "close" (formula "7") (ifseqformula "4"))
   )
)
(branch " Null Reference (s = null)"
   (builtin "Update Simplification" (formula "3"))
   (builtin "Update Simplification" (formula "1"))
   (rule "repository_object_non_null" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
