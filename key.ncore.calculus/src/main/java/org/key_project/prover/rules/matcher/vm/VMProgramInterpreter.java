/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */
package org.key_project.prover.rules.matcher.vm;

import org.key_project.logic.LogicServices;
import org.key_project.logic.PoolSyntaxElementCursor;
import org.key_project.logic.SyntaxElement;
import org.key_project.prover.rules.instantiation.MatchResultInfo;
import org.key_project.prover.rules.matcher.vm.instruction.VMInstruction;

/**
 * Interpreter for a specific program used by the syntax element matching virtual machine.
 * <br>
 * The program is executed by invoking
 * {@link #match(SyntaxElement, MatchResultInfo, LogicServices)}.
 */
public class VMProgramInterpreter {

    /**
     * the instructions of the program
     */
    protected final VMInstruction[] instruction;

    public VMProgramInterpreter(VMInstruction[] instruction) {
        this.instruction = instruction;
    }

    /**
     * executes the program and tries to match the provided term; additional restrictions are
     * provided via match conditions. The returned conditions are either {@code null} if no match is
     * possible or {@link MatchResultInfo} which extends the given conditions by additional
     * constraints (e.g., instantiations of schemavariables) such that they describe the found match
     *
     * @param toMatch the {@link SyntaxElement} to match
     * @param mc the initial {@link MatchResultInfo} which have to be satisfied in addition
     *        to those generated by this match
     * @param services the {@link LogicServices}
     * @return {@code null} if no match was found or the match result
     */
    public MatchResultInfo match(SyntaxElement toMatch, MatchResultInfo mc,
            LogicServices services) {
        final PoolSyntaxElementCursor navi = PoolSyntaxElementCursor.get(toMatch);
        int instrPtr = 0;
        while (mc != null && instrPtr < instruction.length) {
            mc = instruction[instrPtr].match(navi, mc, services);
            instrPtr++;
        }
        navi.release();
        return mc;
    }
}
