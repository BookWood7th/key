\functions {
  Seq \dl_strContent(java.lang.String);
  java.lang.String strPool(Seq);
}


/*
 * Program Rules for Strings
 */
\rules {

  poolKeyIsContentOfValue {
  	\schemaVar \term Seq slit;
  	\find (\dl_strContent(strPool(slit))) 
  	\replacewith(slit)
  	\heuristics (simplify)  	
  };


  poolIsInjective {
  	\schemaVar \term Seq slit1, slit2;
  	\find (strPool(slit1) = strPool(slit2))
  	\replacewith(slit1 = slit2)
  	\heuristics (simplify)
  };


  insert_constant_string_value {  
  	\schemaVar \program ConstantStringVariable #csv;
  	\assumes(wellFormed(heap) ==>)                           
        \find(#csv) 
        \sameUpdateLevel
  		\replacewith(\if (#constantvalue(#csv) = null) \then (null) \else (strPool((Seq)#constantvalue(#csv))) )
        \heuristics(concrete)  
  };
  
  
  nullString {
  	\find ( \dl_strContent(null) )
  	\replacewith("null")
  	\heuristics(concrete)
  };

    
  //
  // Assignment of a Literal
  //
  stringAssignment  {
      \schemaVar \modalOperator { diamond, box} #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program StringLiteral #slit;
      \schemaVar \formula post;
      
      \find (\modality{#normalassign}{.. #v = #slit; ...}\endmodality(post))
      \sameUpdateLevel
       
      \replacewith ({ #v := strPool(#slit) }
                    \modality{#normalassign}{.. ...}\endmodality(post))
      \add(strPool(#slit) != null, boolean::select(heap, strPool(#slit), java.lang.Object::<created>) = TRUE ==>)

      \heuristics (simplify_prog, simplify_prog_subset)
  };


  //
  // The "+" operator
  //
  stringConcat {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstr1, #sstr2;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign} {.. 
                        #v = #sstr1 + #sstr2; 
              ...}\endmodality(post))
      \sameUpdateLevel
      \varcond(\newDependingOn(sk, post))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(\dl_strContent(#sstr1), \dl_strContent(#sstr2)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };


  stringConcatIntExpLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program AnyJavaTypeExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
      
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(clTranslateInt(#seLeft), \dl_strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };

  
  stringConcatIntExpRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program AnyJavaTypeExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(\dl_strContent(#sstrLeft), clTranslateInt(#seRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  stringConcatCharExpLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program JavaCharExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
      
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(seqSingleton(#seLeft), \dl_strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };

  
  stringConcatCharExpRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program JavaCharExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(\dl_strContent(#sstrLeft), seqSingleton(#seRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  stringConcatBooleanLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleJavaBooleanExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel
      \varcond(\newDependingOn(sk, post))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(\if (#seLeft = TRUE) 
                                     \then ( "true" )
                                     \else ( "false" ), 
                                     \dl_strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  

  stringConcatBooleanRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleJavaBooleanExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk; 

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(\dl_strContent(sk) = seqConcat(\dl_strContent(#sstrLeft),
                                    \if (#seRight = TRUE) 
                                    \then ("true") 
                                    \else ("false") )==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  
  stringConcatObjectLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleNonStringObjectExpression #seLeft;
      \schemaVar \formula post;    
      \schemaVar \skolemTerm java.lang.String sk;      

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
              
      "#seLeft not null":              
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = #seLeft.toString() + #sstrRight; ...}
        \endmodality(post) )
      \add(==> #seLeft = null);

      "#seLeft null":
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(#seLeft = null, \dl_strContent(sk) = seqConcat(\dl_strContent(null), \dl_strContent(#sstrRight)) ==> sk = null)              
        
      \heuristics (simplify_prog, simplify_prog_subset)
  };


  stringConcatObjectRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleNonStringObjectExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;            

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\newDependingOn(sk, post))
              
      "#seRight not null":              
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = #sstrLeft + #seRight.toString(); ...}
        \endmodality(post) )
      \add(==> #seRight = null);
        
      "#seRight null":              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(#seRight = null, \dl_strContent(sk) = seqConcat(\dl_strContent(#sstrLeft), \dl_strContent(null)) ==> sk = null)        
        
      \heuristics (simplify_prog, simplify_prog_subset)
  };
}
