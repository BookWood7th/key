package de.uka.ilkd.key.smt.newsmt2;

import de.uka.ilkd.key.control.DefaultUserInterfaceControl;
import de.uka.ilkd.key.control.KeYEnvironment;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.sort.Sort;
import de.uka.ilkd.key.parser.DefaultTermParser;
import de.uka.ilkd.key.pp.AbbrevMap;
import de.uka.ilkd.key.proof.Proof;
import de.uka.ilkd.key.proof.io.ProofSaver;
import org.junit.AfterClass;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.key_project.util.Streams;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import static org.junit.Assert.fail;

/**
 * This test case makes sure that all KeY formulas which are translated
 * to axioms in SMT can actually be proved in KeY.
 *
 * @author Mattias Ulbrich
 */
@Tag("slow")
public class ProveSMTLemmasTest {
    private static String HEADER;

    @BeforeAll
    public static void setUpPreamble() throws IOException {
        HEADER = Streams.toString(ProveSMTLemmasTest.class.getResourceAsStream("smt-lemma-header.key"));
    }

    @AfterClass
    public static void tearDownClass() {
        HEADER = null;
    }

    @ParameterizedTest
    @MethodSource("data")
    public void testSMTLemmaSoundness(String name,String lemmaString) throws Exception {
        URL proofFile = getClass().getResource("SMT_lemma_" + name + ".proof");
        Path path;
        if (proofFile != null) {
            assert proofFile.getProtocol().equals("file");
            path = Paths.get(proofFile.toURI());
        } else {
            path = Files.createTempFile("SMT_lemma_" + name + "_", ".key");
            // TODO Use writeString in Java 11
            Files.write(path, (HEADER + "\\problem { " + lemmaString + "}").getBytes());
        }

        File file = path.toFile();

        System.err.println("Now processing file " + file);

        KeYEnvironment<DefaultUserInterfaceControl> env = KeYEnvironment.load(file);
        try {
            Proof loadedProof = env.getLoadedProof();
            env.getProofControl().startAndWaitForAutoMode(loadedProof);
            if (!loadedProof.closed()) {
                File saveFile = new File(file.getAbsoluteFile() + ".proof");
                ProofSaver saver = new ProofSaver(loadedProof, saveFile);
                saver.save();
                fail("Proof does not close. See " + file + " and " + saveFile);
            } else {
                if (proofFile == null) {
                    // delete temp files
                    file.delete();
                } else {
                    // and check if proofs are actually for the right theorem!
                    DefaultTermParser tp = new DefaultTermParser();
                    Term parsedLemma = tp.parse(new StringReader(lemmaString), Sort.FORMULA,
                            loadedProof.getServices(), loadedProof.getNamespaces(), new AbbrevMap());
                    Term actual = loadedProof.root().sequent().succedent().get(0).formula();
                    if (!actual.equalsModRenaming(parsedLemma)) {
                        System.out.println("Stored : " + parsedLemma);
                        System.out.println("Proven : " + actual);
                        fail("The proven lemma is different from the stored one.");
                    }
                }

            }
        } finally {
            env.dispose();
        }
    }

    public static List<String[]> data() throws IOException {
        URL url = DefinedSymbolsHandler.class.getResource("DefinedSymbolsHandler.preamble.xml");
        if (url == null) {
            throw new FileNotFoundException("Cannot find resource file which should have been generated by gradle");
        }

        Properties props = new Properties();
        try (InputStream in = url.openStream()) {
            props.loadFromXML(in);
        }

        List<String[]> result = new ArrayList<>();

        for (String name : props.stringPropertyNames()) {
            if (name.matches(".*\\.dl(\\.[0-9]+)?")) {
                String[] params = { name, props.getProperty(name) };
                result.add(params);
            }
        }

        return result;
    }

}
