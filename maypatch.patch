diff --git a/eclipse/.settings/org.eclipse.jdt.core.prefs b/eclipse/.settings/org.eclipse.jdt.core.prefs
index 164f47f..d0f7914 100644
--- a/eclipse/.settings/org.eclipse.jdt.core.prefs
+++ b/eclipse/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,4 @@
-#Thu Mar 06 08:44:16 CET 2008
+#Tue Jan 15 17:49:48 CET 2008
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
@@ -7,7 +7,6 @@ org.eclipse.jdt.core.compiler.compliance=1.5
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.doc.comment.support=enabled
 org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
@@ -26,20 +25,9 @@ org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
 org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=ignore
 org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.compiler.problem.invalidJavadoc=ignore
-org.eclipse.jdt.core.compiler.problem.invalidJavadocTags=enabled
-org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef=disabled
-org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef=disabled
-org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=private
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=error
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
-org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
-org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=disabled
-org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility=public
-org.eclipse.jdt.core.compiler.problem.missingJavadocTags=ignore
-org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=disabled
-org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility=public
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore
 org.eclipse.jdt.core.compiler.problem.missingSerialVersion=ignore
 org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
diff --git a/eclipse/VisualDebugger/src/visualdebugger/draw2d/SourceElementFigure.java b/eclipse/VisualDebugger/src/visualdebugger/draw2d/SourceElementFigure.java
index a03f97f..28ae078 100644
--- a/eclipse/VisualDebugger/src/visualdebugger/draw2d/SourceElementFigure.java
+++ b/eclipse/VisualDebugger/src/visualdebugger/draw2d/SourceElementFigure.java
@@ -23,8 +23,6 @@ public class SourceElementFigure extends Figure implements DrawableNode {
 
     /** The selected. */
     private boolean selected;
-    private boolean isCollapsed;
-    private boolean isWatchpoint;
 
     /** some color definitions. */
     static final Color collapseGradient = new Color(null, 155, 122, 34);
@@ -69,7 +67,9 @@ public class SourceElementFigure extends Figure implements DrawableNode {
             ColorConstants.orange, 2);
 
     /** The Constant ROUNDEDBORDER. */
-    static final Border ROUNDEDBORDER = new RoundedBorder(ColorConstants.black, 1);
+    static final Border ROUNDEDBORDER = new RoundedBorder(ColorConstants.black,
+            1);
+
     /**
      * The Class RoundedBorder.
      */
@@ -102,9 +102,10 @@ public class SourceElementFigure extends Figure implements DrawableNode {
             tempRect.shrink(getWidth() / 2, getWidth() / 2);
             graphics.setLineWidth(getWidth());
             tempRect.crop(insets);
-            if (getColor() != null) graphics.setForegroundColor(getColor());
-            graphics.drawRoundRectangle(tempRect, 12 , 12 );
-            
+            if (getColor() != null)
+                graphics.setForegroundColor(getColor());
+            graphics.drawRoundRectangle(tempRect, 12, 12);
+
         }
     }
 
@@ -145,8 +146,6 @@ public class SourceElementFigure extends Figure implements DrawableNode {
      */
     public SourceElementFigure(ETStatementNode etNode) {
 
-        this.isCollapsed = etNode.isCollapsed();
-        this.isWatchpoint = etNode.isWatchpoint();
         setLayoutManager(new StackLayout());
         add(label);
         String labelText = "";
@@ -175,6 +174,13 @@ public class SourceElementFigure extends Figure implements DrawableNode {
                     etNode.getStatementId());
             st = expression.toString();
         }
+        if (etNode.isWatchpoint()) {
+            setBorder(ACTIVEWATCHPOINTBORDER);
+        } else {
+            if (etNode.isCollapsed()) {
+                setBorder(COLLAPSEDMODEBORDER);
+            }
+        }
 
         labelText = st;
         int i = st.indexOf("\n");
@@ -199,31 +205,18 @@ public class SourceElementFigure extends Figure implements DrawableNode {
      */
     protected void paintFigure(Graphics g) {
         super.paintFigure(g);
-        
-        if (isWatchpoint) {
-            g.setForegroundColor(blue);
+
+        if (selected) {
+            g.setForegroundColor(ColorConstants.menuBackgroundSelected);
             g.setBackgroundColor(ColorConstants.titleGradient);
-            setBorder(ACTIVEWATCHPOINTBORDER);
         } else {
-            if (isCollapsed) {
-                g.setForegroundColor(blue);
-                g.setBackgroundColor(ColorConstants.titleGradient);
-                setBorder(COLLAPSEDMODEBORDER);
+            if (statement != null || label.getText().equals("Start")) {
+                g.setForegroundColor(gradient1);
+                g.setBackgroundColor(gradient2);
             } else {
+                g.setForegroundColor(gradient12);
+                g.setBackgroundColor(gradient22);
 
-                if (selected) {
-                    g.setForegroundColor(ColorConstants.menuBackgroundSelected);
-                    g.setBackgroundColor(ColorConstants.titleGradient);
-                } else {
-                    if (statement != null || label.getText().equals("Start")) {
-                        g.setForegroundColor(gradient1);
-                        g.setBackgroundColor(gradient2);
-                    } else {
-                        g.setForegroundColor(gradient12);
-                        g.setBackgroundColor(gradient22);
-
-                    }
-                }
             }
         }
         g.fillGradient(getBounds().getResized(-1, -1), true);
diff --git a/eclipse/VisualDebugger/src/visualdebugger/views/ExecutionTreeView.java b/eclipse/VisualDebugger/src/visualdebugger/views/ExecutionTreeView.java
index ce970f2..d8aa48a 100644
--- a/eclipse/VisualDebugger/src/visualdebugger/views/ExecutionTreeView.java
+++ b/eclipse/VisualDebugger/src/visualdebugger/views/ExecutionTreeView.java
@@ -362,7 +362,6 @@ public class ExecutionTreeView extends ViewPart implements DebuggerListener {
      * @return the figure
      */
     private Figure createNode(ETNode etNode) {
-
         final LinkedList<Term> activeWPs = etNode.getWatchpointsSatisfied();
         if (etNode instanceof ETStatementNode) {
             final SourceElementFigure node = new SourceElementFigure(
@@ -659,6 +658,7 @@ public class ExecutionTreeView extends ViewPart implements DebuggerListener {
                 LinkedList<ETNode> node = new LinkedList<ETNode>();
                 node.add(etn);
                 try {
+                    currentETRootNode = null;
                     identifyWatchpoints(node);     
                     refresh();  
                     
diff --git a/system/de/uka/ilkd/key/util/WatchpointUtil.java b/system/de/uka/ilkd/key/util/WatchpointUtil.java
index 2c58d19..37505e5 100644
--- a/system/de/uka/ilkd/key/util/WatchpointUtil.java
+++ b/system/de/uka/ilkd/key/util/WatchpointUtil.java
@@ -53,8 +53,10 @@ public class WatchpointUtil {
         for (Node node : leafNodesInETNode) {
 
             List<Term> temp = new LinkedList<Term>();
-            PosInOccurrence pos = findPos(node);
-
+            
+            PosInOccurrence pos = findPos(node.sequent().succedent());
+            if(pos == null)pos = findPos(node.sequent().antecedent()); 
+            
             if (pos != null) {
                 for (Term watchpoint : watches) {
 
@@ -78,24 +80,19 @@ public class WatchpointUtil {
         return !intersection.isEmpty();
     }
 
-    private static PosInOccurrence findPos(Node node) {
+    private static PosInOccurrence findPos(Semisequent seq) {
 
-        Sequent seq = node.sequent();
         IteratorOfConstrainedFormula iter = seq.iterator();
         ConstrainedFormula constrainedFormula;
         PosInOccurrence pos = null;
         Term term;
-        // debug statement - remove later on
-        int i = 0;
         // iterate over all constrained formulae
         while (iter.hasNext()) {
-            i++;
-            System.out.println("watchpointUtil - cfma nr.: " + i);
             constrainedFormula = iter.next();
             pos = new PosInOccurrence(constrainedFormula, PosInTerm.TOP_LEVEL,
                     false);
             term = constrainedFormula.formula();
-            // if we find a update
+
             if (term.op() instanceof QuanUpdateOperator) {
 
                 int targetPos = ((QuanUpdateOperator) term.op()).targetPos();
@@ -106,23 +103,17 @@ public class WatchpointUtil {
                             .javaBlock().program();
 
                     programPrefix = programPrefix.
-                      getPrefixElementAt(programPrefix.getPrefixLength()-1);
-                    
-                    System.out.println("PrefixLength() : "+programPrefix.getPrefixLength());
+                    getPrefixElementAt(programPrefix.getPrefixLength()-1);
+
                     SourceElement firstStatement = PosInProgram.getProgramAt(
-                            programPrefix.getFirstActiveChildPos(),
-                            programPrefix).getFirstElement();
-                    
-                    System.out.println("firstStatement (after) "
-                            + firstStatement.toString() + " class "
-                            + firstStatement.getClass());
+                             programPrefix.getFirstActiveChildPos(),
+                             programPrefix).getFirstElement();
 
                     if (firstStatement.toString().startsWith("Debug")) {
                         System.out.println("LEAVING findPos WITH result...");
                         return pos;
                     } else {
                         System.out.println("continue...");
-                        // return null;
                         continue;
                     }
                 }
diff --git a/system/de/uka/ilkd/key/visualdebugger/WatchPointManager.java b/system/de/uka/ilkd/key/visualdebugger/WatchPointManager.java
index 0af56e4..92440a2 100644
--- a/system/de/uka/ilkd/key/visualdebugger/WatchPointManager.java
+++ b/system/de/uka/ilkd/key/visualdebugger/WatchPointManager.java
@@ -103,7 +103,7 @@ public class WatchPointManager {
 
                         // check namespace
                         while (services.getNamespaces().lookup(selfName) != null) {
-                            nameOfSelf.concat("Z");
+                            nameOfSelf = nameOfSelf.concat("Z");
                             selfName = new ProgramElementName(nameOfSelf);
                         }
 
