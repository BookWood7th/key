// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

package de.uka.ilkd.key.casetool.together.keydebugclassloader;


import java.net.URL;
import java.net.URLClassLoader;

public class KeyDebugClassLoader extends URLClassLoader {

    private static int nextLoaderID = 0;

    private final int loaderID = nextLoaderID++;
    private boolean   reported = false;

    private static final URL[] urls = new URL[] {null};
    
    static {
	try {
	    urls[0] = new URL("file:" + System.getProperty("key.home") + 
                                        "/system/binary/");
	} catch (java.net.MalformedURLException e) {
	    System.err.println("KeyError: Coulnd't create a file URL for"
			       +" the KeyDebugClassLoader.");
	    e.printStackTrace();
	}
	
    }


    private final ClassLoader _specialParent;

    private String classAlwaysAskParent = "";

    public KeyDebugClassLoader() {
	this(getSystemClassLoader());
    }

    public KeyDebugClassLoader(ClassLoader parent) {
    	super(urls,null);
	_specialParent = parent;
    }

    public void setClassAlwaysAskParent(Class aClass){
	classAlwaysAskParent = aClass.getName();
    }

    public Class loadClass(String name){
	try{
	    if ( classShouldBeReloaded(name) ) {
		if ( ! reported ) {
		    System.err.println("DEBUG:: KeyDebugClassLoader #" +loaderID+
				       " loading KeY classes.");
		    reported = true;
		}
		
		// Uncomment to log loading of every class:
		//System.err.println("DEBUG:: Loader #" +loaderID+
		//" loads class "+name);
		
 		return super.loadClass(name);
	    } else {
		return _specialParent.loadClass(name);
	    }
	}
	catch (ClassNotFoundException ex){
	    System.err.println(ex+"\n IMPORTANT!!!!!!\nThe DebugClassLoader contains relative "+
			       "paths. To work properly, \"startkey\" must be invoked "+
			       "within directory \"system\"."); 	    
	}
	return null;
    }


    public boolean classShouldBeReloaded(String name) {
	return (name.startsWith("de.uka.ilkd.") 
		&& !name.startsWith("de.uka.ilkd.key.casetool.ReprModel")
		&& !name.equals(classAlwaysAskParent)
		&& !name.equals(this.getClass().getName())
		&&  name.indexOf("MyPatternBase")==-1);
    }

}
