// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2007 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

package de.uka.ilkd.key.casetool.together.keydebugclassloader;

import com.togethersoft.openapi.ide.IdeContext;
import com.togethersoft.openapi.ide.IdeScript;
import com.togethersoft.openapi.ide.IdeStartup;



public abstract class KeyScript implements IdeScript, IdeStartup {

    public final void run(IdeContext context){
	KeyScript thisclone;
	if("on".equals(System.getProperty("KeyDebugClassLoader"))){
	    thisclone = reloadClassDef();
	} else {
                thisclone = this;
	}
	thisclone.run1(context);
    }

    public final void autorun(){
	KeyScript thisclone;
	if("on".equals(System.getProperty("KeyDebugClassLoader"))){
	    thisclone = reloadClassDef();
	} else {
	    thisclone = this;
            }
	thisclone.autorun1();
    }
    

    /** please be aware of the fact that Together calls autorun before
     * run if the Time variable in the Manifest file of the script is
     * set to 'User' thus KeyScript implementing the run1 method
     * should not implement the autorun method at all. 
     */
    public void run1(IdeContext context){ }

    public void autorun1(){ }


    // reloads the class-definition of the this-object
    // and returns a new instance of it.
    private KeyScript reloadClassDef() {
       	String thisClassName = this.getClass().getName();
	KeyScript script = null;
	try{
	    KeyDebugClassLoader classLoader = new KeyDebugClassLoader();
	    // Because of the explicit cast later KeyScript must not be 
	    // reloaded by KeyDebugClassLoader (otherwise we get an cast-error)
	    classLoader.setClassAlwaysAskParent(KeyScript.class);
	    Class cl = classLoader.loadClass(thisClassName);
	    script = (KeyScript) cl.newInstance();
	} catch (ExceptionInInitializerError ei) {
	    System.err.println("keyscript: the initialization provoked "+
			       "by this method fails.");
	    System.err.println("The exception was: "+ei);
	    ei.printStackTrace();
	} catch (IllegalAccessException iae) {
	    System.err.println("keyscript: class or "+
					   "initializer is not accessible."); 
			System.err.println("The exception was: "+iae); 
			iae.printStackTrace(); 
	} catch (InstantiationException ie) { 
	    System.err.println
		("keyscript: class tried to\n"+
		 "instantiate represents an abstract class, an interface,"+
		 "an array class, a primitive type, or void; or if the"+
		 "instantiation fails for some other reason.");  
	    System.err.println("The exception was: "+ie);  
	    ie.printStackTrace();
	} catch (SecurityException se) {
	    System.err.println("keyscript: no permission to create"+
			       "a new instance"); 
	    System.err.println("The exception was: "+se); 
	    se.printStackTrace(); 
	} 
	return script;	
    }
}
