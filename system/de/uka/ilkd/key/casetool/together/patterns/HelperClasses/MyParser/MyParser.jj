// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//
//

options { STATIC = false; }

PARSER_BEGIN(MyParser)
package de.uka.ilkd.key.casetool.together.patterns.HelperClasses.MyParser;

import de.uka.ilkd.key.casetool.together.patterns.HelperClasses.MyPatternBase.*;
import com.togethersoft.openapi.ide.message.IdeMessageManagerAccess;
import com.togethersoft.openapi.ide.message.IdeMessageType;
//import com.togethersoft.util.propertyMap.*;
import java.util.*;
import de.uka.ilkd.key.casetool.together.patterns.HelperClasses.MyParser.Entry;

import com.togethersoft.openapi.util.propertyMap.Property;
import com.togethersoft.openapi.util.propertyMap.PropertyMapListener;
import com.togethersoft.openapi.util.propertyMap.PropertyMapEvent;

import com.togethersoft.modules.patterns.UNIVERSAL.CLASS.ClassPatternBase;
import com.togethersoft.modules.patterns.UNIVERSAL.PatternBaseException;
import com.togethersoft.modules.patterns.UNIVERSAL.PatternUIBuilder;

public class MyParser extends MyClassPatternBase{
    
    
//    private PropertyMap properties;
    private String oclSchemeName;
    private final String SubclassesOf = "Subclasses of ";
    private final String nameOfMethod = "Name of method ";
    private final String nameOfClassAttribute = "Name of class-attribute ";
    private final String inClass = " in class ";
    private Vector additionalProperties = new Vector();
    // the format of an entry in mappingVector is: OCL-Scheme , Scheme-Name, Name of field containing the real name
    private Vector mappingVector = new Vector();
    private Vector constraintVector=new Vector();
    private String commentString="";
    private String headerString="";
    private String constraint="";
    private Vector itemVector = new Vector();
    private Vector placeVector = new Vector();
    private Vector helpVector = new Vector();
    private Vector idVector = new Vector();
    private int id = 0;

    private static int counter=0;

    public Vector getAdditionalPropertiesVector(){
	return additionalProperties;
    }

    public Vector getConstraintVector(){
	return constraintVector;
    }

    public Vector getMappingVector(){
	return mappingVector;
    }

    public Vector getPlaceVector(){
	return placeVector;
    }

    public String getCommentString(){
	return commentString;
    }

	public void parse( String oclName) throws ParseException {
		
	oclSchemeName = oclName;


	mappingVector.addElement(oclSchemeName);
	mappingVector.addElement("selectedMethod");	
	mappingVector.addElement("");

	
	mappingVector.addElement(oclSchemeName);
	mappingVector.addElement("selectedClass");	
	mappingVector.addElement("");

	mappingVector.addElement(oclSchemeName);
	mappingVector.addElement("selectedParameter");	
	mappingVector.addElement("");

	mappingVector.addElement(oclSchemeName);
	mappingVector.addElement("selectedAttribute");	
	mappingVector.addElement("");


	
	id=0;

	start();
	
    }
    
}

PARSER_END(MyParser)

/* ignoring empty lines, empty spaces and returns */
SKIP:{
   " " | "\t" | "\n" | "\r" 
}
TOKEN:{
    <PATTERNMOD: "patternmodification#"> 
    |  <SCHEMA: "schema#">
    |  <COMMENT: "comment#">	
    |  <MAPPINGS: "mapping#"> 
    |  <SEVERALSUBCLASSES: "canHaveSeveralSubclasses#">
    |  <MULTIINSTANCES: "canHaveMultipleInstances#">
    |  <ADDSTRINGFIELD: "addStringField#">
    |  <ADDCLASSATTRIBUTE: "addClassAttribute#">
    |  <ADDPARAMETER: "addParameter#">
    |  <ADDMETHOD: "addMethod#">
    |  <POSTCONDITION: "postcondition#">
    |  <PRECONDITION: "precondition#">
    |  <PREPOSTCONDITION : "prepostcondition#">
    |  <INVARIANT: "invariant#">
    |  <STATIC: "#static">
    |  <PRIVATE: "#private">
    |  <PUBLIC: "#public">
    |  <PROTECTED: "#protected">
    |  <STRING1: ([" ","a"-"z","A"-"Z","0"-"9","_","-","<",">","@","|","(",")","{","}",",",".","\"","/","%",":","=","+"])+>
}
 
void start() :
{}
{
    (patternModifications())?  (schema())+ (comment())? <EOF>
}


void patternModifications() :
{}
{
    <PATTERNMOD> 
    ((<SEVERALSUBCLASSES> <STRING1> {
 	// create a multiple StringField
	addClassPropertyItem(SubclassesOf+token.image, false, true);
	setMultiple(SubclassesOf+token.image, true);
        // initially invisible
	showItem(SubclassesOf+token.image, false);
     	// create an entry in the global vector, that contains the additional parsed classes and properties
	additionalProperties.addElement( new Entry(oclSchemeName,"canHaveSeveralSubclasses#",token.image,SubclassesOf +token.image));
	// add a propertyListener to do something, when the checkboxes change
	// add this stringfield to the vector, which contains all fields etc. for this OCL-Schema
	final String fieldName1 = token.image;
	itemVector.addElement(oclSchemeName);
	itemVector.addElement("visible");
	itemVector.addElement(SubclassesOf +fieldName1);
	addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
		boolean on = false;
		public void propertiesChanged(PropertyMapEvent event){
		//IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());		
		    if (on){
			on = false;
			showItemVector(itemVector, oclSchemeName , false);
		    }
		    else{
			on = true;
			showItemVector(itemVector, oclSchemeName, true);
		    }
		}
	    }); 
        } 
    )
    | (<MULTIINSTANCES> <STRING1> {
	// create an entry in the global vector, that contains the additional parsed classes and properties
	additionalProperties.addElement( new Entry(oclSchemeName,"canHaveMultipleInstances#",token.image,""));

	final String fieldName2 = token.image;
	itemVector.addElement(oclSchemeName);
	itemVector.addElement("multiple");
	itemVector.addElement(fieldName2);
	addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
		boolean on = false;
		public void propertiesChanged(PropertyMapEvent event){
	            //IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());
		    if (on){
			counter -= 1;
			on = false;
			if (counter==0)
			    showItemVector(itemVector, oclSchemeName , false);
		    }
		    else{
			counter += 1;
			on = true;
			if (counter>0)
			    showItemVector(itemVector, oclSchemeName , true);
		    }
		}
	    }); 
      } )

     // add method <STRING1> to class <STRING1>
     | (<ADDMETHOD> <STRING1> {
	 String methodName = token.image;
     } "#" <STRING1> {
	 // add a stringfield to enter the name of the new method
	 addStringFieldItem(nameOfMethod + methodName + inClass +token.image);
	 showItem(nameOfMethod + methodName + inClass +token.image, false);
	 additionalProperties.addElement( new Entry(oclSchemeName,"addMethod#",token.image,nameOfMethod + methodName + inClass +token.image));
	 // add a listener to turn the stringfield on (if OCL-constraint is selected) and off 
	 final String fieldName3 = methodName;
	 final String fieldName4 = token.image;
	 itemVector.addElement(oclSchemeName);
	 itemVector.addElement("visible");
	 itemVector.addElement(nameOfMethod +fieldName3 +inClass +fieldName4);
	 addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
		 boolean on = false;
		 public void propertiesChanged(PropertyMapEvent event){
		     //IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());
		     if (on){
			 on = false;
			 showItemVector(itemVector, oclSchemeName , false);
		     }
		     else{
			 on = true;
			 showItemVector(itemVector, oclSchemeName , true);
		     }
		 }
	     });
     })


     // add a StringField to Pattern-dialog
     | (<ADDSTRINGFIELD> "'" <STRING1> {
	 String stringFieldName = token.image;
     } "'" {
	 // add a stringfield to enter the name of the new attribute
	 addStringFieldItem(stringFieldName);
	 showItem(stringFieldName, false);
	 additionalProperties.addElement( new Entry(oclSchemeName,"addStringField#", "", stringFieldName));
	 // add a listener to turn the stringfield on (if OCL-constraint is selected) and off 
	 final String fieldName13 = stringFieldName;
	 itemVector.addElement(oclSchemeName);
	 itemVector.addElement("visible");
	 itemVector.addElement(fieldName13);
	 addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
		 boolean on = false;
		 public void propertiesChanged(PropertyMapEvent event){
		     //IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());
		     if (on){
			 on = false;
			 showItemVector(itemVector, oclSchemeName , false);
		     }
		     else{
			 on = true;
			 showItemVector(itemVector, oclSchemeName , true);
		     }
		 }
	     });
     })


     | (  <ADDPARAMETER> <STRING1>
    
          {
	      String name = token.image;
	      Vector values = new Vector();
          }
          "#" <STRING1>
          {
	      String type="";
	      if (token.image.equals("ComboBox"))
		type = "ComboBox";
	  }
	  ( "#" "'" <STRING1> 
	  {
	      values.addElement(token.image);
	  }
            "'"
	  )* 

          {
	      if (type.equals("ComboBox")) {
		 addComboboxFieldItem(name, values, values.elementAt(0).toString()); 
		 showItem(name, false);
		 itemVector.addElement(oclSchemeName);
		 itemVector.addElement("visible");
		 itemVector.addElement(name);
		 addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
			 boolean on = false;
			 public void propertiesChanged(PropertyMapEvent event){
			     //IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());
			     if (on){
				 on = false;
				 showItemVector(itemVector, oclSchemeName , false);
			     }
			     else{
				 on = true;
				 showItemVector(itemVector, oclSchemeName , true);
			     }
			 }
		     });
	      }
          }  
       )

     | ( <ADDCLASSATTRIBUTE> <STRING1>
          {
	      String className = token.image;
	  }
       "#" <STRING1>
          {
	     String attrName = token.image;
          }
	"#" <STRING1>
	  {
	     additionalProperties.addElement( new Entry(oclSchemeName,"addClassAttribute#",className+"#"+token.image, nameOfClassAttribute + attrName + inClass +className));
	  
	     // add a stringfield to enter the name of the new attribute
	     addStringFieldItem(nameOfClassAttribute + attrName + inClass + className);
	     showItem(nameOfClassAttribute + attrName + inClass + className, false);    
	     // add a listener to turn the stringfield on (if OCL-constraint is selected) and off 
	     final String fieldName10 = attrName;
	     final String fieldName11 = className;
	     itemVector.addElement(oclSchemeName);
	     itemVector.addElement("visible");
	     itemVector.addElement(nameOfClassAttribute +fieldName10 +inClass +fieldName11);
	     addPropertyMapListener(oclSchemeName, new PropertyMapListener() {
		     boolean on = false;
		     public void propertiesChanged(PropertyMapEvent event){
			 //IdeMessageManagerAccess.printMessage(IdeMessageType.INFORMATION, "Event: "+event.toString());
			 if (on){
			     on = false;
			     showItemVector(itemVector, oclSchemeName , false);
			 }
			 else{
			     on = true;
			     showItemVector(itemVector, oclSchemeName , true);
			 }
		     }
		 });
	  })
     
     
     //some mappings?
     | ( <MAPPINGS> <STRING1> {
				mappingVector.addElement(oclSchemeName);
				mappingVector.addElement(token.image);
				String helper = "";
			     } 
       "#" "'" (<STRING1> {
			    helper += token.image;
		       } 
	) "'" 
	{   mappingVector.addElement(helper); 
        }

     ))*
	
}



void schema() :
{}
{
  (    
     ((<POSTCONDITION> | <PRECONDITION> | <INVARIANT>){
		placeVector.addElement(oclSchemeName);
		String prepost = token.image;
		placeVector.addElement(prepost);
          }  

       	( "method#" <STRING1> {
		placeVector.addElement("method");
		placeVector.addElement(token.image);
		}
		(  "#"  <STRING1> {
		     placeVector.addElement(token.image);
		     placeVector.addElement((new Integer(id)).toString());
		   }
	 	)
		
          
        |
       	"class#"  <STRING1> {
		placeVector.addElement("class");
		placeVector.addElement(token.image);
		// dummy-element to keep the same length
		placeVector.addElement("");
		placeVector.addElement((new Integer(id)).toString());
          }
        )

	<SCHEMA> {constraint="";} ((<STRING1>) {
		 constraint = constraint + token.image + "\n";

		 if (headerString.equals("")){
		   headerString = "<h3>"+ oclSchemeName +"</h3>";
		   if (prepost.equals("precondition#")) headerString = headerString + "<h4>Precondition</h4>";
		   if (prepost.equals("postcondition#")) headerString = headerString + "<h4>Postcondition</h4>";
	 	   if (prepost.equals("invariant#")) headerString = headerString + "<h4>Invariant</h4>";		
		}
		commentString = commentString + "<br>" + token.image + "\n";
   		 }
	)*
    		{
		constraintVector.addElement(constraint);
		constraintVector.addElement((new Integer(id)).toString());
		id++;
	    	}

        )
       | (
         <PREPOSTCONDITION> {
	   placeVector.addElement(oclSchemeName);
	   helpVector.removeAllElements();
	   helpVector.addElement(oclSchemeName);
	   String s = "";
	   helpVector.addElement("postcondition#");
	   placeVector.addElement("precondition#"); 
         }
	 "method#" <STRING1> {
             placeVector.addElement("method");
	     helpVector.addElement("method");
	     s = token.image;
             placeVector.addElement(s);
	     helpVector.addElement(s);
	   }
	 "#"  <STRING1> {
		     s = token.image;
		     placeVector.addElement(s);
		     placeVector.addElement((new Integer(id)).toString());
	 	     helpVector.addElement(s);
		     for (int i=0; i<helpVector.size(); i++)
	  		placeVector.addElement(helpVector.elementAt(i));
		     placeVector.addElement((new Integer((id+1))).toString());
		   }
	(<SCHEMA> {constraint="";} ((<STRING1>) {
		constraint = constraint + token.image + "\n";

		if (headerString.equals("")){
		  headerString = "<h3>"+ oclSchemeName +"</h3><h4>Precondition</h4>";
		}
		commentString = commentString + "<br>" + token.image + "\n";
	 	}
        )*
    		{
		constraintVector.addElement(constraint);
		constraintVector.addElement((new Integer(id)).toString());
		id++;
		}
	 <SCHEMA> {constraint="";} ((<STRING1>) {
		constraint = constraint + token.image + "\n";

		if (headerString.equals("")){
		  headerString = "<h3>"+ oclSchemeName +"</h3><h4>Postcondition</h4>";
		}
		commentString = commentString + "<br>" + token.image + "\n";
	 	}
        )*
    		{
		constraintVector.addElement(constraint);
		constraintVector.addElement((new Integer(id)).toString());
		id++;
		}
	  )
        )
   )
}

void comment() :
{ }
{ <COMMENT> ( <STRING1> {
	commentString = "<p>"+headerString+"</p>" 
			+"<p>"+token.image+"</p>" 
			+ "<p>" + commentString+ "</p>";
  }
  )*
}	
    


