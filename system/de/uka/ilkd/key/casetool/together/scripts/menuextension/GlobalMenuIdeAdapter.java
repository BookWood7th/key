// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2007 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

// Auxiliary class to cover behavior what was 
// covered by an innerclass before.

package de.uka.ilkd.key.casetool.together.scripts.menuextension;

import com.togethersoft.openapi.ide.command.IdeCommandAdapter;
import com.togethersoft.openapi.ide.command.IdeCommandEvent;
import com.togethersoft.openapi.ide.window.IdeWindowManager;

import de.uka.ilkd.key.casetool.together.keydebugclassloader.KeyDebugClassLoader;

public class GlobalMenuIdeAdapter extends IdeCommandAdapter{

    public GlobalMenuIdeAdapter(KeyMenuExtension script, IdeWindowManager aWinMan, int ind1, int ind2, int ind3, String className) {
	lnkKeyMenuExtension = script;
	winMan = aWinMan;
        typeI = ind1;
        group = ind2;
	groupItem = ind3;
	globalMenuRootCN = className;
    }

    private int typeI;
    private int group;
    private int groupItem;
    private String globalMenuRootCN;
    private IdeWindowManager winMan;
    private KeyMenuExtension lnkKeyMenuExtension;

    public void actionPerformed(IdeCommandEvent event) { 
	// here we create an instance of classes like GlobalMenuePoint1_1
	// by asking a classloader
	Class cl;
	ClassLoader classLoader = this.getClass().getClassLoader();
	if ("on".equals(System.getProperty("KeyDebugClassLoader"))){
	    // installing the keydebugclassloader instead
	    // see also de.uka.ilkd.tjext.keydebugclassloader.KeyScript
	    try{
		classLoader = new KeyDebugClassLoader(classLoader);
		((KeyDebugClassLoader) classLoader).setClassAlwaysAskParent(GlobalMenu.class);
	    } catch(SecurityException se){
		System.err.println("globalmenuideadapter: security manager exists and\n"+
				   "its checkPermission method doesn't allow access\n"+
				   "to the system class loader.");
		System.err.println("KeYError: " + se);
		se.printStackTrace();
	    }
	}
	try{
	    cl = classLoader.loadClass(globalMenuRootCN + "Point" + group + "_" + groupItem);
	    // now creating an instance of the (re)loaded class and 
	    // invoking the run-method
 	    GlobalMenu instance = (GlobalMenu) cl.newInstance();
 	    instance.run(winMan);
	} catch (ClassNotFoundException cnfe) {
	    System.err.println("classmenuideadapter: class cannot be located");
	    System.err.println("The exception was: "+cnfe);
	    cnfe.printStackTrace();
	} catch (ExceptionInInitializerError ei){
	    System.err.println("globalmenuideadapter: the initialization provoked "+
			       "by this method fails.");
	    System.err.println("The exception was: "+ei);
	    ei.printStackTrace();
	} catch (IllegalAccessException iae) {
	    System.err.println("globalmenuideadapter: class or "+
			       "initializer is not accessible."); 
	    System.err.println("The exception was: "+iae); 
	    iae.printStackTrace(); 
	} catch (InstantiationException ie) { 
	    System.err.println
		("globalmenuideadapter: class tried to\n"+
		 "instantiate represents an abstract class, an interface,"+
		 "an array class, a primitive type, or void; or if the"+
		 "instantiation fails for some other reason.");  
	    System.err.println("The exception was: "+ie);  
	    ie.printStackTrace();
	} catch (SecurityException se) {
	    System.err.println("globalmenuideadapter: no permission to create"+
			       "a new instance"); 
	    System.err.println("The exception was: "+se); 
	    se.printStackTrace(); 
	}

    }

    public void checkStatus(IdeCommandEvent event) {
	// here we create an instance of classes like GlobalMenueGroup1
// 	try{
// 	    //	    ( lnkKeyMenuExtension.myGlobalMenuGroups[typeI][(group-1)]).setText(((GlobalMenu) Class.forName(globalMenuRootCN + "Group" + group).newInstance()).getMenuEntry());               
// 	}catch(Exception e){
// 	    System.err.println("KeYError: " + e);
// 	    e.printStackTrace();
// 	}
    }
}

