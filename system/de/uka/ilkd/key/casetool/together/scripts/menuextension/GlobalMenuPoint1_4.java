// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

package de.uka.ilkd.key.casetool.together.scripts.menuextension;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.togethersoft.openapi.ide.project.IdeProject;
import com.togethersoft.openapi.ide.project.IdeProjectManagerAccess;
import com.togethersoft.openapi.ide.window.IdeWindowManager;
import com.togethersoft.openapi.rwi.*;

import de.uka.ilkd.key.casetool.together.TogetherGFInterface;
import de.uka.ilkd.key.casetool.together.TogetherModelClass;
import de.uka.ilkd.key.ocl.OCLExport;
import de.uka.ilkd.key.ocl.gf.ExportFormatMenu;

/** Global KeY Menu interface for exporting all OCL specifications from
  * a Together project, also includes the option of exporting them in
  * Natural Language using GF
  */
public class GlobalMenuPoint1_4 implements GlobalMenu{

    private Vector classes=null;
    private RwiModel rwiModel=null;
    private static File lastDirectory=null;
    private File directory;

    public String getMenuEntry(){
	return "Export all OCL specs";
    }

    
    public void run(IdeWindowManager winMan){
	classes = new Vector();
	rwiModel = RwiModelAccess.getModel();		
	// xxx instead of "$model" the constant RwiProperty.MODEL
	// should be used which however is (erroniously) labeled
	// deprecated.
	Enumeration rwiRoots=rwiModel.
	    rootPackages("$model");
	while (rwiRoots.hasMoreElements()) {
	    RwiPackage rwiPackage = (RwiPackage)rwiRoots.nextElement();
	    processPackage(rwiPackage);
	}
	TogetherModelClass[] classArray = 
	    new TogetherModelClass[classes.size()];
	for (int i=0; i<classArray.length; i++)
	    classArray[i] = (TogetherModelClass)
		(classes.elementAt(i));

	if (lastDirectory==null) {
	    IdeProject project =  IdeProjectManagerAccess.
		getProjectManager().getActiveProject();	    
	    if (project==null) {
		//no project open
		JOptionPane.showMessageDialog(new JFrame(), 
					      "No project open - "+
					      "Nothing to export!", 
					      "Error", 
					      JOptionPane.ERROR_MESSAGE);
		return;
	    }
	    String tprFile = project.getFileName();
	    String projectRoot = tprFile.substring
		(0, tprFile.lastIndexOf(File.separator));
	    directory=new File(projectRoot);
	}
	else {
	    directory=lastDirectory;
	}
	
	JFileChooser jFC = new JFileChooser(directory);
	// add menu for choosing between OCL and Natural Language output:
	ExportFormatMenu formatMenu = new ExportFormatMenu();
	jFC.setAccessory(formatMenu);

	int saved = jFC.showSaveDialog(new JFrame());
	if (saved == JFileChooser.APPROVE_OPTION) {
	    int format = formatMenu.getSelection();
	    String chosenName = jFC.getSelectedFile().getName();    
	    String outputDir = jFC.getCurrentDirectory().toString();
	    
	    try {
		if (format == ExportFormatMenu.OCL) {
		    String fullname = outputDir + File.separator + chosenName +
			(chosenName.endsWith(".ocl") ? "" : ".ocl");
		    File file = new File(fullname);
		    FileWriter output = new FileWriter(file);
		    OCLExport oclExporter = 
			new OCLExport(classArray, output);
		    oclExporter.export();
		    output.close();
		    lastDirectory = jFC.getCurrentDirectory();
		} else { // Natural Language
		    // first create a temporary OCL file
		    File tempOCL = File.createTempFile(
			chosenName, "");
		    FileWriter tempOutput = new FileWriter(tempOCL);
		    OCLExport oclExporter = new OCLExport (classArray, 
							   tempOutput);
		    oclExporter.export();
		    tempOutput.close();
		    
		    String fullname;
		    String formatString;
		    if (format == ExportFormatMenu.LATEX) {
			formatString = "latex";
			fullname = outputDir + File.separator + chosenName + 
			   (chosenName.endsWith(".tex") ? "" : ".tex");
		    } else { // default fallback is HTML
			formatString = "html";
			fullname = outputDir + File.separator + chosenName + 
			   (chosenName.endsWith(".html") ? "" : ".html");
		    }
		    File nl = new File(fullname);
		    TogetherGFInterface gf = new TogetherGFInterface();
		    gf.ocl2nlExport(tempOCL, nl, formatString);
		    
		    tempOCL.delete();
		    lastDirectory = jFC.getCurrentDirectory();
		}
	    } catch (IOException ioe) {
		String errorMsg = "Could not export OCL specifications.\n";
		errorMsg += ioe.toString();	    
		JOptionPane.showMessageDialog(new JFrame(), errorMsg, "Oops...", 
					      JOptionPane.ERROR_MESSAGE);
	    }
	}
    }

    protected void processPackage(RwiPackage rwiPackage){
	// 	findAssociations(rwiPackage);
	findClasses(rwiPackage);
	Enumeration subpackages = rwiPackage.subpackages();
	while (subpackages.hasMoreElements()) {
	    RwiPackage subpackage = (RwiPackage) subpackages.nextElement();
	    processPackage(subpackage);
	}
    }

    protected void findClasses(RwiPackage rwiPackage){
	Enumeration nodes = rwiPackage.nodes();
	while (nodes.hasMoreElements()) {
	    RwiNode aNode = (RwiNode) nodes.nextElement();
	    if (aNode.getProperty(RwiProperty.SHAPE_TYPE).
		equals(RwiShapeType.CLASS)){
		classes.addElement(new TogetherModelClass
		    (aNode, rwiModel, null));
	    }
	}
    }

    
}

