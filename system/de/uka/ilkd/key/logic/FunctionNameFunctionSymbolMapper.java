// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2007 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

/** 
 * Only for use in the generation of the translation of an OCL constaint !!!
 *
 * Creates a mapping of the names of functions (as strings) to the
 * corresponding functionsymbol (object) ...
 */ 

package de.uka.ilkd.key.logic;

import java.util.HashMap;
import java.util.Map;

import de.uka.ilkd.key.logic.op.Function;
import de.uka.ilkd.key.logic.op.Operator;

public class FunctionNameFunctionSymbolMapper extends Visitor {
    
    private Map funcNameSymbolMap;

    public FunctionNameFunctionSymbolMapper() {
	funcNameSymbolMap = new HashMap();
    }

    public void visit(Term visited) {
	
	if ((visited instanceof OpTerm)) {	
	    // we possibly have a functionterm as the current subterm ...
	    Operator currentOp = visited.op();
	    if(currentOp instanceof Function){
		String funcName = currentOp.name().toString();
		if (!funcNameSymbolMap.containsKey(funcName)){
		    funcNameSymbolMap.put(funcName,currentOp);
		}
	    }
	    
	}
    }

    public Map getNameSymbolMapping(){
	return funcNameSymbolMap;
    }

    
}
