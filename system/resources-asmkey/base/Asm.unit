unit Asm

export * 

import * from Base
import * from Int

/* basic predicates */
predicate def(:asm rule r;);
predicate upd(:asm rule r; any t, any s);
predicate accT(any t, any f);
predicate acc(:asm rule r; any f);

/* derived predicates */
derived predicate inv(:asm rule r; any t) = all any y ; !upd(r, t, y);
derived predicate con(:asm rule r;) = def(:r;) & joinable(:r, r;);
derived predicate joinable(:asm rule r, asm rule s;) = 
               And(any:f(%x)) all %x ; all any y ; all any z ;
                   (upd(:r; f(%x), y) & upd(:s; f(%x), z) -> y=z);
