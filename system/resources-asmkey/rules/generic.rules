// This file is part of KeY - Integrated Deductive Software Design 
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains taclets that are applicable for every sort (as they
// use generic sorts).
// The format is the same as for problem files.

/** done */

taclets {

  // Gamma taclets
  all_left { find (all #u.#phi ==>) varcond (static #t) add ({#u #t}(#phi) ==>) heuristics(gamma) };
  ex_right { find (==> ex #u.#phi) varcond (static #t) add (==> {#u #t}(#phi)) heuristics(gamma) };
  all_left_delete { find (all #u.#phi ==>) varcond (static #t) replacewith ({#u #t}(#phi) ==>)
                    heuristics(gamma_destructive) };
  ex_right_delete { find (==> ex #u.#phi) varcond (static #t) replacewith (==> {#u #t}(#phi))
                    heuristics(gamma_destructive) };
  inst_all { if (all #u.#phi ==>) find (#t) add ({#u #t waryEx}(#phi) ==>) };
  inst_ex  { if (==> ex #u.#phi) find (#t) add (==> {#u #t waryAll}(#phi)) };
  
  // delta taclets
  all_right { find (==> all #u.#phi) varcond ( #sk new depending on #phi )
		replacewith (==> {#u #sk}#phi) heuristics (delta) };
  ex_left { find (ex #u.#phi ==>) varcond ( #sk new depending on #phi )
		replacewith ({#u #sk}#phi ==>) heuristics (delta) };
  
  // simplification
  all_unused { find (all #u.#phi) varcond (#u not free in #phi) 
		 replacewith (#phi)
		 heuristics (simplify) };
  ex_unused  { find (ex #u.#phi) varcond (#u not free in #phi)
		 replacewith (#phi)
		 heuristics (simplify) };
  all_and_switch { find (all #u.(#phi & #psi))
		     replacewith ((all #u.#phi) & (all #u.#psi))
  //		     heuristics (split)
 };

  ex_or_switch   { find (ex #u.(#phi | #psi))
		     replacewith ((ex #u.#phi) | (ex #u.#psi))
  //		     heuristics (split)
 };

  all_pull_out0 { find ((all #u.#phi) & #psi)
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#phi & #psi))
		  heuristics (pull_out_quantifier) };

  all_pull_out1 { find (#psi & (all #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#psi & #phi))
		  heuristics (pull_out_quantifier) };

  all_pull_out2 { find ((all #u.#phi) | #psi)
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#phi | #psi))
		  heuristics (pull_out_quantifier) };

  all_pull_out3 { find (#psi | (all #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#psi | #phi))
		  heuristics (pull_out_quantifier) };

  all_pull_out4 { find ((all #u.#phi) -> #psi)
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#phi -> #psi))
		  heuristics (pull_out_quantifier) };

  all_pull_out5 { find (#psi -> (all #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#psi -> #phi))
		  heuristics (pull_out_quantifier) };

  all_pull_out6 { find (!(all #u.#phi))
		  replacewith (ex #u.(!#phi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out0 { find ((ex #u.#phi) & #psi)
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#phi & #psi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out1 { find (#psi & (ex #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#psi & #phi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out2 { find ((ex #u.#phi) | #psi)
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#phi | #psi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out3 { find (#psi | (ex #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#psi | #phi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out4 { find ((ex #u.#phi) -> #psi)
		  varcond ( #u not free in #psi )
		  replacewith (all #u.(#phi -> #psi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out5 { find (#psi -> (ex #u.#phi))
		  varcond ( #u not free in #psi )
		  replacewith (ex #u.(#psi -> #phi))
		  heuristics (pull_out_quantifier) };

  ex_pull_out6 { find (!(ex #u.#phi))
		  replacewith (all #u.(!#phi))
		  heuristics (pull_out_quantifier) };


  
  // equality
  close_eq { find (#s = #s) replacewith (true) heuristics (concrete) };


  commute_eq { find(#s = #t) //varcond ( #s smaller than #t )
               replacewith (#t = #s)
               heuristics ( order_terms ) };
  make_insert_eq { find (#s = #t ==>)
		     addrules ( insert_eq { find (#s) replacewith (#t) } )
		     heuristics (simplify) noninteractive  };
  //make_insert_eq_nonrigid { find (#s = #t ==>)
//		     addrules ( insert_eq_nonrigid { find (#s) 
  //                                                   replacewith (#t)
    //                                                 displayname "insert_eq" sameUpdateLevel } )
	//	     heuristics (simplify) noninteractive  };
  insert_eq_all  { find (#s = #t ==>)
		     replacewith (==>)
		     addrules ( auto_insert_eq { find (#s) 
						 replacewith (#t)
						 heuristics (simplify) } ) };


///////////////////////////////////////////////////////////////////////////////

  apply_eq { if ( #s = #t ==> ) find ( #s ) //varcond ( #t smaller than #s )
                              replacewith ( #t )
             heuristics ( apply_equations ) sameUpdateLevel };

  //apply_eq_rigid { if ( #s = #t ==> ) find ( #s ) varcond ( #t smaller than #s )
   //                                   replacewith ( #t )
    //         heuristics ( apply_equations )
     //        displayname "apply_eq" };

///////////////////////////////////////////////////////////////////////////////


//  rewrite { find(#s) sameUpdateLevel
//            replacewith(#t) add(#s = #t ==>);
//            add(==> #s = #t) } ;

//--------------- queries ----------------------------------------------------//

/*  query_cut_1 { find (==> #s=#mr) varcond(typeof(#mr) #v new) 
	replacewith (==> #s=#t); 
	add (==> <{#typeof(#mr) #v=#mr; }>#v=#t)  
        displayname "query cut" };

  query_cut_2 { find (==> #mr=#s) varcond(typeof(#mr) #v new) 
	replacewith (==> #t=#s); 
	add (==> <{#typeof(#mr) #v=#mr; }>#v=#t)  
        displayname "query cut" };

  query_1 { find (==> #mr=#s) varcond(typeof(#mr) #v new)
          add (==> <{#typeof(#mr) #v=#mr; }>#v=#s)  
          displayname "query" };

  query_2 { find (==> #s=#mr) varcond(typeof(#mr) #v new)
          add (==> <{#typeof(#mr) #v=#mr; }>#v=#s)
          displayname "query" };

  query_3 { find (#mr=#s ==>) varcond(typeof(#mr) #v new)
          add ( ==> <{#typeof(#mr) #v=#mr; }>!#v=#s)  
          displayname "query" };

  query_4 { find (#s=#mr) varcond(typeof(#mr) #v new)
          add ( ==> <{#typeof(#mr) #v=#mr; }>!#v=#s )
          displayname "query" };
*/


}
