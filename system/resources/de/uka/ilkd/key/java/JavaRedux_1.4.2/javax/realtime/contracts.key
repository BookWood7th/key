\contracts{

Memorystack_push{
  

  \programVariables{
	javax.realtime.MemoryStack result,s;
	javax.realtime.MemoryArea m;
  }

    true ->
	\<{result=s.push(m)@javax.realtime.MemoryStack;}\>
		!(result=null) & result.stack.length==s.stack.length+1 &
                result.stack[stack.length]==m & \forall int i; (i>=0 &
                i<stack.length -> result.stack[i]==stack[i]) &
		result=javax.realtime.MemoryStack::<get>(
			javax.realtime.MemoryStack.<nextToCreate>) &
		javax.realtime.MemoryStack.<nextToCreate>=
			javax.realtime.MemoryStack::<nextToCreate>@pre+1 &
		result.stack = javax.realtime.MemoryArea[]::<get>(
			javax.realtime.MemoryArea[].<nextToCreate>) &
		javax.realtime.MemoryArea[].<nextToCreate>=
			javax.realtime.MemoryArea::<nextToCreate>@pre+1;
    
	\modifies {javax.realtime.MemoryArea[].<nextToCreate>, 
	       javax.realtime.MemoryArea[]::<get>(
			javax.realtime.MemoryArea[].<nextToCreate>).<created>,
		javax.realtime.MemoryStack.<nextToCreate>, 
	       	javax.realtime.MemoryStack::<get>(
			javax.realtime.MemoryStack.<nextToCreate>).<created>}
};






}