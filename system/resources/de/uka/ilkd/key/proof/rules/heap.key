\sorts {
   Field;
   Heap;
   any;
}

\functions {
   //These function symbols interpret an element of sort Heap as a
   //two dimensional array, where the first index is of sort Object
   //and the second index of sort Field.
   any select(Heap, any, Field);
   Heap store(Heap, any, Field, any);

   //Dedicated heap symbol. Just a single program variable of sort Heap!
   //This symbol is to be used by the symbolic execution rules:
   //[o.f = e; ...]phi -->  {heap := store(heap, o, f, e)}[...]phi
   //(if we want it to look prettier, we can have the pretty printer render 
   // the update "heap := store(heap, o, f, e)" as "o.f := e")
   \nonRigid[Location] Heap heap;
}

\schemaVariables {
   \term Heap h;
   \term any o;
   \term any o2;
   \term Field f;
   \term Field f2;
   \term any x;
}

\rules {
   //Single axiom for the theory of arrays: storing x in an array at index (o,f) 
   //leads to an array where index (o,f) has the value x and everything else is 
   //unchanged. This can be applied eagerly (heuristics "simplify").
   heapUpdate {
     \find(select(store(h,o,f,x), o2, f2))
     \sameUpdateLevel
     \replacewith(\if(o = o2 & f = f2)\then(x)\else(select(h,o2,f2)))
     \heuristics(simplify)
   };
}
