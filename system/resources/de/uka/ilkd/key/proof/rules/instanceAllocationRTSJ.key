\sorts {
  \generic G;
  \generic G1 \extends G;
  \generic H;
  \generic J;
  \generic K;
  \generic INT \extends int;
}

\schemaVariables {
  \modalOperator { diamond, box, throughout,
                   diamond_trc, box_trc, throughout_trc,
                   diamond_tra, box_tra, throughout_tra,
			       diamond_susp, box_susp, throughout_susp } #allmodal ;
  
  \program <allocate> #allocate;
  \program <allocateArea> #allocateArea;
 
  \program SpecialConstructorReference #scr;
  \program ImplicitClassInitialized #classInitialized ;
  \program ImplicitNextToCreate #nc;
  \program ImplicitSize #size1, #size2;
  \program ImplicitCreated #c;
  \program ImplicitEnclosingThis #et;
  \program InstanceCreation #n;
  \program ArrayCreation #na;
  \program ArrayInitializer #arrayinitializer;
 
  \program SimpleExpression #len;
  \program ArrayLength #length ;
 
  \program makeTransientArray #maketransientarray;

  \program Expression #e, #e0, #e1, #e2, #e3;  
  \program StaticVariable #staticField;
  \program Variable #v0, #v1, #v2, #v3, #a, #a1, #a2;
  \program LeftHandSide #lhs;
  \program push #push;
  \program delete #delete;
  \program Type #t, #t1, #t2;
  \term int idx0, idx1, allocNr, symbLength, #s1, #l1, #s2, #l2;
  \program ExecutionContext #ex;

  \term numbers #size, #l;
   
  \variables int iv;
  \variables boolean bv;
  \variables G ov;
  \term G ot, obj2;
  \term H const, obj1;
  \term J obj;
  \formula post, b;

  \term int ws1, ws2;
  
  \term boolean bool;
  \skolemTerm G sk ;
  
  \term G arr;
  \term H #term;
  // attention some strategies rely on the name of the SV if you change it, please adopt
  // the strategies as well
  \term int negLit;
  \term int nonNegLit;
}

\functions{
  int maxSpace(any);
}

\rules(programRules:Java, rtsj:on) {

//----------------------------------------------------------------------------
// ---------                heap space consumption              --------------
//----------------------------------------------------------------------------

   // For PERC Pico we only work with symbolic object sizes, not concrete ones.

   array_literal_dimension{
	\find(arraySize(Z(#size), Z(#l)))
        \replacewith(#calculateArraySize(Z(#size), Z(#l)))
        \heuristics (simplify_literals)	
   };

   array_worst_best_case_memory_consumption{
	\find(arraySize(Z(#size), symbLength)) \sameUpdateLevel
        \add(
	arraySize(Z(#size), symbLength) <= #wcArraySize(Z(#size), symbLength) &
	arraySize(Z(#size), symbLength) >= #bcArraySize(Z(#size), symbLength) &
	arraySize(Z(#size), symbLength) >= 16
	==>)
	\heuristics(inReachableStateRTSJ)
   };


//-----------------------------------------------------------------------------
}

\rules(programRules:Java, rtsj:on) {

   deleteScope{
	\find(\modality{#allmodal}{..javax.realtime.MemoryArea()::#e.#delete(#v1);...}\endmodality(post))
        \varcond(\new(#v3, jint), \hasSort(#e, G) )
	\replacewith(
		(
			outerScope(#attribute:stack(#v1), #stackAtIndex(#v3)) &
			outerScope(#attribute:stack(#e), #stackAtIndex(#v3)) &
			#v3 >= #nextToCreateStack &
			\forall ov;((#created(ov)=TRUE & !ov=#v1 & !ov=#e &
				     (outerScope(#attribute:stack(#v1), #attribute:stack(ov)) | 
				      outerScope(#attribute:stack(#e), #attribute:stack(ov)))) -> 
				    outerScope(#stackAtIndex(#v3), #attribute:stack(ov)))
		)
		->
		{
			#attribute:stack(#v1):=#stackAtIndex(#v3) ||
			#nextToCreateStack := #v3+1 ||
		 	\for iv; \if (iv>=#nextToCreateStack & iv <= #v3) #created(#stackAtIndex(iv)) := TRUE ||
			#memoryArea(#stackAtIndex(#v3)):=#memoryArea(#v1) 
		//	\for olv; \if (#memoryArea(olv)=#e) #memoryArea(olv) := #v1
		}
		#updateScope(#e, #v1, \modality{#allmodal}{..  ...}\endmodality(post))
		)
	\heuristics(simplify_object_creation)
	};

  memoryStackPush{
	\find(\modality{#allmodal}{..javax.realtime.MemoryStack(#v0)::#e.#push(#v2);...}\endmodality(post))
        \varcond(\new(#a, javax.realtime.ScopedMemory[]), \hasSort(#e, G),  \new(#v3, jint) )
        \replacewith ( (outerScope(#e,G::<get>(#nextToCreate(#e)+#v3)) & #v3>=0) -> 
		{
		 \for iv; \if (iv>=#nextToCreate(#e) & iv <= #nextToCreate(#e)+#v3) #created(G::<get>(iv)) := TRUE ||
		 #v0 := G::<get>(#nextToCreate(#e)+#v3) ||
		 #nextToCreate(#e) := #nextToCreate(#e)+1+#v3
		}
		{
		 #memoryArea(#v0):=#memoryArea(#e)
		}
		\modality{#allmodal}{..  ...}\endmodality(post)

	)
	\heuristics(simplify_object_creation)
   };

}

\rules(programRules:Java, rtsj:on, memory:off) {
   allocateInstance {       
        \find (\modality{#allmodal}{.#t1(<currentMemoryArea>=#e).. #t(#lhs)::#t.#allocate(); ...}\endmodality(post)) 	
	\varcond(\hasSort(#t1, G), \new(#v0, \typeof(#t1)))
        /*
           Attention: critical for correctness: 
                  * allocation should be done simultaneously
                  * increment _needs_ arithmetical add operator (no mod semantics)
        */                   
        \replacewith ({#lhs := G::<get>(#nextToCreate(#v0)) || 
                       #nextToCreate(#v0) := add(#nextToCreate(#v0), 1) ||
                       #created(G::<get>(#nextToCreate(#v0))) := TRUE ||
		       #memoryArea(G::<get>(#nextToCreate(#v0))):=#e }
	                    \modality{#allmodal}{..  ...}\endmodality(post))
	\heuristics(simplify_object_creation)
	\oldname "instance_allocation_contract"
   };

   arrayCreation { 
        \find (\modality{#allmodal}{.. #lhs = #na; ...}\endmodality(post)) 	
        \varcond(\new(#v0, \typeof(#na)))	
        \replacewith (#arraySize(\modality{#allmodal}{.. 	
		#typeof(#na) #v0; 
		#init-array-creation(#v0, #na);
                #lhs = #v0; ...}\endmodality(post)))
	    \heuristics(simplify_prog)
        \displayname "arrayCreation"
	\oldname "array_creation"
   };

}

\rules(programRules:Java, rtsj:on, memory:on) {
   allocateInstance {       
        \find (\modality{#allmodal}{.#t1(<currentMemoryArea>=#e).. #t(#lhs)::#t.#allocate(); ...}\endmodality(post)) 	
	\varcond(\hasSort(#t1, G), \new(#v0, \typeof(#t1)))
        /*
           Attention: critical for correctness: 
                  * allocation should be done simultaneously
                  * increment _needs_ arithmetical add operator (no mod semantics)
        */                   
        \replacewith ({#lhs := G::<get>(#nextToCreate(#v0)) || 
                       #nextToCreate(#v0) := add(#nextToCreate(#v0), 1) ||
                       #created(G::<get>(#nextToCreate(#v0))) := TRUE ||
		       #memoryArea(G::<get>(#nextToCreate(#v0))):=#e }
	                      #objectSize(#v0, \if(#attribute:consumed(#e)<=#attribute:size(#e))
			\then(\modality{#allmodal}{..  ...}\endmodality(post))
			\else(\modality{#allmodal}{.. throw javax.realtime.RealtimeSystem.oome(); ...}\endmodality(post))
			, #e))
	\heuristics(simplify_object_creation)
	\oldname "instance_allocation_contract"
   };

   arrayCreation { 
        \find (\modality{#allmodal}{.. #lhs = #na; ...}\endmodality(post)) 	
        \varcond(\new(#v0, \typeof(#na)))	
        \replacewith (#arraySize(\modality{#allmodal}{.. 	
		#typeof(#na) #v0; 
		#init-array-creation(#v0, #na);
                #lhs = #v0; ...}\endmodality(post)))
	    \heuristics(simplify_prog)
        \displayname "arrayCreation"
	\oldname "array_creation"
   };

}

\rules(programRules:Java, rtsj:on) {

   outerScopeQuery{
	\find(\modality{#allmodal}{..javax.realtime.MemoryArea(#v0)::javax.realtime.MemoryArea.outerScopeM(#v1,#v2);...}\endmodality(post))
        \replacewith (\if(outerScope(#attribute:stack(#v1), #attribute:stack(#v2)))
			\then({#v0:=TRUE}\modality{#allmodal}{..  ...}\endmodality(post))
			\else({#v0:=FALSE}\modality{#allmodal}{..  ...}\endmodality(post))
	)
	\heuristics(simplify_object_creation)
   };
}

\rules(programRules:Java, rtsj:on) {

   stack_injective{
	\assumes(inReachableState , obj.#c = TRUE, obj2.#c = TRUE ==> obj2.#a=null)
	\find(obj.#a = obj2.#a) \sameUpdateLevel 
	\varcond(\scopeStack(#a))
        \replacewith(obj = obj2)
	\heuristics(inReachableStateRTSJConcrete)
   };	

}

\rules(programRules:Java, rtsj:on) {   

   allocateArea {       
        \find (\modality{#allmodal}{.. #t()::#t.#allocateArea(#v0); ...}\endmodality(post)) 	
        /*
           Attention: critical for correctness: 
                  * allocation should be done simultaneously
                  * increment _needs_ arithmetical add operator (no mod semantics)
        */                   
        \replacewith ({#heapSpace := #heapSpace + #v0}
	                    \modality{#allmodal}{..  ...}\endmodality(post)
		     )
	\heuristics(simplify_object_creation)
	\oldname "instance_allocation_contract"
   };


//----------------------------------------------------------------------------
// ---------                heap space consumption              --------------
//----------------------------------------------------------------------------

   working_space_greater_equal_zero{
	\find(ws1)
	\varcond(\testWorkingSpaceOp(ws1))
	\add(geq(ws1,0) ==>)  
   };		

   working_space_same_method{
	\find(==> leq(ws1,ws2))
	\varcond(\equalWorkingSpaceOp(ws1, ws2))
	\add(==> #uniqueAnonUpdate(((inReachableState & #getPreForWS(ws1,ws2)) -> #getPreForWS(ws2,ws2))))
   };

  working_space_same_method_non_rigid{
        \find(ws1)
	\varcond(\testWorkingSpaceNonRigidOp(ws1))
	"Pre": \add(==> #preValidInStateOfWS(ws1, ws2));
	"Working Space Relation": \add(leq(ws1, ws2) ==>)
  };

//Richard: Shouldn't the rules below have an inReachablestate as assumption?
// FIX ME!!!

   object_size_greater_zero_static{
	\find(#size1)
	\add(#size1>0 ==>)
	\heuristics(inReachableStateRTSJ)
   };

   // t2<:t1 ==> \max_space(t2)<=\max_space(t1)
   size_behav_subtype_static1{
	\assumes(#size1<=#term ==>)
	\find(#size2) \sameUpdateLevel
	\varcond(\same(\containerType(#size1), G),
		 \same(\containerType(#size2), G1) )
	\add(#size1>=#size2 ==>)
	\heuristics(inReachableStateRTSJ)
   };

   // t2<:t1 ==> \max_space(t2)<=\max_space(t1)
   size_behav_subtype_static2{
	\assumes(#size2>=#term  ==>)
	\find(#size1) \sameUpdateLevel
	\varcond(\same(\containerType(#size1), G),
		 \same(\containerType(#size2), G1) )
	\add(#size1>=#size2 ==>)
	\heuristics(inReachableStateRTSJ)
   };

   // o instanceof t ==> \max_space(o) <= \max_space(t)
   size_behav_subtype_instance1{
	\assumes(maxSpace(obj)>=#term  ==>)
	\find(#size1) \sameUpdateLevel
	\varcond(\sub(J, \containerType(#size1)) )
	\add(maxSpace(obj)<=#size1 ==>)
	\heuristics(inReachableStateRTSJ)
   };

   // o instanceof t ==> \max_space(o) <= \max_space(t)
   size_behav_subtype_instance2{
	\assumes(#size1>=#term ==>)
	\find(maxSpace(obj)) \sameUpdateLevel
	\varcond(\sub(J, \containerType(#size1)) )
	\add(maxSpace(obj)<=#size1 ==>)
	\heuristics(inReachableStateRTSJ)
   };

}

//----------------------------------------------------------------------------
// ---------                    memory scopes                   --------------
//----------------------------------------------------------------------------
   
// TODO: remove redundant rules

\rules(programRules:Java, rtsj:on) {

   only_outer_scope_object_is_referenced_non_null {
         \assumes (inReachableState, obj.#c = TRUE ==> obj.#a = null)	 
         \find ( obj.#a ) \sameUpdateLevel
         \varcond(\isReference(\typeof(#a)), \not\parentScope(#a), \not\memoryArea(#a)) 
	 \add (outerScope(#attribute:stack(#memoryArea(obj.#a)), #attribute:stack(#memoryArea(obj))) ==>)
         \displayname "referenced object is in outer scope"	 
   };

   parent_outer_scope {
         \assumes (inReachableState, obj.#c = TRUE ==> #v0 = null)
         \find ( obj.#a=#v0 ==> ) 
         \varcond(\parentScope(#a))
	 \add (outerScope(#attribute:stack(#v0), #attribute:stack(obj)) ==> )
	 \heuristics(inReachableStateRTSJConcrete)
   };	

   only_outer_scope_object_is_referenced_non_null_concrete {
         \assumes (inReachableState, obj.#c = TRUE ==> obj.#a = null)	 
         \find (==> outerScope(obj.#a.#a1.#a2, obj.#a1.#a2))
         \varcond(\isReference(\typeof(#a)), \not\parentScope(#a), \not\memoryArea(#a))
	 \replacewith (==> true)
	 \heuristics(concrete)
         \displayname "referenced object is in outer scope"	 
   };

   only_outer_scope_object_is_referenced_non_null_3 {
         \assumes (inReachableState, obj.#c = TRUE ==> obj.#a = null)	 
         \find (==> outerScope(obj.#a.#a1.#a2, obj2))
         \varcond(\isReference(\typeof(#a)), \not\parentScope(#a), \not\memoryArea(#a))
	 \add (==> outerScope(obj.#a1.#a2, obj2))
	 \heuristics(inReachableStateRTSJConcrete)
         \displayname "referenced object is in outer scope"	 
   };

   outer_scope_non_null {
//	 \assumes (inReachableState ==>)
         \find (outerScope(obj, obj2) ==>)
	 \add (==> obj=null, obj2=null)
	 \heuristics(inReachableStateRTSJConcrete)
   };

   //only the immortal scope is allocated in an inner scope
   memory_areas_are_not_allocated_in_inner_scope1{
         \assumes (inReachableState, obj.#c = TRUE  ==>)	 
         \find (outerScope(obj.#a2, obj.#a.#a2)) \sameUpdateLevel
	 \varcond(\memoryArea(obj), \memoryArea(#a), \new(#v0, javax.realtime.ImmortalMemory))
	 \replacewith (\<{#v0=javax.realtime.ImmortalMemory.instance();}\>obj=#v0)
	 \heuristics(concrete)
         \displayname "memory areas are allocated in outer scope"
   };

   stack_immortal{
         \assumes (inReachableState, obj.#c = TRUE ==>)	 
         \find (outerScope(obj.#a.#a2, obj)) \sameUpdateLevel
	 \varcond(\memoryArea(#a))
	 \replacewith (true)
	 \heuristics(concrete)
         \displayname "memory areas are allocated in outer scope"
   };

/*   only_outer_scope_object_is_referenced_non_null_4 {
         \assumes (inReachableState, obj2.#c = TRUE, obj.#c = TRUE ==> obj2.#a = null)	 
         \find (outerScope(obj, obj2.#a.#a1.#a2) ==>)
         \varcond(\isReference(\typeof(#a)), \not\parentScope(#a), \not\memoryArea(#a))
	 \add (outerScope(obj, obj2.#a1.#a2) ==>)
	 \heuristics(inReachableStateRTSJ)
         \displayname "referenced object is in outer scope"	 
   };

   every_object_has_memory_area {
	 \assumes (inReachableState ==>)
         \find (obj.#c = TRUE ==>)	 
         \add ((!(#memoryArea(obj))=null) & !(#attribute:stack(#memoryArea(obj))=null) ==>)
         \displayname "referenced object is in outer scope"	 
   };*/

   every_object_has_memory_area {
	 \assumes (inReachableState ==>)
         \find (obj.#c = TRUE ==>)	 
         \add (==> #memoryArea(obj)=null)
         \displayname "memory area not null"	 
   };

   only_outer_scope_object_is_referenced_by_arrays_non_null {	 
         \assumes (inReachableState, arr.#c = TRUE ==> arr[idx0]@(G) = null)	 
         \find ( arr[idx0]@(G) ) \sameUpdateLevel
         \varcond(\isReferenceArray(arr))	 
	 \add (outerScope(#attribute:stack(#memoryArea(arr[idx0]@(G))), #attribute:stack(#memoryArea((arr)))) ==>)
         \heuristics(inReachableStateRTSJ)
         \displayname "referenced object is in outer scope"  
   };

   only_outer_scope_object_is_referenced_by_arrays_non_null_2 {	 
         \assumes (inReachableState, arr.#c = TRUE ==> arr[idx0]@(G) = null)	 
         \find (==> outerScope(arr[idx0]@(G).#a.#a2, arr.#a.#a2))
         \varcond(\isReferenceArray(arr))	 
	 \replacewith (==> true)
         \heuristics(concrete)
         \displayname "referenced object is in outer scope"  
   };

   only_outer_scope_object_is_referenced_by_arrays_non_null_3 {	 
         \assumes (inReachableState, arr.#c = TRUE ==> arr[idx0]@(G) = null)	 
         \find (==> outerScope(arr[idx0]@(G).#a.#a2, obj))
         \varcond(\isReferenceArray(arr))	 
	 \add (==> outerScope(arr.#a.#a2, obj))
         \heuristics(inReachableStateRTSJConcrete)
         \displayname "referenced object is in outer scope"  
   };

//redundant
/*   only_outer_scope_object_is_referenced_by_arrays_non_null_4 {	 
         \assumes (inReachableState, arr.#c = TRUE ==> arr[idx0]@(G) = null)	 
         \find (outerScope(obj, arr[idx0]@(G).#a.#a2) ==>)
         \varcond(\isReferenceArray(arr))	 
	 \add (outerScope(obj, arr.#a.#a2) ==>)
         \heuristics(inReachableStateRTSJ)
         \displayname "referenced object is in outer scope"  
   };*/

   outer_scope_antisymmetric {
	 \assumes(outerScope(obj2, obj) ==>)
         \find (outerScope(obj, obj2) ==>)
         \add (obj=obj2 ==>)
         \heuristics(simplify)
   };

   outer_scope_reflexive {
         \assumes (==> obj = null)
         \find (outerScope(obj, obj))
	 \replacewith (true)
	 \heuristics(concrete)
         \displayname "outer scope reflexive" 
   };

   outer_scope_reflexive_repository_object {
         \find (outerScope(G::<get>(allocNr), G::<get>(allocNr)))
	 \replacewith (true)
	 \heuristics(concrete)
         \displayname "outer scope reflexive" 
   };

   outer_scope_transitive {
	 \assumes(outerScope(obj2, obj1) ==>)
         \find (outerScope(obj1, obj) ==>)
	 \add (outerScope(obj2, obj) ==>)
	 \heuristics(inReachableStateRTSJConcrete)
   };

   immortal_is_outermost_scope {
	 \assumes(immortal(obj2) ==>)
         \find (outerScope(obj1, obj2) ==>)
	 \add (immortal(obj1) ==>)
	 \heuristics(inReachableStateRTSJConcrete)
         \displayname "immortal is outermost scope"  
   };

   immortal_is_outermost_scope2 {
	 \assumes(immortal(obj2) ==>)
         \find (outerScope(obj2, obj1))\sameUpdateLevel
	 \replacewith (!obj1=null)
	 \heuristics(concrete)
         \displayname "immortal is outermost scope"  
   };

   immortal_is_outermost_scope3 {
         \assumes (inReachableState, obj.#c = TRUE ==> obj.#a = null)	 
         \find (==> immortal(obj.#a.#a1.#a2))
         \varcond(\isReference(\typeof(#a)))
	 \add (==> immortal(obj.#a1.#a2))
	 \heuristics(inReachableStateRTSJConcrete)
         \displayname "immortal is outermost scope"	 
   };

   immortal_is_outermost_scope4 {
         \assumes (inReachableState, arr.#c = TRUE ==> arr[idx0]@(G) = null)	 
         \find (==> immortal(arr[idx0]@(G).#a.#a2))
         \varcond(\isReferenceArray(arr))	 
	 \add (==> immortal(arr.#a.#a2))
         \heuristics(inReachableStateRTSJConcrete)
         \displayname "immortal is outermost scope"	 
   };

   immortal_unique {
	 \assumes(immortal(obj2) ==>)
         \find (immortal(obj1) ==>)
	 \add (obj1=obj2 ==>)
	 \heuristics(inReachableStateRTSJConcrete)
   };
}

\rules(programRules:Java, initialisation:disableStaticInitialisation, rtsj:on){ //????

   static_fields_are_null_or_reference_created_objects {
   	\assumes (inReachableState ==>)
   	\find (==> #staticField = null)
   	\varcond(\isReference[non_null](\typeof(#staticField)))
   	\add(#created(#staticField) = TRUE, immortal(#attribute:stack(#memoryArea(#staticField))) ==>)
        \heuristics(inReachableStateImplication)
   	\displayname "static field welldefined"
   };

}


   


