\sorts {
    Field;
    LocSet;
}

\functions {
    LocSet empty;
    LocSet singleton(Object, Field);
    LocSet union(LocSet, LocSet);
    LocSet intersect(LocSet, LocSet);
    LocSet setMinus(LocSet, LocSet);    
    LocSet complement(LocSet);
    LocSet allFields(Object);
    LocSet everything;
}

\predicates {
    elementOf(Object, Field, LocSet);
    subset(LocSet, LocSet);
    disjoint(LocSet, LocSet);
}


\rules {
 
    //--------------------------------------------------------------------------
    //rules for elementOf
    //--------------------------------------------------------------------------
   
    elementOfEmpty {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        
        \find(elementOf(o, f, empty))
        \replacewith(false)
        \heuristics(simplify)
    };
    
    elementOfEmpty2 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        \schemaVar \term LocSet s;
        
        \assumes(s = empty ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel        
        
        \replacewith(false)
        \heuristics(simplify)
    };

    elementOfEmpty3 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        \schemaVar \term LocSet s;
        
        \assumes(empty = s ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel        
        
        \replacewith(false)
        \heuristics(simplify)
    };

    elementOfSingleton {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        
        \find(elementOf(o, f, singleton(o2, f2)))
        \replacewith(o = o2 & f = f2)
        \heuristics(simplify)
    };
    
    elementOfSingleton2 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        \schemaVar \term LocSet s;
        
        \assumes(s = singleton(o2, f2) ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(o = o2 & f = f2)
        \heuristics(simplify)
    };
    
    elementOfSingleton3 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f, f2;
        \schemaVar \term LocSet s;
        
        \assumes(singleton(o2, f2) = s ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(o = o2 & f = f2)
        \heuristics(simplify)
    };
    
    elementOfUnion {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2;
        
        \find(elementOf(o, f, union(s, s2)))
        \replacewith(elementOf(o, f, s) | elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfUnion2 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(s3 = union(s, s2) ==>)
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) | elementOf(o, f, s2))
        \heuristics(simplify)
    };    
    
    elementOfUnion3 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(union(s, s2) = s3 ==>)
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) | elementOf(o, f, s2))
        \heuristics(simplify)
    };    
    
    elementOfIntersect {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2;
        
        \find(elementOf(o, f, intersect(s, s2)))
        \replacewith(elementOf(o, f, s) & elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfIntersect2 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(s3 = intersect(s, s2) ==> )
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) & elementOf(o, f, s2))
        \heuristics(simplify)
    };

    elementOfIntersect3 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(intersect(s, s2) = s3 ==>)
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) & elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfSetMinus {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2;
        
        \find(elementOf(o, f, setMinus(s, s2)))
        \replacewith(elementOf(o, f, s) & !elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfSetMinus2 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(s3 = setMinus(s, s2) ==>)
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) & !elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfSetMinus3 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2, s3;
        
        \assumes(setMinus(s, s2) = s3 ==>)
        \find(elementOf(o, f, s3))
        \sameUpdateLevel
        
        \replacewith(elementOf(o, f, s) & !elementOf(o, f, s2))
        \heuristics(simplify)
    };
    
    elementOfComplement {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s;
        
        \find(elementOf(o, f, complement(s)))
        \replacewith(!elementOf(o, f, s))
        \heuristics(simplify)
    };
    
    elementOfComplement2 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2;
        
        \assumes(s2 = complement(s) ==>)
        \find(elementOf(o, f, s2))
        \sameUpdateLevel
        
        \replacewith(!elementOf(o, f, s))
        \heuristics(simplify)
    };

    elementOfComplement3 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s, s2;
        
        \assumes(complement(s) = s2 ==>)
        \find(elementOf(o, f, s2))
        \sameUpdateLevel
        
        \replacewith(!elementOf(o, f, s))
        \heuristics(simplify)
    };

    elementOfAllFields {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f;
        
        \find(elementOf(o, f, allFields(o2)))
        \replacewith(o = o2)
        \heuristics(simplify)
    };
    
    elementOfAllFields2 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s;
        
        \assumes(s = allFields(o2) ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(o = o2)
        \heuristics(simplify)
    };

    elementOfAllFields3 {
        \schemaVar \term Object o, o2;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s;
        
        \assumes(allFields(o2) = s ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(o = o2)
        \heuristics(simplify)
    };

    elementOfEverything {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        
        \find(elementOf(o, f, everything))
        \replacewith(true)
        \heuristics(simplify)
    };

    elementOfEverything2 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s;
        
        \assumes(s = everything ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(true)
        \heuristics(simplify)
    };
    
    elementOfEverything3 {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \term LocSet s;
        
        \assumes(everything = s ==>)
        \find(elementOf(o, f, s))
        \sameUpdateLevel
        
        \replacewith(true)
        \heuristics(simplify)
    };
    
    
    //--------------------------------------------------------------------------
    //rules for empty
    //--------------------------------------------------------------------------
    
    unionWithEmpty1 {
        \schemaVar \term LocSet s;
        
        \find(union(s, empty))
        \replacewith(s)
        \heuristics(concrete)
    };
    
    unionWithEmpty2 {
        \schemaVar \term LocSet s;
        
        \find(union(empty, s))
        \replacewith(s)
        \heuristics(concrete)
    };
    
    intersectWithEmpty1 {
        \schemaVar \term LocSet s;
        
        \find(intersect(s, empty))
        \replacewith(empty)
        \heuristics(concrete)
    };

    intersectWithEmpty2 {
        \schemaVar \term LocSet s;
        
        \find(intersect(empty, s))
        \replacewith(empty)
        \heuristics(concrete)
    };

    setMinusWithEmpty1 {
        \schemaVar \term LocSet s;
        
        \find(setMinus(s, empty))
        \replacewith(s)
        \heuristics(concrete)
    };

    setMinusWithEmpty2 {
        \schemaVar \term LocSet s;
        
        \find(setMinus(empty, s))
        \replacewith(empty)
        \heuristics(concrete)
    };

    complementEmpty {
        \schemaVar \term LocSet s;
        
        \find(complement(empty))
        \replacewith(everything)
        \heuristics(concrete)
    };
    
    
    //--------------------------------------------------------------------------
    //rules for everything
    //--------------------------------------------------------------------------
    
    unionWithEverything1 {
        \schemaVar \term LocSet s;
        
        \find(union(s, everything))
        \replacewith(everything)
        \heuristics(concrete)
    };
    
    unionWithEverything2 {
        \schemaVar \term LocSet s;
        
        \find(union(everything, s))
        \replacewith(everything)
        \heuristics(concrete)
    };
    
    intersectWithEverything1 {
        \schemaVar \term LocSet s;
        
        \find(intersect(s, everything))
        \replacewith(s)
        \heuristics(concrete)
    };

    intersectWithEverything2 {
        \schemaVar \term LocSet s;
        
        \find(intersect(everything, s))
        \replacewith(s)
        \heuristics(concrete)
    };

    setMinusWithEverything1 {
        \schemaVar \term LocSet s;
        
        \find(setMinus(s, everything))
        \replacewith(empty)
        \heuristics(concrete)
    };

    setMinusWithEverything2 {
        \schemaVar \term LocSet s;
        
        \find(setMinus(everything, s))
        \replacewith(complement(s))
        \heuristics(concrete)
    };

    complementEverything {
        \schemaVar \term LocSet s;
        
        \find(complement(everything))
        \replacewith(empty)
        \heuristics(concrete)
    };
    
    
    //--------------------------------------------------------------------------
    //rules for set predicates (reduce to elementOf)
    //--------------------------------------------------------------------------
    
    equalityToElementOf {
    	\schemaVar \term LocSet s, s2;
	\schemaVar \variables Object ov;
	\schemaVar \variables Field fv;    	
    	
    	\find(s = s2)
	\varcond(\notFreeIn(ov, s, s2), \notFreeIn(fv, s, s2))
    	\replacewith(\forall ov; \forall fv; (elementOf(ov, fv, s) <-> elementOf(ov, fv, s2)))
    	//\heuristics(simplify)
    };

    subsetToElementOf {
        \schemaVar \term LocSet s, s2;
	\schemaVar \variables Object ov;
	\schemaVar \variables Field fv;    	
        
        \find(subset(s, s2))
	\varcond(\notFreeIn(ov, s, s2), \notFreeIn(fv, s, s2))
	\replacewith(\forall ov; \forall fv; (elementOf(ov, fv, s) -> elementOf(ov, fv, s2)))
        \heuristics(simplify)
    };
    
    disjointToElementOf {
        \schemaVar \term LocSet s, s2;
	\schemaVar \variables Object ov;
	\schemaVar \variables Field fv;    	
        
        \find(disjoint(s, s2))
	\varcond(\notFreeIn(ov, s, s2), \notFreeIn(fv, s, s2))
        \replacewith(\forall ov; \forall fv; (!elementOf(ov, fv, s) | !elementOf(ov, fv, s2)))
        \heuristics(simplify)
    };
}