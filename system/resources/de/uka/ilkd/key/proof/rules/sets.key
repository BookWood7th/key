\sorts {
    Set;
}

\functions {
    Set empty;
    Set singleton(any);
    Set union(Set, Set);
    Set intersect(Set, Set);
    Set setMinus(Set, Set);    
    Set complement(Set);
    Set everything;
}

\predicates {
    elementOf(any, Set);
    subset(Set, Set);
    disjoint(Set, Set);
}


\rules {
 
    //--------------------------------------------------------------------------
    //axioms for elementOf
    //--------------------------------------------------------------------------
   
    elementOfEmpty {
        \schemaVar \term any e;
        
        \find(elementOf(e, empty))
        
        \replacewith(false)
        
        \heuristics(concrete)
    };
    

    elementOfSingleton {
        \schemaVar \term any e, e2;
        
        \find(elementOf(e, singleton(e2)))
        
        \replacewith(e = e2)
        
        \heuristics(simplify)
    };
    
    
    elementOfUnion {
        \schemaVar \term any e;
        \schemaVar \term Set s, s2;
        
        \find(elementOf(e, union(s, s2)))
        
        \replacewith(elementOf(e, s) | elementOf(e, s2))
        
        \heuristics(simplify)
    };
    
    
    elementOfIntersect {
        \schemaVar \term any e;
        \schemaVar \term Set s, s2;
        
        \find(elementOf(e, intersect(s, s2)))
        
        \replacewith(elementOf(e, s) & elementOf(e, s2))
        
        \heuristics(simplify)
    };
    
        
    elementOfSetMinus {
        \schemaVar \term any e;
        \schemaVar \term Set s, s2;
        
        \find(elementOf(e, setMinus(s, s2)))
        
        \replacewith(elementOf(e, s) & !elementOf(e, s2))
        
        \heuristics(simplify)
    };
    
    
    elementOfComplement {
        \schemaVar \term any e;
        \schemaVar \term Set s;
        
        \find(elementOf(e, complement(s)))
        
        \replacewith(!elementOf(e, s))
        
        \heuristics(simplify)
    };
    

    elementOfEverything {
        \schemaVar \term any e;
        
        \find(elementOf(e, everything))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    //--------------------------------------------------------------------------
    //axioms for equality, subset, disjoint (reduce to elementOf)
    //--------------------------------------------------------------------------
    
    equalityToElementOf {
    	\schemaVar \term Set s, s2;
	\schemaVar \variables any av;    	
    	
    	\find(s = s2)
	\varcond(\notFreeIn(av, s, s2))
	
    	\replacewith(\forall av; (elementOf(av, s) <-> elementOf(av, s2)))
    	
    	//\heuristics(simplify)
    };


    subsetToElementOf {
        \schemaVar \term Set s, s2;
	\schemaVar \variables any av;    	
        
        \find(subset(s, s2))
	\varcond(\notFreeIn(av, s, s2))
	
	\replacewith(\forall av; (elementOf(av, s) -> elementOf(av, s2)))
	
        \heuristics(simplify)
    };

    
    disjointToElementOf {
        \schemaVar \term Set s, s2;
	\schemaVar \variables any av;    	
        
        \find(disjoint(s, s2))
	\varcond(\notFreeIn(av, s, s2))
	
        \replacewith(\forall av; (!elementOf(av, s) | !elementOf(av, s2)))
        
        \heuristics(simplify)
    };

    
    //--------------------------------------------------------------------------
    //lemmata for empty
    //--------------------------------------------------------------------------
    
    unionWithEmpty1 {
        \schemaVar \term Set s;
        
        \find(union(s, empty))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
    
    unionWithEmpty2 {
        \schemaVar \term Set s;
        
        \find(union(empty, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
    
    intersectWithEmpty1 {
        \schemaVar \term Set s;
        
        \find(intersect(s, empty))
        
        \replacewith(empty)
        
        \heuristics(concrete)
    };


    intersectWithEmpty2 {
        \schemaVar \term Set s;
        
        \find(intersect(empty, s))
        
        \replacewith(empty)
        
        \heuristics(concrete)
    };


    setMinusWithEmpty1 {
        \schemaVar \term Set s;
        
        \find(setMinus(s, empty))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };


    setMinusWithEmpty2 {
        \schemaVar \term Set s;
        
        \find(setMinus(empty, s))
        
        \replacewith(empty)
        
        \heuristics(concrete)
    };
    

    complementEmpty {
        \schemaVar \term Set s;
        
        \find(complement(empty))
        
        \replacewith(everything)
        
        \heuristics(concrete)
    };
    
    
    subsetWithEmpty {
        \schemaVar \term Set s;
        
        \find(subset(empty, s))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    disjointWithEmpty1 {
        \schemaVar \term Set s;
        
        \find(disjoint(empty, s))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    disjointWithEmpty2 {
        \schemaVar \term Set s;
        
        \find(disjoint(s, empty))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    //--------------------------------------------------------------------------
    //lemmata for everything
    //--------------------------------------------------------------------------
    
    unionWithEverything1 {
        \schemaVar \term Set s;
        
        \find(union(s, everything))
        
        \replacewith(everything)
        
        \heuristics(concrete)
    };
    
    
    unionWithEverything2 {
        \schemaVar \term Set s;
        
        \find(union(everything, s))
        
        \replacewith(everything)
        
        \heuristics(concrete)
    };
    
    
    intersectWithEverything1 {
        \schemaVar \term Set s;
        
        \find(intersect(s, everything))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    

    intersectWithEverything2 {
        \schemaVar \term Set s;
        
        \find(intersect(everything, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    

    setMinusWithEverything1 {
        \schemaVar \term Set s;
        
        \find(setMinus(s, everything))
        
        \replacewith(empty)
        
        \heuristics(concrete)
    };
    

    setMinusWithEverything2 {
        \schemaVar \term Set s;
        
        \find(setMinus(everything, s))
        
        \replacewith(complement(s))
        
        \heuristics(concrete)
    };
    

    complementEverything {
        \schemaVar \term Set s;
        
        \find(complement(everything))
        
        \replacewith(empty)
        
        \heuristics(concrete)
    };
    
    
    subsetOfEverything {
        \schemaVar \term Set s;    	
        
        \find(subset(s, everything))
	
	\replacewith(true)
	
        \heuristics(concrete)
    };
}
