\rules{
  /***********
   *  AXIOMS  *
   ***********/
  /*
   * CharList translateInt (int)
   * - translating an integer into a CharList
   */
  translate0 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(0(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('0',empty)))
    \heuristics (integerToString)
  };

  translate1 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(1(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('1',empty)))
    \heuristics (integerToString)
  };

  translate2 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(2(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('2',empty)))
    \heuristics (integerToString)
  };

  translate3 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(3(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('3',empty)))
    \heuristics (integerToString)
  };

  translate4 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(4(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('4',empty)))
    \heuristics (integerToString)
  };

  translate5 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(5(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('5',empty)))
    \heuristics (integerToString)
  };

  translate6 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(6(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('6',empty)))
    \heuristics (integerToString)
  };

  translate7 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(7(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('7',empty)))
    \heuristics (integerToString)
  };

  translate8 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(8(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('8',empty)))
    \heuristics (integerToString)
  };

  translate9 {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(9(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('9',empty)))
    \heuristics (integerToString)
  };

  translate# {
    \find (translateInt(Z(#)))
    \replacewith (empty)
    \heuristics (integerToString)
  };

  translateNegLit {
    \schemaVar \term numbers iz;
    \find (translateInt(Z(neglit(iz))))
    \replacewith (concat(translateInt(Z(iz)),cons('-',empty)))
    \heuristics (integerToString)
  };

  
  /*
   * CharList removeZeros (CharList) - removing '0' from
   * the beginning of a CharList must not lead to the empty list
   */
  removeZeros {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c1, c2;
    \find (removeZeros(cons(c1,cons(c2,l))))
    \replacewith (\if (c1 = '0') \then (removeZeros(cons(c2,l)))
    		      	   	 \else (cons(c1,cons(c2,l))))
    \heuristics (integerToString)
  };

  removeZerosEmpty {
    \schemaVar \term jchar c;
    \find (removeZeros(cons(c,empty)))
    \replacewith (cons(c,empty))
    \heuristics (integerToString)
  };

 /*
   * int charAt (int,CharList)
   * an index < 0 and >= length(l) in unspecified
   */
  charAtBase {
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstChar;
    
    \find ( charAt(0, cons(fstChar, str) ) )
    \replacewith  ( fstChar )
 
    \heuristics ( simplify_literals )
  };
   
  charAtObserverDef {
     \schemaVar \term CharList str;
     \schemaVar \term jchar fstChar;
     \schemaVar \term int pos;
    
     \find ( charAt(pos, str) )
     \sameUpdateLevel         
     \add (
     	(pos >= 0 & pos < length(str) & str != empty) ->  
     	   ( pos > 0 -> charAt(pos, str) = charAt(0, substring(pos, pos + 1, str)) )     	 
     	     ==>
     )
     \heuristics ( defOpsCharAt )
  };
  
    /*
   * = (CharList,CharList)nonNe
   * the equality predicate
   */

  /*
   * Equality is also axiomatized using charAt...
   */
  stringEqualityDefinitionAntec {
    // strategy: not both leftStr and rightStr are literals 
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \variables int idx;
    
    \find ( leftStr = rightStr ==> )
    \varcond ( \notFreeIn(idx, leftStr), \notFreeIn(idx, rightStr) )
    \add (
          length(leftStr) = length(rightStr) &
          \forall idx; ((idx >= 0 & idx < length(leftStr))
                         -> charAt(idx, leftStr) = charAt(idx, rightStr)) ==> )

    \heuristics (defOpsStringEquality)
  };

  stringEqualityDefinitionSucc {
    // strategy: not both leftStr and rightStr are literals 

    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \variables int idx;
    
    \find ( ==> leftStr = rightStr )
    \varcond ( \notFreeIn(idx, leftStr), \notFreeIn(idx, rightStr) )
    \add ( ==>
          length(leftStr) = length(rightStr) &         
          \forall idx; ((idx >= 0 & idx < length(leftStr))
                         -> charAt(idx, leftStr) = charAt(idx, rightStr)) )
    
    \heuristics (defOpsStringEquality)
  };

  stringEqualityRecursiveDef {
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \term jchar fstCharLeft, fstCharRight;
    
    \find (cons(fstCharLeft, leftStr) = cons(fstCharRight, rightStr))
    \replacewith (\if (fstCharLeft = fstCharRight) 
    		  \then (leftStr = rightStr)
    		  \else (false))
    \heuristics ( defOpsStringEqualityInline ) 
  };
  
  stringEqualityFalse0 {
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstChar;
    
    \find ( cons(fstChar, str) = empty )
    \replacewith ( false )
    \heuristics ( concrete )
  };

  stringEqualityFalse1 {
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstChar;
    
    \find ( empty = cons(fstChar, str) )
    \replacewith ( false )
    \heuristics ( concrete )
  };

  

  /*
   * CharList substring(int,int,CharList)
   * from start index to end index
   * The axiom substring0 uses the indirection through concat,
   * so it does not create a cons term that is not in value form.
   */

  substringBase { 
    //strategy: apply if idx is nonNegLiteral
    // in case idx is not a non neg literal, but a term 
    // the this case will be taken care of by substringDef followed by that empty is the only 
    // string with zero length 
    
    \schemaVar \term CharList str;
    \schemaVar \term int idx;
    
    \find ( substring(idx, idx, str) )
    \replacewith ( 
         \if ( idx >= 0 & idx <= length(str) ) 
         \then ( empty )
         \else ( substring(idx, idx, str) ) )
    
    \heuristics ( defOpsSubstringInlineBase )
  };
  
  substringStepCons { //strategy: apply if endIdx is posliteral
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstChar;
    \schemaVar \term int endIdx;
    
    \find ( substring (0, endIdx, cons(fstChar, str)) )
    \replacewith ( \if (endIdx > 0)
                   \then (concat(cons(fstChar, empty), substring(0, endIdx - 1, str)))
                   \else (substring(0, endIdx, cons (fstChar, str))) )
    \heuristics ( defOpsSubstringInlineStepCons )
  };

  substringInline { //strategy: apply if startIdx is literal and endIdx
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstChar;
    \schemaVar \term int startIdx, endIdx;
    
    \find ( substring (startIdx, endIdx, cons(fstChar, str)) )
    \replacewith ( 
    	\if (startIdx > 0 & startIdx <= endIdx) 
    	\then (substring(startIdx - 1, endIdx - 1, str))
    	\else (substring(startIdx, endIdx, cons(fstChar, str))) 
    )
    \heuristics ( defOpsSubstringInline )
  };

  substringDef { //strategy: apply if startIdx is literal
    \schemaVar \term CharList str;
    \schemaVar \skolemTerm CharList subStr;
    \schemaVar \term jchar fstChar;
    \schemaVar \term int startIdx, endIdx;
    \schemaVar \variables int pos;
    
    
    \find ( substring (startIdx, endIdx, str) )
    \sameUpdateLevel
    \varcond ( \new(subStr, \dependingOn(startIdx)), 
               \new(subStr, \dependingOn(endIdx)),
               \new(subStr, \dependingOn(str)),
               \notFreeIn(pos, startIdx, endIdx, str) )
    \add ( 
        ( startIdx >=0       & 
          startIdx <= endIdx & 
          endIdx <= length (str) ) 
      ->
        ( substring (startIdx, endIdx, str) = subStr & 
          length(subStr) = endIdx - startIdx         &
          \forall pos; ( 
                ( pos >= startIdx & pos < endIdx )
                     -> charAt(pos, str) = charAt(pos, subStr)
          )
        ) ==> )
    \heuristics ( defOpsSubstring )
  };
  
  
  /*
   * CharList concat (CharList,CharList)
   * concatenate the two lists
   */
  concatEmpty1 {
    \schemaVar \term CharList str;
    \find ( concat(empty, str) )
    \replacewith ( str )
    \heuristics ( simplify_literals )
  };

  concatEmpty2 {
    \schemaVar \term CharList str;
    \find ( concat(str, empty) )
    \replacewith ( str )
    \heuristics ( simplify_literals )
  };
  
  concatCons {
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \term jchar fstCharLeft, fstCharRight;

    \find ( concat(cons(fstCharLeft, leftStr), cons(fstCharRight, rightStr)) )
    
    \replacewith ( cat(cons(fstCharLeft, empty), 
                       concat(leftStr, cons(fstCharRight, rightStr))) )

    \heuristics ( simplify_literals )
  };
  

  concatConsDef {
    // strategy, apply only once and only if leftStr or rightStr is not a literal  
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \skolemTerm CharList concatStr;
    
    \find ( concat(leftStr, rightStr) )
    \sameUpdateLevel    
    \varcond ( \new(concatStr, \dependingOn(leftStr)) ,
      	       \new(concatStr, \dependingOn(rightStr)) )
    \add (
	concat(leftStr, rightStr) = concatStr &
        length(concatStr) = length (leftStr) + length (rightStr) &
        substring(0, length(leftStr), concatStr) = leftStr &
        substring(length(leftStr), length(concatStr), concatStr) = rightStr 
    	==> 
    )

    \heuristics ( defOpsConcat )
  };


/** concat should not built terms, where a cons subterm is
     not in value form so this axiom should be used with care **/
  concatConsDep {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term jchar c;

    \find (concat(cons(c,l1),l2))
    \replacewith (cons(c,concat(l1,l2)))
  
  };

  cat {
    \schemaVar \term CharList str;
    \schemaVar \term jchar fstCharLeft, fstCharRight;
    
    \find ( cat(cons(fstCharLeft, empty), cons(fstCharRight, str)) )
    \replacewith ( cons(fstCharLeft, cons(fstCharRight, str)) )
    
    \heuristics ( simplify_literals )
  };

  /*
   * int length(CharList)
   */
  lengthEmpty {
    \find ( length(empty) )
    \replacewith (0)
    
    \heuristics ( simplify_literals )
  };

  lengthCons {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    
    \find ( length(cons(c, l)) )
    \replacewith ( length(l) + 1 )
    
    \heuristics ( simplify_literals )
  };
   
  /*
   * contains (CharList,CharList)
   * predicate indicating whether the first list
   * is contained in the second
   */
  containsAxiomAntec {
    \schemaVar \term CharList searchString, textString;
    \schemaVar \variables int iv;

    \find ( contains(searchString, textString) ==> )
    \varcond ( \notFreeIn (iv, searchString), \notFreeIn (iv, textString) )
    \replacewith ( \exists iv; (  iv >= 0
                               & iv + length(searchString) <= length(textString)
                               & substring(iv, iv + length(searchString), textString) = searchString) ==> )
    
    \heuristics (stringNormalisation1)
  };

  containsAxiomSucc {
    \schemaVar \term CharList searchString, textString;
    \schemaVar \variables int iv;

    \find (==> contains(searchString, textString) )
    \varcond ( \notFreeIn (iv, searchString), \notFreeIn (iv, textString) )
    \replacewith ( ==> \exists iv; (  iv >= 0
                       	            & iv + length(searchString) <= length(textString)
                                    & substring(iv, iv + length(searchString), textString) = searchString) )
    
    \heuristics (stringNormalisation1)
  };
  
  
   contains {
    \schemaVar \term CharList searchString, textStringTail;
    \schemaVar \term jchar fstTextCharacter;
    \schemaVar \skolemTerm int lengthSearchString;    
    
    \find (contains(searchString, cons(fstTextCharacter,textStringTail) ) )
    \sameUpdateLevel
    \varcond ( \new(lengthSearchString, \dependingOn(searchString) ) )    
    \replacewith ( lengthSearchString < length(textStringTail) & 
                     ( substring(0, lengthSearchString, cons(fstTextCharacter,textStringTail)) = searchString | 
                       contains(searchString, textStringTail) ) )
    \add ( length(searchString) = lengthSearchString ==>)
                               
    \heuristics (stringNormalisationReduce)
    
  };

 
  /*
   * structural induction over all CharLists
   */
  charlist_induction {
    \schemaVar \variables CharList lv;
    \schemaVar \variables jchar cv;
    \schemaVar \formula phi;
    \varcond ( \notFreeIn(cv,phi)  )
    "Base Case": \add ( ==> {\subst lv; empty}(phi) );
    "Step Case": \add ( ==> \forall lv; \forall cv;
                              ((inChar(cv) & phi)
                               -> {\subst lv; cons(cv,lv)}phi) );
    "Use Case":  \add ( \forall lv; (phi) ==> )
  };

  /*
   * jchar indexOf (jchar,int,CharList)
   */
  indexOf {
    \schemaVar \term CharList l;
    \schemaVar \term jchar c;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (indexOf (c,i,l))
    \varcond ( \notFreeIn(iv,l),
               \notFreeIn(iv,c),
               \notFreeIn(iv,i) )
    \replacewith ( \ifEx iv; (  iv >= 0
                              & iv >= i
                              & iv < length(l)
                              & charAt(iv,l) = c )
                     \then (iv)
                     \else (-1) )
  };


  
  /*
   * CharList replace (jchar,jchar,CharList)
   * replace all occurences of the first character
   * with the second character
   */
  replaceEmpty {
    \schemaVar \term jchar searchChar, replChar;
    
    \find ( replace(searchChar, replChar, empty))
    \replacewith ( empty )
    \heuristics ( stringsSimplify )
  };

  replaceCons {
    \schemaVar \term CharList str;
    \schemaVar \term jchar searchChar, replChar, fstChar;
    
    \find ( replace(searchChar, replChar, cons(fstChar, str)) )
    \replacewith ( \if (searchChar = fstChar)
                   \then (concat(cons(replChar, empty),
                                 replace(searchChar, replChar, str)))
                   \else (concat(cons(fstChar, empty),
                                 replace(searchChar, replChar, str))) )
    \heuristics ( defOpsReplaceInline )
  };
  
  replaceDef {
    \schemaVar \term CharList str;
    \schemaVar \skolemTerm CharList newStr;
    \schemaVar \term jchar searchChar, replChar;
    \schemaVar \variables int pos;
    
    \find ( replace(searchChar, replChar, str) )
    \sameUpdateLevel
    \varcond ( \notFreeIn(pos, str, newStr, searchChar, replChar),
               \new(newStr, \dependingOn(searchChar)),
               \new(newStr, \dependingOn(replChar)),
               \new(newStr, \dependingOn(str)) )  
    \add ( replace(searchChar, replChar, str) = newStr &
       \forall pos; (
               \if (charAt (pos, str) = searchChar)
               \then ( charAt (pos, newStr) = replChar )
               \else ( charAt (pos, str) = charAt (pos, newStr) ) 
       ) ==> )
    
    \heuristics ( defOpsReplace )
  };
  
  
  /*
   * endsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a suffix of the second one
   */
  endsWith {
    \schemaVar \term CharList l1, l2;
    
    \find (endsWith(l1,l2))
    \replacewith ( \if (length(l1) > length(l2))
    		   \then (false)
		   \else (substring(length(l2)-length(l1),
                                    length(l2),l2) = l1) )
    
    \heuristics (stringNormalisationReduce)
  };

  /*
   * startsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a prefix of the second one
   */
  startsWith {
    \schemaVar \term CharList l1,l2;
    \find(startsWith(l1,l2))
    \replacewith ( \if (length(l1)>length(l2))
    		   \then (false)
		   \else (substring(0,length(l1),l2) = l1) )
    
    \heuristics (stringNormalisationReduce)
  };

  /*
   * int indexOfStr (CharList,int,CharList)
   */
  indexOfStr {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (indexOfStr(l1,i,l2))
    \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,l2), \notFreeIn (iv,i) )
    \replacewith ( \ifEx iv; (iv >= i
    		   	      & iv >= 0
    		   	      & iv+length(l1) <= length(l2)
			      & (substring(iv,iv+length(l1),l2) = l1))
                   \then (iv)
                   \else (-1) )
    \heuristics (stringNormalisationReduce)    
  };

  /*
   * int lastIndexOf (jchar,int,CharList)
   */
  lastIndexOf {
      \schemaVar \term CharList l;
      \schemaVar \term jchar c;
      \schemaVar \term int i;
      \schemaVar \variables int iv;
      \find (lastIndexOf (c,i,l))
      \varcond ( \notFreeIn (iv,c), \notFreeIn (iv,i), \notFreeIn (iv,l) )
      \replacewith (\ifEx iv; (  iv > 0
                                & i-iv >= 0
                                & i-iv < length(l)
                                & charAt(i-iv,l) = c)
                    \then (i - iv)
                    \else (-1))
      \heuristics (stringNormalisationReduce)  
  };

  /*
   * int lastIndexOfStr (CharList,int,CharList)
   */
  lastIndexOfStr {
      \schemaVar \term CharList l1,l2;
      \schemaVar \term int i;
      \schemaVar \variables int iv;
      \find (lastIndexOfStr (l1,i,l2))
      \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,i), \notFreeIn (iv,l2) )
      \replacewith (\ifEx iv; (  iv > 0
                                & i-iv >= 0
                                & length(l1)+i-iv <= length(l2)
                                & (substring(i-iv,length(l1)+i-iv,l2) = l1))
                    \then (i - iv)
                    \else (-1))
      \heuristics (stringNormalisationReduce)
  };

 

  /**
   * we define only the base case
   */
  hashCodeBase {
    \find ( hashCode(empty) )
    \replacewith ( 0 )
    \heuristics ( simplify_literals )
  };

  /************
   *  LEMMAS  *
   ************/
   
  substringIdentity0 {
    \schemaVar \term CharList l;
    \schemaVar \term int len;    

    \assumes (length(l) = len ==>)
    \find ( substring(0, len, l) )
    \sameUpdateLevel
    \replacewith ( l )
    \heuristics ( stringsSimplify )

    \displayname "substringIdentity"
  };


  substringIdentity1 {
    \schemaVar \term CharList str;

    \find ( substring(0, length(str), str) )
    \replacewith ( str )
    \heuristics ( stringsSimplify )
    
    \displayname "substringIdentity"
  };

   /*
    * empty is the only list having length 0
    */
   zeroLengthIsEmptyString { // strategy: apply only once
    \schemaVar \term CharList str;
    
    \find ( length(str) = 0 ==> )
    \add ( str = empty ==> )
    \heuristics ( stringsLengthInvariant )
  };

  /*
   * The length of every CharList is at least 0
   */
  lengthNonNegative {
      \schemaVar \term CharList str;
  
      \find (length(str)) 
      \sameUpdateLevel
      \add (length(str) >= 0 ==> )
      \heuristics ( stringsLengthInvariant )
  };  
  
  /*
   * The length of a concatenation
   */
  lengthConcat {
      \schemaVar \term CharList leftStr, rightStr, concatStr;
      
      \assumes ( concat(leftStr, rightStr) = concatStr ==>)
      \find ( length(concatStr) )
      \sameUpdateLevel      
      \replacewith ( length(leftStr) + length(rightStr) )
      \heuristics ( stringsSimplify )
      
      \displayname "lengthConcat"
  };

  /*
   * A replace application will not change
   * the length of the string
   */
  lengthReplace {
      \schemaVar \term CharList str, newStr;
      \schemaVar \term jchar searchChar, replaceChar;
      
      \assumes ( replace(searchChar, replaceChar, str) = newStr ==>)      
      \find ( length(newStr) )
      \sameUpdateLevel
      \replacewith( length(str) )
      \heuristics ( stringsSimplify )
  };

  /*
   * charAt applied on a concat will either refer
   * to the first or the second subterm
   */
  charAtConcat {
      \schemaVar \term CharList leftStr,rightStr;
      \schemaVar \term int charPos;
      
      \find ( charAt(charPos, concat(leftStr, rightStr)))
      \replacewith ( \if (charPos >= 0 & charPos < length(leftStr) + length(rightStr))
                     \then (\if (charPos < length(leftStr))
                             \then (charAt(charPos, leftStr))
                             \else (charAt(charPos - length(leftStr), rightStr)))
                     \else (charAt(charPos, concat(leftStr, rightStr))) )
      \heuristics ( stringsConcatNotBothLiterals, stringsReduceConcat )
  };

  /*
   * Two succedent substring calls can be combined to one
   */
  substringSubstring {
      \schemaVar \term CharList str;
      \schemaVar \skolemTerm CharList subStr;
      \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;
      
      \find ( substring(outerStartIdx, outerEndIdx,substring(innerStartIdx, innerEndIdx, str)) )
      \sameUpdateLevel
      
      \varcond ( \new(subStr, \dependingOn(str)),
                 \new(subStr, \dependingOn(outerStartIdx)), 
                 \new(subStr, \dependingOn(outerEndIdx)), 
                 \new(subStr, \dependingOn(innerStartIdx)) ) 
      \add ( (innerStartIdx >= 0 
      	      & innerEndIdx >= innerStartIdx
              & innerEndIdx <= length(str)
              & outerStartIdx >= 0
              & outerEndIdx >= outerStartIdx 
              & outerEndIdx <= innerEndIdx - innerStartIdx) 
            -> 
             (substring(outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx, str) = subStr) ==> )      
      \heuristics ( stringsReduceSubstring )      
  };

  substringSubstring2 {
      \schemaVar \term CharList str, innerSub;
      \schemaVar \skolemTerm CharList subStr;
      \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;
      
      \assumes ( substring(innerStartIdx, innerEndIdx, str) = innerSub ==> )
      \find ( substring(outerStartIdx, outerEndIdx, innerSub) )
      \sameUpdateLevel      
      \varcond ( \new(subStr, \dependingOn(str)),
                 \new(subStr, \dependingOn(outerStartIdx)), 
                 \new(subStr, \dependingOn(outerEndIdx)), 
                 \new(subStr, \dependingOn(innerStartIdx)) ) 
      \add ( (innerStartIdx >= 0 
      	      & innerEndIdx >= innerStartIdx
              & innerEndIdx <= length(str)
              & outerStartIdx >= 0
              & outerEndIdx >= outerStartIdx 
              & outerEndIdx <= innerEndIdx - innerStartIdx) 
            -> 
             (substring(outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx, str) = subStr) ==> )      
      \heuristics ( stringsReduceSubstring )      
  };


  /*
   * l is not equal to cons(c,l)
   */
  consEq {
      \schemaVar \term CharList str;
      \schemaVar \term jchar fstChar;
      \find ( str = cons(fstChar, str) )
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };

  /*
   * concatenation of a non empty string
   * changes the original string
   */
  concatEqLeft {
      \schemaVar \term CharList leftStr, rightStr;
      \assumes ( ==> leftStr = empty)
      \find ( concat(leftStr, rightStr) = rightStr )
      \sameUpdateLevel
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };
  
  concatEqRight {
      \schemaVar \term CharList leftStr, rightStr;
      \assumes ( ==> rightStr = empty)
      \find ( concat(leftStr, rightStr) = leftStr )
      \sameUpdateLevel
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };
  
  equalReduce {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term jchar c;
    \find (cons(c,l1) = cons(c,l2))
    \replacewith (l1 = l2)
    \heuristics ( stringsSimplify ) 
  };
  
  equalCharacters {
    \schemaVar \term numbers iz1, iz2;
    \find ( C(iz1) = C(iz2) )
    \replacewith ( Z(iz1) = Z(iz2) )
    \heuristics ( stringsSimplify ) 
  };
  

//CONTINUE

  substringConcat {
      \schemaVar \term CharList leftStr, rightStr;
      \schemaVar \term int startIdx, endIdx;
      
      \find ( substring(startIdx, endIdx, concat(leftStr, rightStr)) )
      \replacewith ( \if (  startIdx >= 0 & endIdx >= startIdx
                          & endIdx <= length(leftStr) + length(rightStr))
                     \then (\if (endIdx <= length(leftStr))
                            \then (substring(startIdx, endIdx, leftStr))
                            \else (\if (startIdx >= length(leftStr))
                                   \then (substring(
                                           startIdx - length(leftStr),
                                           endIdx - length(leftStr), rightStr))
                                   \else (concat(
                                           substring(startIdx,
                                                     length(leftStr),
                                                     leftStr),
                                           substring(0,
                                                     endIdx - length(leftStr),
                                                     rightStr)))))
                     \else (substring(startIdx, endIdx, concat(leftStr, rightStr))) )
      \heuristics ( stringsReduceOrMoveOutsideConcat, stringsConcatNotBothLiterals )      
  };

  substringConcat2 {
      \schemaVar \term CharList leftStr, rightStr, concatStr;
      \schemaVar \term int startIdx, endIdx;

      \assumes ( concat(leftStr, rightStr) = concatStr ==> )      
      \find ( substring(startIdx, endIdx, concatStr) )
      \replacewith ( \if (  startIdx >= 0 & endIdx >= startIdx
                          & endIdx <= length(concatStr) )
                     \then (\if (endIdx <= length(leftStr))
                            \then (substring(startIdx, endIdx, leftStr))
                            \else (\if (startIdx >= length(leftStr))
                                   \then (substring(
                                           startIdx - length(leftStr),
                                           endIdx - length(leftStr),rightStr))
                                   \else (concat(
                                           substring(startIdx,
                                                     length(leftStr),
                                                     leftStr),
                                           substring(0,
                                                     endIdx - length(leftStr),
                                                     rightStr)))))
                     \else (substring(startIdx, endIdx, concatStr)) )
      \heuristics ( stringsReduceOrMoveOutsideConcat, stringsConcatNotBothLiterals )      
  
      \displayname "substringConcat"
  };

  concatConcat {
      \schemaVar \term CharList outerLeft, innerLeft, innerRight;
      \find ( concat(outerLeft, concat(innerLeft, innerRight)) )
      \replacewith ( concat(concat(outerLeft, innerLeft), innerRight) )
      \heuristics ( stringsConcatAssoc )      
  };

  replaceSubstring1 {
      \schemaVar \term CharList str;
      \schemaVar \term jchar searchChar, replaceChar;
      \schemaVar \term int startIdx, endIdx;

      \find (replace(searchChar, replaceChar, substring(startIdx, endIdx, str)))
      \replacewith (\if (startIdx >= 0 & endIdx >= startIdx & endIdx <= length(str))
                    \then (substring(startIdx, endIdx, replace(searchChar, replaceChar, str)))
                    \else (replace(searchChar, replaceChar, substring(startIdx, endIdx, str))) )
      \heuristics ( stringMoveReplaceInside )
      
      \displayname "replaceSubstring"      
  };

  replaceSubstring2 {
      \schemaVar \term CharList str, subStr;
      \schemaVar \term jchar searchChar, replaceChar;
      \schemaVar \term int startIdx, endIdx;

      \assumes (substring(startIdx, endIdx, str) = subStr ==>)

      \find (replace(searchChar, replaceChar, subStr))
      \replacewith (\if (startIdx >= 0 & endIdx >= startIdx & endIdx <= length(str))
                    \then (substring(startIdx, endIdx, replace(searchChar, replaceChar, str)))
                    \else (replace(searchChar, replaceChar, subStr)) )
      \heuristics ( stringMoveReplaceInside )      

      \displayname "replaceSubstring"      
  };

  /*
   * A replace inside a concat application
   * does not affect the concat...
   */
  replaceConcat {
      \schemaVar \term CharList leftStr, rightStr;
      \schemaVar \term jchar searchChar, replaceChar;
      \find (replace(searchChar, replaceChar, concat(leftStr, rightStr)))
      \replacewith (concat(replace(searchChar, replaceChar, leftStr),
                           replace(searchChar, replaceChar, rightStr)))
      \heuristics ( stringMoveReplaceInside )      
   };

  
}

/* can be rmeoved (most likely)
  charAtSubstring1 {
      \schemaVar \term CharList str;
      \schemaVar \term int charPos, startIdx, endIdx;

      \find (charAt(charPos, substring(startIdx, endIdx, str)))      
      \replacewith( \if (  charPos < endIdx - startIdx
                         & charPos >= 0
                         & startIdx >= 0
                         & endIdx >= startIdx
                         & endIdx <= length(str))
                    \then (charAt(charPos + startIdx, str))
                    \else (charAt(charPos, substring(startIdx, endIdx, str))))
                    
     \displayname "charAtSubstring"
  };

  charAtSubstring2 {
      \schemaVar \term CharList str, subStr;
      \schemaVar \term int charPos,startIdx,endIdx;

      \assumes ( substring(startIdx,endIdx,str) = subStr ==> )
      \find ( charAt(charPos, subStr) )
      \sameUpdateLevel
      \replacewith ( \if (charPos<endIdx-startIdx
                         & charPos>=0
                         & startIdx>=0
                         & endIdx>=startIdx
                         & endIdx<=length(str))
                    \then (charAt(charPos+startIdx,str))
                    \else (charAt(charPos,subStr)) )

     \displayname "charAtSubstring"
  };
*/
